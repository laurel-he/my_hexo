{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/linux/arch.png","path":"images/linux/arch.png","modified":1,"renderable":0},{"_id":"source/images/linux/cat1.png","path":"images/linux/cat1.png","modified":1,"renderable":0},{"_id":"source/images/linux/cat2.png","path":"images/linux/cat2.png","modified":1,"renderable":0},{"_id":"source/images/mysqlIndex/const.png","path":"images/mysqlIndex/const.png","modified":1,"renderable":0},{"_id":"source/images/mysqlIndex/error.png","path":"images/mysqlIndex/error.png","modified":1,"renderable":0},{"_id":"source/images/mysqlIndex/exp.png","path":"images/mysqlIndex/exp.png","modified":1,"renderable":0},{"_id":"source/images/mysqlIndex/explain.png","path":"images/mysqlIndex/explain.png","modified":1,"renderable":0},{"_id":"source/images/mysqlIndex/towrow.png","path":"images/mysqlIndex/towrow.png","modified":1,"renderable":0},{"_id":"source/images/mysqlIndex/towrowres.png","path":"images/mysqlIndex/towrowres.png","modified":1,"renderable":0},{"_id":"source/images/mysql数据库维护/TestSql.png","path":"images/mysql数据库维护/TestSql.png","modified":1,"renderable":0},{"_id":"source/images/linux/uname.png","path":"images/linux/uname.png","modified":1,"renderable":0},{"_id":"source/images/mongo/accu.png","path":"images/mongo/accu.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"ce8ce357c8559ce7b8728ef97109a0a2b7d256fb","modified":1627005507060},{"_id":"source/_posts/fit02.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627005507065},{"_id":"source/_posts/2019-02-26.md","hash":"fc3b7f107512b0e228ef0a9be25e76e73e41a943","modified":1627005507061},{"_id":"source/_posts/2019-03-07.md","hash":"9b5cfe537f800b69023f0480128efd4b374b6aae","modified":1627005507061},{"_id":"source/_posts/20190202.md","hash":"f92b45cf987397d3a093bc182f4a3cc8d95f9fd9","modified":1627005507061},{"_id":"source/_posts/20190213.md","hash":"7f5cdd8bdd1095773592e41029ba6e2ca7795c9f","modified":1627005507061},{"_id":"source/_posts/20190214.md","hash":"f75a7e147df06191cc985b88798d57798b7c8e62","modified":1627005507061},{"_id":"source/_posts/20190220.md","hash":"a662b7d24c4e5fec747001456eee0cbe26b6cb14","modified":1627005507062},{"_id":"source/_posts/20190227.md","hash":"ce9fd821333ee70ac95ed206c241121d7a20b7f5","modified":1627005507062},{"_id":"source/_posts/2019_01_01.md","hash":"8d300cb60ba3b26e22cfba6161e8677d69eacc6e","modified":1627005507062},{"_id":"source/_posts/AbstractFactory.md","hash":"3803b48a59d99a86cf509bb2deb71db1e0527cdf","modified":1627005507062},{"_id":"source/_posts/Hexo.md","hash":"f07bb7229e880863b0b03cacbd9bff1885999c51","modified":1627005507062},{"_id":"source/_posts/LANP.md","hash":"c69e13b195ff0d515fa3c1f61ca90336005a87b0","modified":1627005507062},{"_id":"source/_posts/Laurel.md","hash":"6b3952a94a3a0c69adc702ca11032261024290da","modified":1627005507062},{"_id":"source/_posts/Log.md","hash":"f9da49f12458afd4d258815c544f41204e0e666f","modified":1627005507062},{"_id":"source/_posts/bash.md","hash":"ce97fb8d1277e2cb7a34354978f0e231c29cf882","modified":1627005507063},{"_id":"source/_posts/SimpleFactory.md","hash":"442643bb86d516129fc38f797004d039a517eaa4","modified":1627005507063},{"_id":"source/_posts/Strategy.md","hash":"e85850c288f9d30c9a97a6ff389630cdab6b8866","modified":1627005507063},{"_id":"source/_posts/cleanCode.md","hash":"c56d2f127c159cbd18fa828c73f4b12f33fbcdeb","modified":1627005507063},{"_id":"source/_posts/codeCollect.md","hash":"fde1933c61952026e18519c3263d27350fb0faab","modified":1627005507063},{"_id":"source/_posts/codeCollect2.md","hash":"e10635bb1c9fe15c159cbffdf8a4fd98cdcbf61d","modified":1627005507063},{"_id":"source/_posts/codePrinceple.md","hash":"d8193b47cc9fc8f43c6664e8082af9645185da79","modified":1627005507064},{"_id":"source/_posts/codeComplate_01.md","hash":"ec2a0770e71ad21572477908e5e2a671d180a648","modified":1627005507063},{"_id":"source/_posts/commandMode.md","hash":"38d026c2498ff31c9e4dc9a382b02e7daae2af0a","modified":1627005507064},{"_id":"source/_posts/crontab.md","hash":"3136f2a516804eacb8cae44a4398ec4552e809e9","modified":1627005507064},{"_id":"source/_posts/dataStruct_01.md","hash":"99e6046ff22f1f02abded6674083fc185e668cb3","modified":1627006198862},{"_id":"source/_posts/dePat.md","hash":"54f6e3209ccf5ea6d18cac9a27a0b9abd244fe5c","modified":1627005507064},{"_id":"source/_posts/demo_01.md","hash":"67794a4786eb1a768eaa92ba9a98ade7639699a7","modified":1627005507064},{"_id":"source/_posts/design_patter01.md","hash":"9763efa0851a5ec1bd0002e676bc962a6af1a4f1","modified":1627005507064},{"_id":"source/_posts/design_pattern02.md","hash":"59a6bfdea80ee79449c082768f7f5c2eb21b4025","modified":1627005507064},{"_id":"source/_posts/design_singleton.md","hash":"1455aea36fd0c51574122a26c4febc889e8642a4","modified":1627005507065},{"_id":"source/_posts/docker.md","hash":"7d0c9ce49b686f86e7a56f8371b41d868ac8e1c6","modified":1627005507065},{"_id":"source/_posts/docker01.md","hash":"3177ea5d0e97d7b7c2472896392669e49a12f10c","modified":1627005507065},{"_id":"source/_posts/fastJsonPatch.md","hash":"69d25138067e3cfba3c91cad646e908149137271","modified":1627005507065},{"_id":"source/_posts/fit01.md","hash":"4b3d86c8a69cffaddc6dc356fe7cb5a55c56e3dd","modified":1627005507065},{"_id":"source/_posts/generators.md","hash":"d0b3f427c4f30de9e16e431a3c05dc131744477f","modified":1627005507065},{"_id":"source/_posts/genericity.md","hash":"1ac9e8c710125c1be4e3a19c3ec1d8c6f549918f","modified":1627005507065},{"_id":"source/_posts/git.md","hash":"3b6534a6498165a4b6f1762621a3bf0ebffee414","modified":1627005507066},{"_id":"source/_posts/githubGuide.md","hash":"351b05d7f87db232832b76badfa42344da55ee11","modified":1627005507066},{"_id":"source/_posts/json.md","hash":"b7db40801edf24d70bedea075e50257059adb872","modified":1627005507066},{"_id":"source/_posts/k8s01.md","hash":"d37a6d2e838fe6fcb3904e77f1b5103caa41fc77","modified":1627005507066},{"_id":"source/_posts/kustomize01.md","hash":"a21af2caa230753ac49c083b98b731b7938efc22","modified":1627005507066},{"_id":"source/_posts/learn_main.md","hash":"5300a162da74cfc096e9a31f01f69fbd807794d9","modified":1627005507066},{"_id":"source/_posts/linuxOpe.md","hash":"2ba7f9f348f88635144cecf8a6b01b0574f85785","modified":1627005507066},{"_id":"source/_posts/linuxUse.md","hash":"9dde6592fce5dc413d9cc170948ff4f0a8e5f42a","modified":1627005507067},{"_id":"source/_posts/mongo1.md","hash":"89dfc4489dff6e0c8da69964fc6434061e4f1b98","modified":1627005507067},{"_id":"source/_posts/mongoComplex.md","hash":"e41b3e0f00d0f25c15a038311ad97e6221d6d327","modified":1627005507067},{"_id":"source/_posts/monthly.md","hash":"78eb81adb44491b27afb329ad80b106130f8ecfa","modified":1627005507067},{"_id":"source/_posts/multiArr.md","hash":"f1a9beeb709f0ede25313df71528c4ec4144ad1f","modified":1627005507067},{"_id":"source/_posts/mysqlIndex.md","hash":"0e288e3c7e3ea31154703d06fa41d30addc9baa1","modified":1627005507068},{"_id":"source/_posts/mysqlMerge.md","hash":"02ceae75382732bd5ad353daa23efe95ac1fbe69","modified":1627005507068},{"_id":"source/_posts/mysqlMustKnown_01.md","hash":"07adb949de1f813bc84c05a412083a3660af536c","modified":1627006683123},{"_id":"source/_posts/mysql数据库维护.md","hash":"10aab9f168352f6714fdb35fe47da8b3e9a6415b","modified":1627005507068},{"_id":"source/_posts/opratingSystem_01.md","hash":"1d197beeb6defea49aaa79320b37592778e175cf","modified":1627006479386},{"_id":"source/_posts/opratingSystem_02.md","hash":"8e7964310baf051d307f49ef9162808a5787f8b0","modified":1627006528157},{"_id":"source/_posts/opratingSystem_03.md","hash":"bccf1b109e18f268a378eb7873b16621e03fa563","modified":1627006603401},{"_id":"source/_posts/phpAlg.md","hash":"8823529c690abd12e9b5685e2dcc4b3051483cab","modified":1627005507068},{"_id":"source/_posts/phpPsr.md","hash":"dba43bb6d5f179abd39fd5eb051b0a6dfe33c397","modified":1627005507068},{"_id":"source/_posts/producerConsumer.md","hash":"80511d98d64c3cba2d0c3d241dd1db8565ec21da","modified":1627005507069},{"_id":"source/_posts/python.md","hash":"f4ac8350d261dad8e2fef09ab0c7570c8e365c4d","modified":1627005507069},{"_id":"source/_posts/pythonStructure.md","hash":"98bb81c9cc3ad6bd0d61ad083921e55606ff00a7","modified":1627005507069},{"_id":"source/_posts/python_base.md","hash":"4282f843bc0faf1a503e491b4afdbf937b45d221","modified":1627005507069},{"_id":"source/_posts/python_debugger.md","hash":"7e76799e0446a377743e479d9d24afdeb033c88f","modified":1627005507069},{"_id":"source/_posts/pythondeque.md","hash":"a49f76b0927b4d5cb7c673c8fa7ac938a36f0978","modified":1627005507069},{"_id":"source/_posts/pythonlist.md","hash":"bb7827dc1ab6530358c2b505033f376e75eb9090","modified":1627005507070},{"_id":"source/_posts/pythonset.md","hash":"6934da34c3d06191391d9f1ede5312075aff4b87","modified":1627005507070},{"_id":"source/_posts/reactUnit.md","hash":"0f23c22d7612a8a4362d3a330808b25b1090606e","modified":1627005507070},{"_id":"source/_posts/react_01.md","hash":"5d820f2dd185d1ef79a01cb787f8434476d12db9","modified":1627005507070},{"_id":"source/_posts/react_02.md","hash":"e4dc2c36f8542e35f36280bcd2855d34aa478128","modified":1627005507070},{"_id":"source/_posts/react_06.md","hash":"5a0a70fc1d44b305c567075bb30aadb0d6980025","modified":1627005507070},{"_id":"source/_posts/react_base.md","hash":"937e767f0a35f83b7a428b3857bcac6d4652bf29","modified":1627005507070},{"_id":"source/_posts/singleMode.md","hash":"d86f6fc5547ab4775832abb26443278bcefcb813","modified":1627005507071},{"_id":"source/_posts/test-my-site.md","hash":"121ba28d35f32a328567355303420e959c1fedd1","modified":1627005507071},{"_id":"source/_posts/unitTest.md","hash":"73f0222bd864b2be94d0c7b52da3c7e547366c21","modified":1627005507071},{"_id":"source/_posts/usefulCode1.md","hash":"fcc262a1339bfecc951db4bc3d75ffa51cc1cbf0","modified":1627005507071},{"_id":"source/_posts/usefulCode2.md","hash":"041ae82debb1b8fa8260d950fa9cafd14ee0b1ee","modified":1627005507071},{"_id":"source/_posts/vim.md","hash":"c0c4950896bf8056c0d381bb9fa760f2ad86e676","modified":1627005507071},{"_id":"source/_posts/wechat.md","hash":"eb82e93cca2f3c8db5ed67bd14d216f87727f10f","modified":1627005507072},{"_id":"source/_posts/webassembly_go_1.md","hash":"bae394604fca9cddd70d4d2851ea771f46c3333d","modified":1627005507071},{"_id":"source/_posts/work.md","hash":"93cfe3e9d7c86459006f6f560676e3a7a4ca3a27","modified":1627005507072},{"_id":"source/about/index.md","hash":"f157039b3832a11ef0918de261b323ee8a023059","modified":1627005507072},{"_id":"source/categories/index.md","hash":"35eae9651d72f365b2edb129fd4bbd48aa22a619","modified":1627005507072},{"_id":"source/tags/index.md","hash":"260e9e49ad0f886a17510f80cc5da1bd88d713f5","modified":1627005507078},{"_id":"source/images/linux/arch.png","hash":"e115fba7cf5ed09b0d56f0563a7d867444547709","modified":1627005507072},{"_id":"source/images/linux/cat1.png","hash":"285db22efd08fae08abc249cb7b139b464480eb6","modified":1627005507073},{"_id":"source/images/linux/cat2.png","hash":"97ce444078b8b85667f1e1489ff3ce061ac8ae65","modified":1627005507073},{"_id":"source/images/mysqlIndex/const.png","hash":"82cce1e16e88f05e98f1e2f5eb95541c79fb5abe","modified":1627005507075},{"_id":"source/images/mysqlIndex/error.png","hash":"1b3981b8f75193f57fbb890456273ba8c5a2dfa1","modified":1627005507075},{"_id":"source/images/mysqlIndex/exp.png","hash":"43712a827a401ca6b5dcf7388fb0b7369f521048","modified":1627005507076},{"_id":"source/images/mysqlIndex/explain.png","hash":"599a4e1628da1c74ea6b662a347107a387662140","modified":1627005507076},{"_id":"source/images/mysqlIndex/towrow.png","hash":"b56fa3d5e48b7bd15c30ffc77fd574353510b6e9","modified":1627005507077},{"_id":"source/images/mysqlIndex/towrowres.png","hash":"839f322e1b21c8df3fc8bc7b08b7feea9e0d43b1","modified":1627005507077},{"_id":"source/images/mysql数据库维护/TestSql.png","hash":"16c69cd2bad29a6e953308aa1ba950c1c6a319c9","modified":1627005507078},{"_id":"source/images/linux/uname.png","hash":"08dc8c67628f400c11fee0b6462d977c3706137f","modified":1627005507074},{"_id":"source/images/mongo/accu.png","hash":"9d82515d82c0b61535cfc890f87233983549dd42","modified":1627005507075},{"_id":"public/atom.xml","hash":"80d2386948dfb7d7282b43f459b0267bcffc6360","modified":1627012318855},{"_id":"public/content.json","hash":"85555f4d174e9657e6db7af2d32ca0e8b5ddd847","modified":1627012318855},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2021/07/23/fit02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2021/07/20/dataStruct_01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2021/07/20/opratingSystem_01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2021/07/20/opratingSystem_02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2021/07/20/opratingSystem_03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2021/04/02/mysqlMustKnown_01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/07/08/learn_main/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/05/21/kustomize01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/05/07/design_pattern02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/05/16/k8s01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/05/07/design_patter01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/04/21/docker01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/04/16/multiArr/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/02/27/linuxOpe/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/02/27/linuxUse/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/02/25/codeCollect/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/02/25/codeCollect2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/01/16/usefulCode2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2020/01/16/usefulCode1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/12/10/unitTest/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/12/10/webassembly_go_1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/29/design_singleton/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/22/react_06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/22/react_base/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/20/mongoComplex/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/07/cleanCode/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/07/codePrinceple/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/06/singleMode/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/05/producerConsumer/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/05/work/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/05/codeComplate_01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/10/04/commandMode/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/08/15/json/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/29/Strategy/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/29/reactUnit/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/26/2019-03-07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/26/fastJsonPatch/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/24/SimpleFactory/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/22/genericity/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/22/AbstractFactory/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/22/dePat/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/18/demo_01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/09/react_02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/07/08/react_01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/05/23/fit01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/28/LANP/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/24/docker/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/24/githubGuide/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/24/git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/11/Log/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/10/crontab/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/08/mysqlMerge/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/08/phpAlg/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/07/phpPsr/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/02/mongo1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/02/mysqlIndex/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/04/01/Hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/28/mysql数据库维护/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/28/wechat/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/28/Laurel/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/25/monthly/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/15/pythonset/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/15/pythonlist/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/15/pythonStructure/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/15/pythondeque/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/14/python_base/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/14/generators/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/14/python_debugger/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/14/python/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/13/bash/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/05/20190220/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/02/20190213/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/03/02/20190214/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/02/28/vim/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/02/28/20190227/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/02/26/2019-02-26/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/02/02/20190202/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/02/01/2019_01_01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/2019/01/31/test-my-site/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/page/7/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/page/8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/03/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/04/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/07/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/10/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2019/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2020/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2020/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2020/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2020/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2020/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2020/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2020/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2021/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2021/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/archives/2021/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/服务端语言/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/服务端语言/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/刷题/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/服务端语言/python/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/服务端语言/python/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/数据库/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/刷题/Leetcode刷题/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/快捷键/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/学习/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/学习/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/前端/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/服务端语言/php/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/数据库/Hbase/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/有用代码段收集/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/linux/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/学习/设计模式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/学习/数据结构/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/docker/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/设计模式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/前端/react/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/服务端语言/php/laravel/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/生活/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/前端/typescript/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/工作/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/学习/代码整洁之道/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/容器/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/操作系统/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/数据库/mongodb/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/php/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/数据库/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/学习/代码大全/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/linux/crontab/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/学习/设计模式/面向对象设计原则/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/前端/react/json-patch/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/服务端语言/php/fastadmins/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/学习/测试/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/工作经验/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/其他/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/生活/减肥/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/容器/k8s/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/操作系统/linux/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/生活/减肥/适应期/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/容器/k8s/kubenetes权威指南/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/容器/k8s/kustomize/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/操作系统/linux/系统相关/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/categories/操作系统/linux/文件相关/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/page/7/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/page/8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/工作/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/学习/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/学习/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/学习/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/基础命令/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/文档/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/概念介绍/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/demo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/使用心得/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/小工具/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/减肥/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/工作经验/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/优化/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/测试/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/tips/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/tags/go/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627012318855},{"_id":"public/CNAME","hash":"ce8ce357c8559ce7b8728ef97109a0a2b7d256fb","modified":1627012318855},{"_id":"public/images/linux/arch.png","hash":"e115fba7cf5ed09b0d56f0563a7d867444547709","modified":1627012318855},{"_id":"public/images/linux/cat2.png","hash":"97ce444078b8b85667f1e1489ff3ce061ac8ae65","modified":1627012318855},{"_id":"public/images/mysqlIndex/const.png","hash":"82cce1e16e88f05e98f1e2f5eb95541c79fb5abe","modified":1627012318855},{"_id":"public/images/mysqlIndex/towrow.png","hash":"b56fa3d5e48b7bd15c30ffc77fd574353510b6e9","modified":1627012318855},{"_id":"public/images/mysqlIndex/towrowres.png","hash":"839f322e1b21c8df3fc8bc7b08b7feea9e0d43b1","modified":1627012318855},{"_id":"public/images/linux/cat1.png","hash":"285db22efd08fae08abc249cb7b139b464480eb6","modified":1627012318855},{"_id":"public/images/mysqlIndex/exp.png","hash":"43712a827a401ca6b5dcf7388fb0b7369f521048","modified":1627012318855},{"_id":"public/images/mysqlIndex/explain.png","hash":"599a4e1628da1c74ea6b662a347107a387662140","modified":1627012318855},{"_id":"public/images/mysqlIndex/error.png","hash":"1b3981b8f75193f57fbb890456273ba8c5a2dfa1","modified":1627012318855},{"_id":"public/images/mysql数据库维护/TestSql.png","hash":"16c69cd2bad29a6e953308aa1ba950c1c6a319c9","modified":1627012318855},{"_id":"public/images/linux/uname.png","hash":"08dc8c67628f400c11fee0b6462d977c3706137f","modified":1627012318855},{"_id":"public/images/mongo/accu.png","hash":"9d82515d82c0b61535cfc890f87233983549dd42","modified":1627012318855}],"Category":[{"name":"服务端语言","_id":"ckrft4kcl0004l0xoe8iagz33"},{"name":"刷题","_id":"ckrft4kcq0009l0xofv4z5ua9"},{"name":"python","parent":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kcx000kl0xofoyecxg0"},{"name":"数据库","_id":"ckrft4kd40012l0xo0uv11kui"},{"name":"Leetcode刷题","parent":"ckrft4kcq0009l0xofv4z5ua9","_id":"ckrft4kd6001al0xogr1japn7"},{"name":"快捷键","_id":"ckrft4kdc001il0xoct575cgq"},{"name":"学习","_id":"ckrft4kdf001pl0xo7wgz8cgk"},{"name":"前端","_id":"ckrft4kdl0027l0xoh02fhlcu"},{"name":"php","parent":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kdn002hl0xohb5lce3n"},{"name":"Hbase","parent":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kdv0034l0xog3ml8bvv"},{"name":"有用代码段收集","_id":"ckrft4kdx0039l0xo738ogsub"},{"name":"linux","_id":"ckrft4ke6003zl0xof68mfrc8"},{"name":"设计模式","parent":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4ke80045l0xo3pfzhr2k"},{"name":"数据结构","parent":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kea004cl0xobbeeccpu"},{"name":"docker","_id":"ckrft4kej004wl0xo8dky3voj"},{"name":"设计模式","_id":"ckrft4ken0051l0xo4vbc5baz"},{"name":"react","parent":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kep0057l0xo4nvm2rx7"},{"name":"laravel","parent":"ckrft4kdn002hl0xohb5lce3n","_id":"ckrft4ket005jl0xo9cbm2cjg"},{"name":"生活","_id":"ckrft4key005rl0xodia72bkr"},{"name":"typescript","parent":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kf40064l0xo0ecj3qpb"},{"name":"git","_id":"ckrft4kf6006al0xo2yo029yl"},{"name":"工作","_id":"ckrft4kf7006kl0xoh3ha0jq0"},{"name":"代码整洁之道","parent":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kf9006ol0xo0q2l6gqv"},{"name":"容器","_id":"ckrft4kf9006rl0xo69dkgf7t"},{"name":"操作系统","_id":"ckrft4kfa006xl0xo34cvc2vu"},{"name":"mongodb","parent":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kfb0073l0xo5xamdt3j"},{"name":"php","_id":"ckrft4kfc0077l0xoenre08oh"},{"name":"mysql","parent":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kff007el0xod0ac7wcb"},{"name":"代码大全","parent":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfg007il0xo7khhce4o"},{"name":"crontab","parent":"ckrft4ke6003zl0xof68mfrc8","_id":"ckrft4kfl0081l0xohld87a5l"},{"name":"面向对象设计原则","parent":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kfn008bl0xo70a67bni"},{"name":"json-patch","parent":"ckrft4kep0057l0xo4nvm2rx7","_id":"ckrft4kfu008ol0xo9xf0aukk"},{"name":"fastadmins","parent":"ckrft4kdn002hl0xohb5lce3n","_id":"ckrft4kfv008sl0xob8xxcdxv"},{"name":"测试","parent":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfw008vl0xoeno1fz5j"},{"name":"工作经验","_id":"ckrft4kfx008yl0xobq7153du"},{"name":"其他","_id":"ckrft4kfy0094l0xo6npkbwr9"},{"name":"减肥","parent":"ckrft4key005rl0xodia72bkr","_id":"ckrft4kfy0098l0xog5nxh1ms"},{"name":"k8s","parent":"ckrft4kf9006rl0xo69dkgf7t","_id":"ckrft4kfz009cl0xocigd1358"},{"name":"linux","parent":"ckrft4kfa006xl0xo34cvc2vu","_id":"ckrft4kg0009fl0xog8hb5ti3"},{"name":"适应期","parent":"ckrft4kfy0098l0xog5nxh1ms","_id":"ckrft4kg1009hl0xoasi19214"},{"name":"kubenetes权威指南","parent":"ckrft4kfz009cl0xocigd1358","_id":"ckrft4kg1009il0xod3ym8hpy"},{"name":"kustomize","parent":"ckrft4kfz009cl0xocigd1358","_id":"ckrft4kg1009kl0xo2igjbb1u"},{"name":"系统相关","parent":"ckrft4kg0009fl0xog8hb5ti3","_id":"ckrft4kg2009nl0xo5800ej9p"},{"name":"文件相关","parent":"ckrft4kg0009fl0xog8hb5ti3","_id":"ckrft4kg2009ql0xoesq1ht9u"}],"Data":[],"Page":[{"title":"about","date":"2020-05-13T04:27:04.000Z","type":"tags","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-05-13 12:27:04\ntype: \"tags\"\n---\n","updated":"2021-07-23T01:58:27.072Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckrft4kcj0002l0xockc2e8q8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-05-13T04:26:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-05-13 12:26:47\ntype: \"categories\"\n---\n","updated":"2021-07-23T01:58:27.072Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckrft4kg800a1l0xo16h34mjh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-05-13T04:26:38.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-05-13 12:26:38\ntype: \"tags\"\n---\n","updated":"2021-07-23T01:58:27.078Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckrft4kg900a2l0xofgnibqm2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"","source":"_posts/fit02.md","raw":"","slug":"fit02","published":1,"date":"2021-07-23T01:58:27.065Z","updated":"2021-07-23T01:58:27.065Z","title":"fit02","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kbq0000l0xo32n342av","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Monthly报表完成心得","date":"2019-02-26T08:10:10.000Z","_content":"## 1 知识点\n#### 添加日志\n引入logging包，引入log文件即可\n```\nlogging.basicConfig(filename=\"/tmp/bi_dsvcs/app.log\", level = logging.DEBUG)\n```\n有四种级别INFO, DEBUG, WARNING, ERROR, CRITICAL, FATAL\n#### 获取月份列表\n**需求**\n需要获取月份数据['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11']\n**原本解决办法**\n直接定义了一个这样的数组\n**新方法**\nrange()从0到13，再在一位数前补零\n**实现代码**\n```\ntheMonth = range(0, 13)\nmonthKey = map(lambda x:'%02d' % x, theMonth)\n```\n**新方法2**\n[\"%02d\" % x for x in range(1,13)]\n#### 数据库导入导出\nshell脚本里添加mysqldump导出数据\n导入数据为避免更改表结构，直接mysql -u……连接到库，执行insert操作\n#### gunicorn配置\n使用supervisor配置gunicorn，我本地虚拟机配置如下\n```\n[program:bi_dsvcs]\ncommand=python /usr/bin/gunicorn -c /spython/bi_dsvcs/gunicorn.cnf dsvcs:app\nprocess_name=%(program_name)s/%(process_num)d\ndirectory=/spython/bi_dsvcs\nnumprocs=1\nautostart=true\nautorestart=true\nuser=developer\nredirect_stderr=true\nstdout_logfile=/tmp/bi_dsvcs.interface.info_stdout.log\nstderr_logfile=/tmpbi_dsvcs.interface.error_stderr.loga\n```\n##2 注意事项\n#### group_concat\nGROUP_CONCAT()会截断数据，限制长度为1024字节\n#### dict\ndict不可以直接添加二维数据,需要判断第一维是否已经存在\n```\ndef addtwodimdict(thedict, key_a, key_b, val): \n    if key_a in adic:\n        thedict[key_a].update({key_b: val})\n    else:\n        thedict.update({key_a:{key_b: val}})\n```\n#### list的append()和extend()区别\n(1)append()\n接受任意数据类型添加到list尾部\n(2)extend()\n只接受list，将这个list每个元素添加到list中\n#### 部署后404但是代码确实已部署上去\nsupervisor可能没有重启，重启supervisor或者直接bi_dsvcs/ ./dsvcs restart \n","source":"_posts/2019-02-26.md","raw":"---\ntitle: Monthly报表完成心得\ndate: 2019-02-26 16:10:10\ntags: \n- 工作\ncategories: \n- 服务端语言\n- python\n---\n## 1 知识点\n#### 添加日志\n引入logging包，引入log文件即可\n```\nlogging.basicConfig(filename=\"/tmp/bi_dsvcs/app.log\", level = logging.DEBUG)\n```\n有四种级别INFO, DEBUG, WARNING, ERROR, CRITICAL, FATAL\n#### 获取月份列表\n**需求**\n需要获取月份数据['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11']\n**原本解决办法**\n直接定义了一个这样的数组\n**新方法**\nrange()从0到13，再在一位数前补零\n**实现代码**\n```\ntheMonth = range(0, 13)\nmonthKey = map(lambda x:'%02d' % x, theMonth)\n```\n**新方法2**\n[\"%02d\" % x for x in range(1,13)]\n#### 数据库导入导出\nshell脚本里添加mysqldump导出数据\n导入数据为避免更改表结构，直接mysql -u……连接到库，执行insert操作\n#### gunicorn配置\n使用supervisor配置gunicorn，我本地虚拟机配置如下\n```\n[program:bi_dsvcs]\ncommand=python /usr/bin/gunicorn -c /spython/bi_dsvcs/gunicorn.cnf dsvcs:app\nprocess_name=%(program_name)s/%(process_num)d\ndirectory=/spython/bi_dsvcs\nnumprocs=1\nautostart=true\nautorestart=true\nuser=developer\nredirect_stderr=true\nstdout_logfile=/tmp/bi_dsvcs.interface.info_stdout.log\nstderr_logfile=/tmpbi_dsvcs.interface.error_stderr.loga\n```\n##2 注意事项\n#### group_concat\nGROUP_CONCAT()会截断数据，限制长度为1024字节\n#### dict\ndict不可以直接添加二维数据,需要判断第一维是否已经存在\n```\ndef addtwodimdict(thedict, key_a, key_b, val): \n    if key_a in adic:\n        thedict[key_a].update({key_b: val})\n    else:\n        thedict.update({key_a:{key_b: val}})\n```\n#### list的append()和extend()区别\n(1)append()\n接受任意数据类型添加到list尾部\n(2)extend()\n只接受list，将这个list每个元素添加到list中\n#### 部署后404但是代码确实已部署上去\nsupervisor可能没有重启，重启supervisor或者直接bi_dsvcs/ ./dsvcs restart \n","slug":"2019-02-26","published":1,"updated":"2021-07-23T01:58:27.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kci0001l0xo7pib9gmh","content":"<h2 id=\"1-知识点\"><a href=\"#1-知识点\" class=\"headerlink\" title=\"1 知识点\"></a>1 知识点</h2><h4 id=\"添加日志\"><a href=\"#添加日志\" class=\"headerlink\" title=\"添加日志\"></a>添加日志</h4><p>引入logging包，引入log文件即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logging.basicConfig(filename&#x3D;&quot;&#x2F;tmp&#x2F;bi_dsvcs&#x2F;app.log&quot;, level &#x3D; logging.DEBUG)</span><br></pre></td></tr></table></figure>\n<p>有四种级别INFO, DEBUG, WARNING, ERROR, CRITICAL, FATAL</p>\n<h4 id=\"获取月份列表\"><a href=\"#获取月份列表\" class=\"headerlink\" title=\"获取月份列表\"></a>获取月份列表</h4><p><strong>需求</strong><br>需要获取月份数据[‘00’, ‘01’, ‘02’, ‘03’, ‘04’, ‘05’, ‘06’, ‘07’, ‘08’, ‘09’, ‘10’, ‘11’]<br><strong>原本解决办法</strong><br>直接定义了一个这样的数组<br><strong>新方法</strong><br>range()从0到13，再在一位数前补零<br><strong>实现代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theMonth &#x3D; range(0, 13)</span><br><span class=\"line\">monthKey &#x3D; map(lambda x:&#39;%02d&#39; % x, theMonth)</span><br></pre></td></tr></table></figure>\n<p><strong>新方法2</strong><br>[“%02d” % x for x in range(1,13)]</p>\n<h4 id=\"数据库导入导出\"><a href=\"#数据库导入导出\" class=\"headerlink\" title=\"数据库导入导出\"></a>数据库导入导出</h4><p>shell脚本里添加mysqldump导出数据<br>导入数据为避免更改表结构，直接mysql -u……连接到库，执行insert操作</p>\n<h4 id=\"gunicorn配置\"><a href=\"#gunicorn配置\" class=\"headerlink\" title=\"gunicorn配置\"></a>gunicorn配置</h4><p>使用supervisor配置gunicorn，我本地虚拟机配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:bi_dsvcs]</span><br><span class=\"line\">command&#x3D;python &#x2F;usr&#x2F;bin&#x2F;gunicorn -c &#x2F;spython&#x2F;bi_dsvcs&#x2F;gunicorn.cnf dsvcs:app</span><br><span class=\"line\">process_name&#x3D;%(program_name)s&#x2F;%(process_num)d</span><br><span class=\"line\">directory&#x3D;&#x2F;spython&#x2F;bi_dsvcs</span><br><span class=\"line\">numprocs&#x3D;1</span><br><span class=\"line\">autostart&#x3D;true</span><br><span class=\"line\">autorestart&#x3D;true</span><br><span class=\"line\">user&#x3D;developer</span><br><span class=\"line\">redirect_stderr&#x3D;true</span><br><span class=\"line\">stdout_logfile&#x3D;&#x2F;tmp&#x2F;bi_dsvcs.interface.info_stdout.log</span><br><span class=\"line\">stderr_logfile&#x3D;&#x2F;tmpbi_dsvcs.interface.error_stderr.loga</span><br></pre></td></tr></table></figure>\n<p>##2 注意事项</p>\n<h4 id=\"group-concat\"><a href=\"#group-concat\" class=\"headerlink\" title=\"group_concat\"></a>group_concat</h4><p>GROUP_CONCAT()会截断数据，限制长度为1024字节</p>\n<h4 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h4><p>dict不可以直接添加二维数据,需要判断第一维是否已经存在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def addtwodimdict(thedict, key_a, key_b, val): </span><br><span class=\"line\">    if key_a in adic:</span><br><span class=\"line\">        thedict[key_a].update(&#123;key_b: val&#125;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        thedict.update(&#123;key_a:&#123;key_b: val&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"list的append-和extend-区别\"><a href=\"#list的append-和extend-区别\" class=\"headerlink\" title=\"list的append()和extend()区别\"></a>list的append()和extend()区别</h4><p>(1)append()<br>接受任意数据类型添加到list尾部<br>(2)extend()<br>只接受list，将这个list每个元素添加到list中</p>\n<h4 id=\"部署后404但是代码确实已部署上去\"><a href=\"#部署后404但是代码确实已部署上去\" class=\"headerlink\" title=\"部署后404但是代码确实已部署上去\"></a>部署后404但是代码确实已部署上去</h4><p>supervisor可能没有重启，重启supervisor或者直接bi_dsvcs/ ./dsvcs restart </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-知识点\"><a href=\"#1-知识点\" class=\"headerlink\" title=\"1 知识点\"></a>1 知识点</h2><h4 id=\"添加日志\"><a href=\"#添加日志\" class=\"headerlink\" title=\"添加日志\"></a>添加日志</h4><p>引入logging包，引入log文件即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logging.basicConfig(filename&#x3D;&quot;&#x2F;tmp&#x2F;bi_dsvcs&#x2F;app.log&quot;, level &#x3D; logging.DEBUG)</span><br></pre></td></tr></table></figure>\n<p>有四种级别INFO, DEBUG, WARNING, ERROR, CRITICAL, FATAL</p>\n<h4 id=\"获取月份列表\"><a href=\"#获取月份列表\" class=\"headerlink\" title=\"获取月份列表\"></a>获取月份列表</h4><p><strong>需求</strong><br>需要获取月份数据[‘00’, ‘01’, ‘02’, ‘03’, ‘04’, ‘05’, ‘06’, ‘07’, ‘08’, ‘09’, ‘10’, ‘11’]<br><strong>原本解决办法</strong><br>直接定义了一个这样的数组<br><strong>新方法</strong><br>range()从0到13，再在一位数前补零<br><strong>实现代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theMonth &#x3D; range(0, 13)</span><br><span class=\"line\">monthKey &#x3D; map(lambda x:&#39;%02d&#39; % x, theMonth)</span><br></pre></td></tr></table></figure>\n<p><strong>新方法2</strong><br>[“%02d” % x for x in range(1,13)]</p>\n<h4 id=\"数据库导入导出\"><a href=\"#数据库导入导出\" class=\"headerlink\" title=\"数据库导入导出\"></a>数据库导入导出</h4><p>shell脚本里添加mysqldump导出数据<br>导入数据为避免更改表结构，直接mysql -u……连接到库，执行insert操作</p>\n<h4 id=\"gunicorn配置\"><a href=\"#gunicorn配置\" class=\"headerlink\" title=\"gunicorn配置\"></a>gunicorn配置</h4><p>使用supervisor配置gunicorn，我本地虚拟机配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:bi_dsvcs]</span><br><span class=\"line\">command&#x3D;python &#x2F;usr&#x2F;bin&#x2F;gunicorn -c &#x2F;spython&#x2F;bi_dsvcs&#x2F;gunicorn.cnf dsvcs:app</span><br><span class=\"line\">process_name&#x3D;%(program_name)s&#x2F;%(process_num)d</span><br><span class=\"line\">directory&#x3D;&#x2F;spython&#x2F;bi_dsvcs</span><br><span class=\"line\">numprocs&#x3D;1</span><br><span class=\"line\">autostart&#x3D;true</span><br><span class=\"line\">autorestart&#x3D;true</span><br><span class=\"line\">user&#x3D;developer</span><br><span class=\"line\">redirect_stderr&#x3D;true</span><br><span class=\"line\">stdout_logfile&#x3D;&#x2F;tmp&#x2F;bi_dsvcs.interface.info_stdout.log</span><br><span class=\"line\">stderr_logfile&#x3D;&#x2F;tmpbi_dsvcs.interface.error_stderr.loga</span><br></pre></td></tr></table></figure>\n<p>##2 注意事项</p>\n<h4 id=\"group-concat\"><a href=\"#group-concat\" class=\"headerlink\" title=\"group_concat\"></a>group_concat</h4><p>GROUP_CONCAT()会截断数据，限制长度为1024字节</p>\n<h4 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h4><p>dict不可以直接添加二维数据,需要判断第一维是否已经存在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def addtwodimdict(thedict, key_a, key_b, val): </span><br><span class=\"line\">    if key_a in adic:</span><br><span class=\"line\">        thedict[key_a].update(&#123;key_b: val&#125;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        thedict.update(&#123;key_a:&#123;key_b: val&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"list的append-和extend-区别\"><a href=\"#list的append-和extend-区别\" class=\"headerlink\" title=\"list的append()和extend()区别\"></a>list的append()和extend()区别</h4><p>(1)append()<br>接受任意数据类型添加到list尾部<br>(2)extend()<br>只接受list，将这个list每个元素添加到list中</p>\n<h4 id=\"部署后404但是代码确实已部署上去\"><a href=\"#部署后404但是代码确实已部署上去\" class=\"headerlink\" title=\"部署后404但是代码确实已部署上去\"></a>部署后404但是代码确实已部署上去</h4><p>supervisor可能没有重启，重启supervisor或者直接bi_dsvcs/ ./dsvcs restart </p>\n"},{"title":"Leetcode刷题","date":"2019-07-26T08:10:10.000Z","_content":"#### 1 两数之和\n**描述**\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n**示例**\n```\n给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n`","source":"_posts/2019-03-07.md","raw":"---\ntitle: Leetcode刷题\ndate: 2019-07-26 16:10:10\ntags: \n- 学习\ncategories: \n- 刷题\n- Leetcode刷题\n---\n#### 1 两数之和\n**描述**\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n**示例**\n```\n给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n`","slug":"2019-03-07","published":1,"updated":"2021-07-23T01:58:27.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcj0003l0xo1omr28bu","content":"<h4 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1 两数之和\"></a>1 两数之和</h4><p><strong>描述</strong><br>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br><strong>示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class=\"line\">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class=\"line\">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>\n<p>`</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1 两数之和\"></a>1 两数之和</h4><p><strong>描述</strong><br>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br><strong>示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class=\"line\">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class=\"line\">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>\n<p>`</p>\n"},{"title":"分析bi数据获取流程","date":"2019-03-02T05:25:21.000Z","_content":"### 一：导入数据\n#### 1. bi_etl:通过定时任务脚本将数据从源数据库导出：\n（1） 修改配置文件，执行dump_order.sh，导入部分测试数据\n（2）其中mysqldump导出数据到文件中\n（3）shell无法直接执行source，可以用bash来操作，命令：sudo bash dump_order.sh\n（4）sh文件可能是在windows下面编辑的，在vim中使用set fileformat=unix 去除\\M字符\n（5）运行sh文件可在data目录下生成sql文件\n（6）注意事项：\n\t为什么不使用增量：因为有个中间表没有update_at，financial的表不能随意加字段\n\n**1-1修改:**\n（1）第一步导数据，源数据（来自于order_system）已经执行了删除五张表的三个字段，因此导出的数据结构和以前导出的数据结构是不一样的；\n#### 2. 通过jump server将bi_etl的数据文件导出到bi_new的upload中(本地无法部署)**\n（1）由于本地无法直接部署jump server,直接拷贝刚才生成的文件到bi_new的upload中；\n（2）load_new.sh文件读取的是data.tar.gz压缩文件，因此直接压缩整个data文件夹到upload文件夹下\n\n#### 3. bi_dsvcs读取数据并存入bi_new数据库\n（1）修改配置文件（不修改可能会覆盖线上数据）\n（2）执行脚本并去除\\M字符(会读取conf文件，set ff=unix可以去除/r字符)\n（2）在load_new.sh脚本中（使用了mysql的source命令）将刚才文件中的数据导入ori_new数据库中\n（4）注意事项：sh文件中使用了tar -xvf 解压data文件，但是实际上没有解压成功，文件不存在，可以直接复制所有文件\n\n**3-2修改：**\n（1）执行sql命令直接修改ori_new的结构，命令如下：\n\n```sql\nuse ori_new;\nalter table `order_product` add `departure_date` date DEFAULT NULL;\nalter table `order_product` add `end_date` date DEFAULT NULL;\nalter table `order_product` add `product_status` int(11) NOT NULL DEFAULT '10000';\nalter table `order_order_product_combine` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_customize` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_hotel` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_oneday` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_ticket` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_tour` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\n\n```\n#### 4. bi_dpsvc将数据从ori_new中导入到bi库中并合并部分数据\n（1）module/order.py:__get_order_product_line_table:定义了操作的五张表：\norder_order_product_oneday、order_order_product_tour，order_order_product_ticket，order_order_product_hotel，order_order_product_combine\norder_product_tff表从ori_new就没有导入；order_product_customize单独操作\n（2）class OrderProduct \n\n**4-2修改：**\n（1）bi数据库的order_product表不存在end_date,departure_date两个字段；order_product_customize存在这两个字段，修改方法如下：\n\n```sql\nuse bi;\nalter table `order_product` add `departure_date` date DEFAULT NULL;\nalter table `order_product` add `end_date` date DEFAULT NULL;\nalter table `order_order_product_customize` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\n\n```\n （2）修改代码\n\n        \n\n","source":"_posts/20190213.md","raw":"---\ntitle: 分析bi数据获取流程\ndate: 2019-03-02 13:25:21\ntags: \n- 工作\ncategories: \n- 服务端语言\n- python\n---\n### 一：导入数据\n#### 1. bi_etl:通过定时任务脚本将数据从源数据库导出：\n（1） 修改配置文件，执行dump_order.sh，导入部分测试数据\n（2）其中mysqldump导出数据到文件中\n（3）shell无法直接执行source，可以用bash来操作，命令：sudo bash dump_order.sh\n（4）sh文件可能是在windows下面编辑的，在vim中使用set fileformat=unix 去除\\M字符\n（5）运行sh文件可在data目录下生成sql文件\n（6）注意事项：\n\t为什么不使用增量：因为有个中间表没有update_at，financial的表不能随意加字段\n\n**1-1修改:**\n（1）第一步导数据，源数据（来自于order_system）已经执行了删除五张表的三个字段，因此导出的数据结构和以前导出的数据结构是不一样的；\n#### 2. 通过jump server将bi_etl的数据文件导出到bi_new的upload中(本地无法部署)**\n（1）由于本地无法直接部署jump server,直接拷贝刚才生成的文件到bi_new的upload中；\n（2）load_new.sh文件读取的是data.tar.gz压缩文件，因此直接压缩整个data文件夹到upload文件夹下\n\n#### 3. bi_dsvcs读取数据并存入bi_new数据库\n（1）修改配置文件（不修改可能会覆盖线上数据）\n（2）执行脚本并去除\\M字符(会读取conf文件，set ff=unix可以去除/r字符)\n（2）在load_new.sh脚本中（使用了mysql的source命令）将刚才文件中的数据导入ori_new数据库中\n（4）注意事项：sh文件中使用了tar -xvf 解压data文件，但是实际上没有解压成功，文件不存在，可以直接复制所有文件\n\n**3-2修改：**\n（1）执行sql命令直接修改ori_new的结构，命令如下：\n\n```sql\nuse ori_new;\nalter table `order_product` add `departure_date` date DEFAULT NULL;\nalter table `order_product` add `end_date` date DEFAULT NULL;\nalter table `order_product` add `product_status` int(11) NOT NULL DEFAULT '10000';\nalter table `order_order_product_combine` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_customize` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_hotel` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_oneday` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_ticket` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\nalter table `order_order_product_tour` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\n\n```\n#### 4. bi_dpsvc将数据从ori_new中导入到bi库中并合并部分数据\n（1）module/order.py:__get_order_product_line_table:定义了操作的五张表：\norder_order_product_oneday、order_order_product_tour，order_order_product_ticket，order_order_product_hotel，order_order_product_combine\norder_product_tff表从ori_new就没有导入；order_product_customize单独操作\n（2）class OrderProduct \n\n**4-2修改：**\n（1）bi数据库的order_product表不存在end_date,departure_date两个字段；order_product_customize存在这两个字段，修改方法如下：\n\n```sql\nuse bi;\nalter table `order_product` add `departure_date` date DEFAULT NULL;\nalter table `order_product` add `end_date` date DEFAULT NULL;\nalter table `order_order_product_customize` drop column `departure_date`, drop column `end_date`, drop column `product_status`;\n\n```\n （2）修改代码\n\n        \n\n","slug":"20190213","published":1,"updated":"2021-07-23T01:58:27.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcn0006l0xo3lru3qyr","content":"<h3 id=\"一：导入数据\"><a href=\"#一：导入数据\" class=\"headerlink\" title=\"一：导入数据\"></a>一：导入数据</h3><h4 id=\"1-bi-etl-通过定时任务脚本将数据从源数据库导出：\"><a href=\"#1-bi-etl-通过定时任务脚本将数据从源数据库导出：\" class=\"headerlink\" title=\"1. bi_etl:通过定时任务脚本将数据从源数据库导出：\"></a>1. bi_etl:通过定时任务脚本将数据从源数据库导出：</h4><p>（1） 修改配置文件，执行dump_order.sh，导入部分测试数据<br>（2）其中mysqldump导出数据到文件中<br>（3）shell无法直接执行source，可以用bash来操作，命令：sudo bash dump_order.sh<br>（4）sh文件可能是在windows下面编辑的，在vim中使用set fileformat=unix 去除\\M字符<br>（5）运行sh文件可在data目录下生成sql文件<br>（6）注意事项：<br>    为什么不使用增量：因为有个中间表没有update_at，financial的表不能随意加字段</p>\n<p><strong>1-1修改:</strong><br>（1）第一步导数据，源数据（来自于order_system）已经执行了删除五张表的三个字段，因此导出的数据结构和以前导出的数据结构是不一样的；</p>\n<h4 id=\"2-通过jump-server将bi-etl的数据文件导出到bi-new的upload中-本地无法部署\"><a href=\"#2-通过jump-server将bi-etl的数据文件导出到bi-new的upload中-本地无法部署\" class=\"headerlink\" title=\"2. 通过jump server将bi_etl的数据文件导出到bi_new的upload中(本地无法部署)**\"></a>2. 通过jump server将bi_etl的数据文件导出到bi_new的upload中(本地无法部署)**</h4><p>（1）由于本地无法直接部署jump server,直接拷贝刚才生成的文件到bi_new的upload中；<br>（2）load_new.sh文件读取的是data.tar.gz压缩文件，因此直接压缩整个data文件夹到upload文件夹下</p>\n<h4 id=\"3-bi-dsvcs读取数据并存入bi-new数据库\"><a href=\"#3-bi-dsvcs读取数据并存入bi-new数据库\" class=\"headerlink\" title=\"3. bi_dsvcs读取数据并存入bi_new数据库\"></a>3. bi_dsvcs读取数据并存入bi_new数据库</h4><p>（1）修改配置文件（不修改可能会覆盖线上数据）<br>（2）执行脚本并去除\\M字符(会读取conf文件，set ff=unix可以去除/r字符)<br>（2）在load_new.sh脚本中（使用了mysql的source命令）将刚才文件中的数据导入ori_new数据库中<br>（4）注意事项：sh文件中使用了tar -xvf 解压data文件，但是实际上没有解压成功，文件不存在，可以直接复制所有文件</p>\n<p><strong>3-2修改：</strong><br>（1）执行sql命令直接修改ori_new的结构，命令如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> ori_new;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`departure_date`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`end_date`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`product_status`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'10000'</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_combine`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_customize`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_hotel`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_oneday`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_ticket`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_tour`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-bi-dpsvc将数据从ori-new中导入到bi库中并合并部分数据\"><a href=\"#4-bi-dpsvc将数据从ori-new中导入到bi库中并合并部分数据\" class=\"headerlink\" title=\"4. bi_dpsvc将数据从ori_new中导入到bi库中并合并部分数据\"></a>4. bi_dpsvc将数据从ori_new中导入到bi库中并合并部分数据</h4><p>（1）module/order.py:__get_order_product_line_table:定义了操作的五张表：<br>order_order_product_oneday、order_order_product_tour，order_order_product_ticket，order_order_product_hotel，order_order_product_combine<br>order_product_tff表从ori_new就没有导入；order_product_customize单独操作<br>（2）class OrderProduct </p>\n<p><strong>4-2修改：</strong><br>（1）bi数据库的order_product表不存在end_date,departure_date两个字段；order_product_customize存在这两个字段，修改方法如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> bi;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`departure_date`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`end_date`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_customize`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br></pre></td></tr></table></figure>\n<p> （2）修改代码</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一：导入数据\"><a href=\"#一：导入数据\" class=\"headerlink\" title=\"一：导入数据\"></a>一：导入数据</h3><h4 id=\"1-bi-etl-通过定时任务脚本将数据从源数据库导出：\"><a href=\"#1-bi-etl-通过定时任务脚本将数据从源数据库导出：\" class=\"headerlink\" title=\"1. bi_etl:通过定时任务脚本将数据从源数据库导出：\"></a>1. bi_etl:通过定时任务脚本将数据从源数据库导出：</h4><p>（1） 修改配置文件，执行dump_order.sh，导入部分测试数据<br>（2）其中mysqldump导出数据到文件中<br>（3）shell无法直接执行source，可以用bash来操作，命令：sudo bash dump_order.sh<br>（4）sh文件可能是在windows下面编辑的，在vim中使用set fileformat=unix 去除\\M字符<br>（5）运行sh文件可在data目录下生成sql文件<br>（6）注意事项：<br>    为什么不使用增量：因为有个中间表没有update_at，financial的表不能随意加字段</p>\n<p><strong>1-1修改:</strong><br>（1）第一步导数据，源数据（来自于order_system）已经执行了删除五张表的三个字段，因此导出的数据结构和以前导出的数据结构是不一样的；</p>\n<h4 id=\"2-通过jump-server将bi-etl的数据文件导出到bi-new的upload中-本地无法部署\"><a href=\"#2-通过jump-server将bi-etl的数据文件导出到bi-new的upload中-本地无法部署\" class=\"headerlink\" title=\"2. 通过jump server将bi_etl的数据文件导出到bi_new的upload中(本地无法部署)**\"></a>2. 通过jump server将bi_etl的数据文件导出到bi_new的upload中(本地无法部署)**</h4><p>（1）由于本地无法直接部署jump server,直接拷贝刚才生成的文件到bi_new的upload中；<br>（2）load_new.sh文件读取的是data.tar.gz压缩文件，因此直接压缩整个data文件夹到upload文件夹下</p>\n<h4 id=\"3-bi-dsvcs读取数据并存入bi-new数据库\"><a href=\"#3-bi-dsvcs读取数据并存入bi-new数据库\" class=\"headerlink\" title=\"3. bi_dsvcs读取数据并存入bi_new数据库\"></a>3. bi_dsvcs读取数据并存入bi_new数据库</h4><p>（1）修改配置文件（不修改可能会覆盖线上数据）<br>（2）执行脚本并去除\\M字符(会读取conf文件，set ff=unix可以去除/r字符)<br>（2）在load_new.sh脚本中（使用了mysql的source命令）将刚才文件中的数据导入ori_new数据库中<br>（4）注意事项：sh文件中使用了tar -xvf 解压data文件，但是实际上没有解压成功，文件不存在，可以直接复制所有文件</p>\n<p><strong>3-2修改：</strong><br>（1）执行sql命令直接修改ori_new的结构，命令如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> ori_new;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`departure_date`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`end_date`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`product_status`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'10000'</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_combine`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_customize`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_hotel`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_oneday`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_ticket`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_tour`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-bi-dpsvc将数据从ori-new中导入到bi库中并合并部分数据\"><a href=\"#4-bi-dpsvc将数据从ori-new中导入到bi库中并合并部分数据\" class=\"headerlink\" title=\"4. bi_dpsvc将数据从ori_new中导入到bi库中并合并部分数据\"></a>4. bi_dpsvc将数据从ori_new中导入到bi库中并合并部分数据</h4><p>（1）module/order.py:__get_order_product_line_table:定义了操作的五张表：<br>order_order_product_oneday、order_order_product_tour，order_order_product_ticket，order_order_product_hotel，order_order_product_combine<br>order_product_tff表从ori_new就没有导入；order_product_customize单独操作<br>（2）class OrderProduct </p>\n<p><strong>4-2修改：</strong><br>（1）bi数据库的order_product表不存在end_date,departure_date两个字段；order_product_customize存在这两个字段，修改方法如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> bi;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`departure_date`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_product`</span> <span class=\"keyword\">add</span> <span class=\"string\">`end_date`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`order_order_product_customize`</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`departure_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`end_date`</span>, <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> <span class=\"string\">`product_status`</span>;</span><br></pre></td></tr></table></figure>\n<p> （2）修改代码</p>\n"},{"title":"python100例学习笔记","date":"2019-02-02T05:25:21.000Z","_content":"## 四个数组成不重复三位数\n**描述**\n有四个数字，1,2,3,4，能组成多少个不重复的三位数\n**思考**\n原文分析：将所有的数字排列组合后去掉不满足条件的列\n**代码**\n```\nnum = 1;\nfor i in range(1,5):\n    for j in range(1,5):\n        for k in range(1,5):\n            if(i != k) and (i != j) and (j != k): \n                print i,j,k\n                num = num + 1 \nprint num\n```\n**扩展**\n循环三次效率很低，每次循环都是1-5，有没有更好的解决办法\n## 2 \n","source":"_posts/20190202.md","raw":"---\ntitle: python100例学习笔记\ndate: 2019-02-02 13:25:21\ntags: \n- 学习\ncategories: \n- 服务端语言\n- python\n---\n## 四个数组成不重复三位数\n**描述**\n有四个数字，1,2,3,4，能组成多少个不重复的三位数\n**思考**\n原文分析：将所有的数字排列组合后去掉不满足条件的列\n**代码**\n```\nnum = 1;\nfor i in range(1,5):\n    for j in range(1,5):\n        for k in range(1,5):\n            if(i != k) and (i != j) and (j != k): \n                print i,j,k\n                num = num + 1 \nprint num\n```\n**扩展**\n循环三次效率很低，每次循环都是1-5，有没有更好的解决办法\n## 2 \n","slug":"20190202","published":1,"updated":"2021-07-23T01:58:27.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcp0007l0xohxic3zf7","content":"<h2 id=\"四个数组成不重复三位数\"><a href=\"#四个数组成不重复三位数\" class=\"headerlink\" title=\"四个数组成不重复三位数\"></a>四个数组成不重复三位数</h2><p><strong>描述</strong><br>有四个数字，1,2,3,4，能组成多少个不重复的三位数<br><strong>思考</strong><br>原文分析：将所有的数字排列组合后去掉不满足条件的列<br><strong>代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num &#x3D; 1;</span><br><span class=\"line\">for i in range(1,5):</span><br><span class=\"line\">    for j in range(1,5):</span><br><span class=\"line\">        for k in range(1,5):</span><br><span class=\"line\">            if(i !&#x3D; k) and (i !&#x3D; j) and (j !&#x3D; k): </span><br><span class=\"line\">                print i,j,k</span><br><span class=\"line\">                num &#x3D; num + 1 </span><br><span class=\"line\">print num</span><br></pre></td></tr></table></figure>\n<p><strong>扩展</strong><br>循环三次效率很低，每次循环都是1-5，有没有更好的解决办法</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"四个数组成不重复三位数\"><a href=\"#四个数组成不重复三位数\" class=\"headerlink\" title=\"四个数组成不重复三位数\"></a>四个数组成不重复三位数</h2><p><strong>描述</strong><br>有四个数字，1,2,3,4，能组成多少个不重复的三位数<br><strong>思考</strong><br>原文分析：将所有的数字排列组合后去掉不满足条件的列<br><strong>代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num &#x3D; 1;</span><br><span class=\"line\">for i in range(1,5):</span><br><span class=\"line\">    for j in range(1,5):</span><br><span class=\"line\">        for k in range(1,5):</span><br><span class=\"line\">            if(i !&#x3D; k) and (i !&#x3D; j) and (j !&#x3D; k): </span><br><span class=\"line\">                print i,j,k</span><br><span class=\"line\">                num &#x3D; num + 1 </span><br><span class=\"line\">print num</span><br></pre></td></tr></table></figure>\n<p><strong>扩展</strong><br>循环三次效率很低，每次循环都是1-5，有没有更好的解决办法</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2>"},{"title":"Monthly报表完成步骤","date":"2019-03-02T05:25:21.000Z","_content":"## 1 计算规则（都在订单产品维度）\n#### 1 已收\n（1）计算此订单产品所在的订单的所有已收款\n（2）计算此订单产品所在的订单有多少订单产品\n（3）所有已收款除以订单产品数量，平均得出每个订单产品的已收款\n## 2 基础接口实现\n#### 1 注意事项\n每次更新代码supervisor都需要重启\n#### 2 添加路由和方法\n创建finance_monthly controller,并在dsvcs.py中引入\n#### 3 导入bill表\n需要导入bill和bill_item表进ori_new以及bi表中\n","source":"_posts/20190214.md","raw":"---\ntitle: Monthly报表完成步骤\ndate: 2019-03-02 13:25:21\ntags: \n- 工作\ncategories: \n- 服务端语言\n- python\n---\n## 1 计算规则（都在订单产品维度）\n#### 1 已收\n（1）计算此订单产品所在的订单的所有已收款\n（2）计算此订单产品所在的订单有多少订单产品\n（3）所有已收款除以订单产品数量，平均得出每个订单产品的已收款\n## 2 基础接口实现\n#### 1 注意事项\n每次更新代码supervisor都需要重启\n#### 2 添加路由和方法\n创建finance_monthly controller,并在dsvcs.py中引入\n#### 3 导入bill表\n需要导入bill和bill_item表进ori_new以及bi表中\n","slug":"20190214","published":1,"updated":"2021-07-23T01:58:27.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcq0008l0xo56zscqdx","content":"<h2 id=\"1-计算规则（都在订单产品维度）\"><a href=\"#1-计算规则（都在订单产品维度）\" class=\"headerlink\" title=\"1 计算规则（都在订单产品维度）\"></a>1 计算规则（都在订单产品维度）</h2><h4 id=\"1-已收\"><a href=\"#1-已收\" class=\"headerlink\" title=\"1 已收\"></a>1 已收</h4><p>（1）计算此订单产品所在的订单的所有已收款<br>（2）计算此订单产品所在的订单有多少订单产品<br>（3）所有已收款除以订单产品数量，平均得出每个订单产品的已收款</p>\n<h2 id=\"2-基础接口实现\"><a href=\"#2-基础接口实现\" class=\"headerlink\" title=\"2 基础接口实现\"></a>2 基础接口实现</h2><h4 id=\"1-注意事项\"><a href=\"#1-注意事项\" class=\"headerlink\" title=\"1 注意事项\"></a>1 注意事项</h4><p>每次更新代码supervisor都需要重启</p>\n<h4 id=\"2-添加路由和方法\"><a href=\"#2-添加路由和方法\" class=\"headerlink\" title=\"2 添加路由和方法\"></a>2 添加路由和方法</h4><p>创建finance_monthly controller,并在dsvcs.py中引入</p>\n<h4 id=\"3-导入bill表\"><a href=\"#3-导入bill表\" class=\"headerlink\" title=\"3 导入bill表\"></a>3 导入bill表</h4><p>需要导入bill和bill_item表进ori_new以及bi表中</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-计算规则（都在订单产品维度）\"><a href=\"#1-计算规则（都在订单产品维度）\" class=\"headerlink\" title=\"1 计算规则（都在订单产品维度）\"></a>1 计算规则（都在订单产品维度）</h2><h4 id=\"1-已收\"><a href=\"#1-已收\" class=\"headerlink\" title=\"1 已收\"></a>1 已收</h4><p>（1）计算此订单产品所在的订单的所有已收款<br>（2）计算此订单产品所在的订单有多少订单产品<br>（3）所有已收款除以订单产品数量，平均得出每个订单产品的已收款</p>\n<h2 id=\"2-基础接口实现\"><a href=\"#2-基础接口实现\" class=\"headerlink\" title=\"2 基础接口实现\"></a>2 基础接口实现</h2><h4 id=\"1-注意事项\"><a href=\"#1-注意事项\" class=\"headerlink\" title=\"1 注意事项\"></a>1 注意事项</h4><p>每次更新代码supervisor都需要重启</p>\n<h4 id=\"2-添加路由和方法\"><a href=\"#2-添加路由和方法\" class=\"headerlink\" title=\"2 添加路由和方法\"></a>2 添加路由和方法</h4><p>创建finance_monthly controller,并在dsvcs.py中引入</p>\n<h4 id=\"3-导入bill表\"><a href=\"#3-导入bill表\" class=\"headerlink\" title=\"3 导入bill表\"></a>3 导入bill表</h4><p>需要导入bill和bill_item表进ori_new以及bi表中</p>\n"},{"title":"Hbase基础命令","date":"2019-02-28T03:03:10.000Z","_content":"## Hbase基础命令\n#### 启动和停止Hbase\n**启动**\nhbase/bin  ./start-hbase.sh\n**关闭**\nhbase/bin   ./stop-hbase.sh\n#### 使用Hbase\n**连接Hbase**\nbin/hbase shell\n**创建表**\ncreate 'test' （创建表需要添加列簇）\ncreate '表名' '列簇名1' '列簇名2' ……\n**添加数据**\nput '表名' '行名' '列簇名称' 'value'（当列簇只有一列）\nput '表名' '行名' '列簇名称：列名称' 'value'\n**查看表**\nlist: 查看所有表\nlist 'tablename' ： 查看表名为tablename的表\n**删除表**\ndisable '表名'(对应enable '明白')\ndrop '表名'\n## 配置\n####基础配置\nconf/hbase-site.xml\n## 注意事项\n（1）表名，行，列都必须用引号括起来\n{% plantuml %}\n{% endplantuml %}\n\n","source":"_posts/20190227.md","raw":"---\ntitle: Hbase基础命令\ndate: 2019-02-28 11:03:10\ntags: \n- 基础命令\ncategories: \n- 数据库\n- Hbase\n---\n## Hbase基础命令\n#### 启动和停止Hbase\n**启动**\nhbase/bin  ./start-hbase.sh\n**关闭**\nhbase/bin   ./stop-hbase.sh\n#### 使用Hbase\n**连接Hbase**\nbin/hbase shell\n**创建表**\ncreate 'test' （创建表需要添加列簇）\ncreate '表名' '列簇名1' '列簇名2' ……\n**添加数据**\nput '表名' '行名' '列簇名称' 'value'（当列簇只有一列）\nput '表名' '行名' '列簇名称：列名称' 'value'\n**查看表**\nlist: 查看所有表\nlist 'tablename' ： 查看表名为tablename的表\n**删除表**\ndisable '表名'(对应enable '明白')\ndrop '表名'\n## 配置\n####基础配置\nconf/hbase-site.xml\n## 注意事项\n（1）表名，行，列都必须用引号括起来\n{% plantuml %}\n{% endplantuml %}\n\n","slug":"20190227","published":1,"updated":"2021-07-23T01:58:27.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcs000cl0xobbhgamd0","content":"<h2 id=\"Hbase基础命令\"><a href=\"#Hbase基础命令\" class=\"headerlink\" title=\"Hbase基础命令\"></a>Hbase基础命令</h2><h4 id=\"启动和停止Hbase\"><a href=\"#启动和停止Hbase\" class=\"headerlink\" title=\"启动和停止Hbase\"></a>启动和停止Hbase</h4><p><strong>启动</strong><br>hbase/bin  ./start-hbase.sh<br><strong>关闭</strong><br>hbase/bin   ./stop-hbase.sh</p>\n<h4 id=\"使用Hbase\"><a href=\"#使用Hbase\" class=\"headerlink\" title=\"使用Hbase\"></a>使用Hbase</h4><p><strong>连接Hbase</strong><br>bin/hbase shell<br><strong>创建表</strong><br>create ‘test’ （创建表需要添加列簇）<br>create ‘表名’ ‘列簇名1’ ‘列簇名2’ ……<br><strong>添加数据</strong><br>put ‘表名’ ‘行名’ ‘列簇名称’ ‘value’（当列簇只有一列）<br>put ‘表名’ ‘行名’ ‘列簇名称：列名称’ ‘value’<br><strong>查看表</strong><br>list: 查看所有表<br>list ‘tablename’ ： 查看表名为tablename的表<br><strong>删除表</strong><br>disable ‘表名’(对应enable ‘明白’)<br>drop ‘表名’</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>####基础配置<br>conf/hbase-site.xml</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>（1）表名，行，列都必须用引号括起来</p>\n<img  src=http://www.plantuml.com/plantuml/svg/>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hbase基础命令\"><a href=\"#Hbase基础命令\" class=\"headerlink\" title=\"Hbase基础命令\"></a>Hbase基础命令</h2><h4 id=\"启动和停止Hbase\"><a href=\"#启动和停止Hbase\" class=\"headerlink\" title=\"启动和停止Hbase\"></a>启动和停止Hbase</h4><p><strong>启动</strong><br>hbase/bin  ./start-hbase.sh<br><strong>关闭</strong><br>hbase/bin   ./stop-hbase.sh</p>\n<h4 id=\"使用Hbase\"><a href=\"#使用Hbase\" class=\"headerlink\" title=\"使用Hbase\"></a>使用Hbase</h4><p><strong>连接Hbase</strong><br>bin/hbase shell<br><strong>创建表</strong><br>create ‘test’ （创建表需要添加列簇）<br>create ‘表名’ ‘列簇名1’ ‘列簇名2’ ……<br><strong>添加数据</strong><br>put ‘表名’ ‘行名’ ‘列簇名称’ ‘value’（当列簇只有一列）<br>put ‘表名’ ‘行名’ ‘列簇名称：列名称’ ‘value’<br><strong>查看表</strong><br>list: 查看所有表<br>list ‘tablename’ ： 查看表名为tablename的表<br><strong>删除表</strong><br>disable ‘表名’(对应enable ‘明白’)<br>drop ‘表名’</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>####基础配置<br>conf/hbase-site.xml</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>（1）表名，行，列都必须用引号括起来</p>\n<img  src=http://www.plantuml.com/plantuml/svg/>\n\n"},{"title":"一些快捷键","date":"2019-03-05T05:25:21.000Z","_content":"## navicat for mysql 快捷键\n1.ctrl+q           打开查询窗口\n2.ctrl+/            注释sql语句\n3.ctrl+shift +/  解除注释\n4.ctrl+r           运行查询窗口的sql语句\n5.ctrl+shift+r   只运行选中的sql语句\n6.F6               打开一个mysql命令行窗口\n7.ctrl+l            删除一行\n8.ctrl+n           打开一个新的查询窗口\n9.ctrl+w          关闭一个查询窗口\n## phpstrom快捷键\n**编辑**\n\n| 快捷键 | 作用 | \n| --- | --- |\n| Ctrl + Space | 代码自动完成（一般与输入法冲突） |\n| Ctrl + Shift + Enter | 智能完善代码（如:if()） |\n| Ctrl + P | 方法参数提示，显示默认参数 |\n| Ctrl + Q | 显示注释代码 |\n| Ctrl + mouse over code | 查看到简短的函数介绍 |\n| Ctrl + F1 | 显示错误或警告信息的描述（需要把光标放到错误或警告位置） |\n| Alt + Insert | 生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等） |\n| Ctrl + O | 插入覆盖父类的方法 |\n| Ctrl + I | 实现抽象方法 |\n| Ctrl + Alt + T | 选中的代码放在if..else..、for、foreach里,或者函数里，或者为选中的代码块添加区域解释（可以折叠该段代码，折叠后只显示解释，便于代码管理） |\n| Ctrl + / | 以添加“//”的方式添加注释 |\n| Ctrl + Shift + / | 添加“/**/”的方式添加注释 |\n| Ctrl + W | 增量式的选中当前块 |\n| Ctrl + Shift + W | 与Ctrl + W对应，减小选中范围 |\n| Alt + Q | 显示包含光标所在位置的标签头 |\n| Alt + Enter | 显示意图行动。 Show Intention Action |\n| Ctrl + Alt + L | 格式化代码 |\n| Ctrl + Alt + I | 自动缩进。 |\n| Tab / Shift + Tab | 手动缩进/反向缩进 |\n| Ctrl + X or Shift + Delete | 剪切 |\n| Ctrl + C or Ctrl + Insert | 复制 |\n| Ctrl + V or Shift + Insert | 粘贴 |\n| Ctrl + Shift + V | 从粘贴板中选择内容进行粘贴 |\n| Ctrl + D | 将当前行或者选择的内容复制到下一行或光标处 |\n| Ctrl + Y | 删除光标所在的行 |\n| Ctrl + Shift + J | 合成选中代码到一行。格式化代码的反向动作 |\n| Ctrl + Enter | 智能线分割 |\n| Shift + Enter | 另起一新行。无论光标在行的那个位置 |\n| Ctrl + Shift + U | 字符大小写切换 |\n| Ctrl + Shift + ] / [ | 以区块为单位，从光标处 向后/向前 选择，再次点击增加选择范围 |\n| Ctrl + Delete | 删除光标之后的部分单词 |\n| Ctrl + Backspace | 删除光标之前的部分单词 |\n| Ctrl + +/- | 折叠/打开代码块，再次点击扩大折叠/打开范围 |\n| Ctrl + Shift +  + | 打开全部 |\n| Ctrl + Shift +  - | 折叠全部 |\n| Ctrl + F4 | 关闭当前页面 |\n**搜索/替换**\n\n| 快捷键 | 作用 | \n| --- | --- |\n| Ctrl + F | 查找 |\n| F3| 查找下一个，结合查找使用 |\n| Shift + F3 | 查找前一个，结合查找使用  |\n| Ctrl + R | 替换 |\n| Ctrl + Shift + F | 在文件中查找 |\n| Ctrl + Shift + R | 在文件中替换 |\n**被使用搜索**\n\n| 快捷键 | 作用 | \n| --- | --- |\n| Alt + F7 / Ctrl + F7 | 全项目被使用查找/当前文件声明变量处 |\n| Ctrl + Shift + F7 | 在文件中变量或函数被使用处高亮 |\n| Ctrl + Alt + F7 | 显示详细被使用的位置列表 |\n","source":"_posts/20190220.md","raw":"---\ntitle: 一些快捷键\ndate: 2019-03-05 13:25:21\ntags: \n- 文档\ncategories: \n- 快捷键\n---\n## navicat for mysql 快捷键\n1.ctrl+q           打开查询窗口\n2.ctrl+/            注释sql语句\n3.ctrl+shift +/  解除注释\n4.ctrl+r           运行查询窗口的sql语句\n5.ctrl+shift+r   只运行选中的sql语句\n6.F6               打开一个mysql命令行窗口\n7.ctrl+l            删除一行\n8.ctrl+n           打开一个新的查询窗口\n9.ctrl+w          关闭一个查询窗口\n## phpstrom快捷键\n**编辑**\n\n| 快捷键 | 作用 | \n| --- | --- |\n| Ctrl + Space | 代码自动完成（一般与输入法冲突） |\n| Ctrl + Shift + Enter | 智能完善代码（如:if()） |\n| Ctrl + P | 方法参数提示，显示默认参数 |\n| Ctrl + Q | 显示注释代码 |\n| Ctrl + mouse over code | 查看到简短的函数介绍 |\n| Ctrl + F1 | 显示错误或警告信息的描述（需要把光标放到错误或警告位置） |\n| Alt + Insert | 生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等） |\n| Ctrl + O | 插入覆盖父类的方法 |\n| Ctrl + I | 实现抽象方法 |\n| Ctrl + Alt + T | 选中的代码放在if..else..、for、foreach里,或者函数里，或者为选中的代码块添加区域解释（可以折叠该段代码，折叠后只显示解释，便于代码管理） |\n| Ctrl + / | 以添加“//”的方式添加注释 |\n| Ctrl + Shift + / | 添加“/**/”的方式添加注释 |\n| Ctrl + W | 增量式的选中当前块 |\n| Ctrl + Shift + W | 与Ctrl + W对应，减小选中范围 |\n| Alt + Q | 显示包含光标所在位置的标签头 |\n| Alt + Enter | 显示意图行动。 Show Intention Action |\n| Ctrl + Alt + L | 格式化代码 |\n| Ctrl + Alt + I | 自动缩进。 |\n| Tab / Shift + Tab | 手动缩进/反向缩进 |\n| Ctrl + X or Shift + Delete | 剪切 |\n| Ctrl + C or Ctrl + Insert | 复制 |\n| Ctrl + V or Shift + Insert | 粘贴 |\n| Ctrl + Shift + V | 从粘贴板中选择内容进行粘贴 |\n| Ctrl + D | 将当前行或者选择的内容复制到下一行或光标处 |\n| Ctrl + Y | 删除光标所在的行 |\n| Ctrl + Shift + J | 合成选中代码到一行。格式化代码的反向动作 |\n| Ctrl + Enter | 智能线分割 |\n| Shift + Enter | 另起一新行。无论光标在行的那个位置 |\n| Ctrl + Shift + U | 字符大小写切换 |\n| Ctrl + Shift + ] / [ | 以区块为单位，从光标处 向后/向前 选择，再次点击增加选择范围 |\n| Ctrl + Delete | 删除光标之后的部分单词 |\n| Ctrl + Backspace | 删除光标之前的部分单词 |\n| Ctrl + +/- | 折叠/打开代码块，再次点击扩大折叠/打开范围 |\n| Ctrl + Shift +  + | 打开全部 |\n| Ctrl + Shift +  - | 折叠全部 |\n| Ctrl + F4 | 关闭当前页面 |\n**搜索/替换**\n\n| 快捷键 | 作用 | \n| --- | --- |\n| Ctrl + F | 查找 |\n| F3| 查找下一个，结合查找使用 |\n| Shift + F3 | 查找前一个，结合查找使用  |\n| Ctrl + R | 替换 |\n| Ctrl + Shift + F | 在文件中查找 |\n| Ctrl + Shift + R | 在文件中替换 |\n**被使用搜索**\n\n| 快捷键 | 作用 | \n| --- | --- |\n| Alt + F7 / Ctrl + F7 | 全项目被使用查找/当前文件声明变量处 |\n| Ctrl + Shift + F7 | 在文件中变量或函数被使用处高亮 |\n| Ctrl + Alt + F7 | 显示详细被使用的位置列表 |\n","slug":"20190220","published":1,"updated":"2021-07-23T01:58:27.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kct000el0xod2qs26cl","content":"<h2 id=\"navicat-for-mysql-快捷键\"><a href=\"#navicat-for-mysql-快捷键\" class=\"headerlink\" title=\"navicat for mysql 快捷键\"></a>navicat for mysql 快捷键</h2><p>1.ctrl+q           打开查询窗口<br>2.ctrl+/            注释sql语句<br>3.ctrl+shift +/  解除注释<br>4.ctrl+r           运行查询窗口的sql语句<br>5.ctrl+shift+r   只运行选中的sql语句<br>6.F6               打开一个mysql命令行窗口<br>7.ctrl+l            删除一行<br>8.ctrl+n           打开一个新的查询窗口<br>9.ctrl+w          关闭一个查询窗口</p>\n<h2 id=\"phpstrom快捷键\"><a href=\"#phpstrom快捷键\" class=\"headerlink\" title=\"phpstrom快捷键\"></a>phpstrom快捷键</h2><p><strong>编辑</strong></p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + Space</td>\n<td>代码自动完成（一般与输入法冲突）</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Enter</td>\n<td>智能完善代码（如:if()）</td>\n</tr>\n<tr>\n<td>Ctrl + P</td>\n<td>方法参数提示，显示默认参数</td>\n</tr>\n<tr>\n<td>Ctrl + Q</td>\n<td>显示注释代码</td>\n</tr>\n<tr>\n<td>Ctrl + mouse over code</td>\n<td>查看到简短的函数介绍</td>\n</tr>\n<tr>\n<td>Ctrl + F1</td>\n<td>显示错误或警告信息的描述（需要把光标放到错误或警告位置）</td>\n</tr>\n<tr>\n<td>Alt + Insert</td>\n<td>生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等）</td>\n</tr>\n<tr>\n<td>Ctrl + O</td>\n<td>插入覆盖父类的方法</td>\n</tr>\n<tr>\n<td>Ctrl + I</td>\n<td>实现抽象方法</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + T</td>\n<td>选中的代码放在if..else..、for、foreach里,或者函数里，或者为选中的代码块添加区域解释（可以折叠该段代码，折叠后只显示解释，便于代码管理）</td>\n</tr>\n<tr>\n<td>Ctrl + /</td>\n<td>以添加“//”的方式添加注释</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + /</td>\n<td>添加“/**/”的方式添加注释</td>\n</tr>\n<tr>\n<td>Ctrl + W</td>\n<td>增量式的选中当前块</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + W</td>\n<td>与Ctrl + W对应，减小选中范围</td>\n</tr>\n<tr>\n<td>Alt + Q</td>\n<td>显示包含光标所在位置的标签头</td>\n</tr>\n<tr>\n<td>Alt + Enter</td>\n<td>显示意图行动。 Show Intention Action</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + L</td>\n<td>格式化代码</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + I</td>\n<td>自动缩进。</td>\n</tr>\n<tr>\n<td>Tab / Shift + Tab</td>\n<td>手动缩进/反向缩进</td>\n</tr>\n<tr>\n<td>Ctrl + X or Shift + Delete</td>\n<td>剪切</td>\n</tr>\n<tr>\n<td>Ctrl + C or Ctrl + Insert</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>Ctrl + V or Shift + Insert</td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + V</td>\n<td>从粘贴板中选择内容进行粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + D</td>\n<td>将当前行或者选择的内容复制到下一行或光标处</td>\n</tr>\n<tr>\n<td>Ctrl + Y</td>\n<td>删除光标所在的行</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + J</td>\n<td>合成选中代码到一行。格式化代码的反向动作</td>\n</tr>\n<tr>\n<td>Ctrl + Enter</td>\n<td>智能线分割</td>\n</tr>\n<tr>\n<td>Shift + Enter</td>\n<td>另起一新行。无论光标在行的那个位置</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + U</td>\n<td>字符大小写切换</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + ] / [</td>\n<td>以区块为单位，从光标处 向后/向前 选择，再次点击增加选择范围</td>\n</tr>\n<tr>\n<td>Ctrl + Delete</td>\n<td>删除光标之后的部分单词</td>\n</tr>\n<tr>\n<td>Ctrl + Backspace</td>\n<td>删除光标之前的部分单词</td>\n</tr>\n<tr>\n<td>Ctrl + +/-</td>\n<td>折叠/打开代码块，再次点击扩大折叠/打开范围</td>\n</tr>\n<tr>\n<td>Ctrl + Shift +  +</td>\n<td>打开全部</td>\n</tr>\n<tr>\n<td>Ctrl + Shift +  -</td>\n<td>折叠全部</td>\n</tr>\n<tr>\n<td>Ctrl + F4</td>\n<td>关闭当前页面</td>\n</tr>\n<tr>\n<td><strong>搜索/替换</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + F</td>\n<td>查找</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>查找下一个，结合查找使用</td>\n</tr>\n<tr>\n<td>Shift + F3</td>\n<td>查找前一个，结合查找使用</td>\n</tr>\n<tr>\n<td>Ctrl + R</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + F</td>\n<td>在文件中查找</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + R</td>\n<td>在文件中替换</td>\n</tr>\n<tr>\n<td><strong>被使用搜索</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alt + F7 / Ctrl + F7</td>\n<td>全项目被使用查找/当前文件声明变量处</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + F7</td>\n<td>在文件中变量或函数被使用处高亮</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + F7</td>\n<td>显示详细被使用的位置列表</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"navicat-for-mysql-快捷键\"><a href=\"#navicat-for-mysql-快捷键\" class=\"headerlink\" title=\"navicat for mysql 快捷键\"></a>navicat for mysql 快捷键</h2><p>1.ctrl+q           打开查询窗口<br>2.ctrl+/            注释sql语句<br>3.ctrl+shift +/  解除注释<br>4.ctrl+r           运行查询窗口的sql语句<br>5.ctrl+shift+r   只运行选中的sql语句<br>6.F6               打开一个mysql命令行窗口<br>7.ctrl+l            删除一行<br>8.ctrl+n           打开一个新的查询窗口<br>9.ctrl+w          关闭一个查询窗口</p>\n<h2 id=\"phpstrom快捷键\"><a href=\"#phpstrom快捷键\" class=\"headerlink\" title=\"phpstrom快捷键\"></a>phpstrom快捷键</h2><p><strong>编辑</strong></p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + Space</td>\n<td>代码自动完成（一般与输入法冲突）</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + Enter</td>\n<td>智能完善代码（如:if()）</td>\n</tr>\n<tr>\n<td>Ctrl + P</td>\n<td>方法参数提示，显示默认参数</td>\n</tr>\n<tr>\n<td>Ctrl + Q</td>\n<td>显示注释代码</td>\n</tr>\n<tr>\n<td>Ctrl + mouse over code</td>\n<td>查看到简短的函数介绍</td>\n</tr>\n<tr>\n<td>Ctrl + F1</td>\n<td>显示错误或警告信息的描述（需要把光标放到错误或警告位置）</td>\n</tr>\n<tr>\n<td>Alt + Insert</td>\n<td>生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等）</td>\n</tr>\n<tr>\n<td>Ctrl + O</td>\n<td>插入覆盖父类的方法</td>\n</tr>\n<tr>\n<td>Ctrl + I</td>\n<td>实现抽象方法</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + T</td>\n<td>选中的代码放在if..else..、for、foreach里,或者函数里，或者为选中的代码块添加区域解释（可以折叠该段代码，折叠后只显示解释，便于代码管理）</td>\n</tr>\n<tr>\n<td>Ctrl + /</td>\n<td>以添加“//”的方式添加注释</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + /</td>\n<td>添加“/**/”的方式添加注释</td>\n</tr>\n<tr>\n<td>Ctrl + W</td>\n<td>增量式的选中当前块</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + W</td>\n<td>与Ctrl + W对应，减小选中范围</td>\n</tr>\n<tr>\n<td>Alt + Q</td>\n<td>显示包含光标所在位置的标签头</td>\n</tr>\n<tr>\n<td>Alt + Enter</td>\n<td>显示意图行动。 Show Intention Action</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + L</td>\n<td>格式化代码</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + I</td>\n<td>自动缩进。</td>\n</tr>\n<tr>\n<td>Tab / Shift + Tab</td>\n<td>手动缩进/反向缩进</td>\n</tr>\n<tr>\n<td>Ctrl + X or Shift + Delete</td>\n<td>剪切</td>\n</tr>\n<tr>\n<td>Ctrl + C or Ctrl + Insert</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>Ctrl + V or Shift + Insert</td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + V</td>\n<td>从粘贴板中选择内容进行粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + D</td>\n<td>将当前行或者选择的内容复制到下一行或光标处</td>\n</tr>\n<tr>\n<td>Ctrl + Y</td>\n<td>删除光标所在的行</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + J</td>\n<td>合成选中代码到一行。格式化代码的反向动作</td>\n</tr>\n<tr>\n<td>Ctrl + Enter</td>\n<td>智能线分割</td>\n</tr>\n<tr>\n<td>Shift + Enter</td>\n<td>另起一新行。无论光标在行的那个位置</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + U</td>\n<td>字符大小写切换</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + ] / [</td>\n<td>以区块为单位，从光标处 向后/向前 选择，再次点击增加选择范围</td>\n</tr>\n<tr>\n<td>Ctrl + Delete</td>\n<td>删除光标之后的部分单词</td>\n</tr>\n<tr>\n<td>Ctrl + Backspace</td>\n<td>删除光标之前的部分单词</td>\n</tr>\n<tr>\n<td>Ctrl + +/-</td>\n<td>折叠/打开代码块，再次点击扩大折叠/打开范围</td>\n</tr>\n<tr>\n<td>Ctrl + Shift +  +</td>\n<td>打开全部</td>\n</tr>\n<tr>\n<td>Ctrl + Shift +  -</td>\n<td>折叠全部</td>\n</tr>\n<tr>\n<td>Ctrl + F4</td>\n<td>关闭当前页面</td>\n</tr>\n<tr>\n<td><strong>搜索/替换</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + F</td>\n<td>查找</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>查找下一个，结合查找使用</td>\n</tr>\n<tr>\n<td>Shift + F3</td>\n<td>查找前一个，结合查找使用</td>\n</tr>\n<tr>\n<td>Ctrl + R</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + F</td>\n<td>在文件中查找</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + R</td>\n<td>在文件中替换</td>\n</tr>\n<tr>\n<td><strong>被使用搜索</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alt + F7 / Ctrl + F7</td>\n<td>全项目被使用查找/当前文件声明变量处</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + F7</td>\n<td>在文件中变量或函数被使用处高亮</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + F7</td>\n<td>显示详细被使用的位置列表</td>\n</tr>\n</tbody></table>\n"},{"title":"抽象工厂模式","date":"2019-07-22T09:40:10.000Z","_content":"## 目的\n在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。\n## 举例\n#### \n```php\n<?php\nclass KuaidiBirdLogic extends BaseLogic\n{\n    private $basic;\n    private $num;\n    public function __construct(int $num, int $basic)\n    {\n        $this->num = $num;\n        $this->basic = $basic;\n    }\n}\nclass KuaidiOneLogic implements KuaidiBase\n{\n    private $num;\n    public function __construct(int $num)\n    {\n        $this->num = $num;\n    }\n}\n```\n定义抽象工厂类\n```php\n<?php\nclass ExpressFactory extends Model\n{\n    public function getKuaidiBirdList() {\n        return new KuaidiBirdLogic(12, 13);\n    }\n    public function getKuaidiOneLogic() {\n        return new KuaidiOneLogic();\n    }\n}\n\n```\n## 几种工厂模式的区别\n#### 抽象工厂模式\n类似于示例Basic\n#### 简单工厂模式\n#### 工厂方法模式\n#### 静态工厂模式\n","source":"_posts/AbstractFactory.md","raw":"---\ntitle: 抽象工厂模式\ndate: 2019-07-22 17:40:10\ntags: \n- 概念介绍\ncategories: \n- 学习\n- 设计模式\n---\n## 目的\n在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。\n## 举例\n#### \n```php\n<?php\nclass KuaidiBirdLogic extends BaseLogic\n{\n    private $basic;\n    private $num;\n    public function __construct(int $num, int $basic)\n    {\n        $this->num = $num;\n        $this->basic = $basic;\n    }\n}\nclass KuaidiOneLogic implements KuaidiBase\n{\n    private $num;\n    public function __construct(int $num)\n    {\n        $this->num = $num;\n    }\n}\n```\n定义抽象工厂类\n```php\n<?php\nclass ExpressFactory extends Model\n{\n    public function getKuaidiBirdList() {\n        return new KuaidiBirdLogic(12, 13);\n    }\n    public function getKuaidiOneLogic() {\n        return new KuaidiOneLogic();\n    }\n}\n\n```\n## 几种工厂模式的区别\n#### 抽象工厂模式\n类似于示例Basic\n#### 简单工厂模式\n#### 工厂方法模式\n#### 静态工厂模式\n","slug":"AbstractFactory","published":1,"updated":"2021-07-23T01:58:27.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcv000hl0xo0vmt98n5","content":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KuaidiBirdLogic</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseLogic</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $basic;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $num;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(int $num, int $basic)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;num = $num;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;basic = $basic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KuaidiOneLogic</span> <span class=\"keyword\">implements</span> <span class=\"title\">KuaidiBase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $num;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(int $num)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;num = $num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义抽象工厂类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpressFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getKuaidiBirdList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KuaidiBirdLogic(<span class=\"number\">12</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getKuaidiOneLogic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KuaidiOneLogic();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"几种工厂模式的区别\"><a href=\"#几种工厂模式的区别\" class=\"headerlink\" title=\"几种工厂模式的区别\"></a>几种工厂模式的区别</h2><h4 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h4><p>类似于示例Basic</p>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><h4 id=\"静态工厂模式\"><a href=\"#静态工厂模式\" class=\"headerlink\" title=\"静态工厂模式\"></a>静态工厂模式</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>在不指定具体类的情况下创建一系列相关或依赖对象。 通常创建的类都实现相同的接口。 抽象工厂的客户并不关心这些对象是如何创建的，它只是知道它们是如何一起运行的。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KuaidiBirdLogic</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseLogic</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $basic;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $num;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(int $num, int $basic)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;num = $num;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;basic = $basic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KuaidiOneLogic</span> <span class=\"keyword\">implements</span> <span class=\"title\">KuaidiBase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $num;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(int $num)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;num = $num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义抽象工厂类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpressFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getKuaidiBirdList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KuaidiBirdLogic(<span class=\"number\">12</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getKuaidiOneLogic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KuaidiOneLogic();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"几种工厂模式的区别\"><a href=\"#几种工厂模式的区别\" class=\"headerlink\" title=\"几种工厂模式的区别\"></a>几种工厂模式的区别</h2><h4 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h4><p>类似于示例Basic</p>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><h4 id=\"静态工厂模式\"><a href=\"#静态工厂模式\" class=\"headerlink\" title=\"静态工厂模式\"></a>静态工厂模式</h4>"},{"title":"各种奇怪的坑","date":"2019-02-01T08:10:10.000Z","_content":"#### 1 strtotime()\n**描述**\n获取上个月的时间可以是date('Y-m-d',strtotime('-1 month'));如果今天是31号而上个月没有31号，就会直接输出这个月1号；\n**解决办法**\n使用last day of -1 month来获取上个月的最后一天\n#### 2 php 字符串和数字比较\n**描述**\n遇到一个问题，传过来的参数可能是0，可能是字符串，然后与0作比较，但是当传递的参数是字符串时，与0比较，结果是true\n**解决办法**\n直接与'0'比较。0==='0'可以返回true,可以直接比较，字符串与'0'比较也不等\n#### 3 virtualbox共享文件夹不能执行virtualenv env，只能在其他文件夹下运行，暂时没想到解决办法\nvirtualbox的共享文件夹有保护机制，不允许直接运行virtualenv env，只能在其他文件夹下运行,解决办法：\n硬链接\n#### 4 laravel get()->toArray()无法获取数据\n","source":"_posts/2019_01_01.md","raw":"---\ntitle: 各种奇怪的坑\ndate: 2019-02-01 16:10:10\ntags: \n- 学习\ncategories: \n- 学习\n---\n#### 1 strtotime()\n**描述**\n获取上个月的时间可以是date('Y-m-d',strtotime('-1 month'));如果今天是31号而上个月没有31号，就会直接输出这个月1号；\n**解决办法**\n使用last day of -1 month来获取上个月的最后一天\n#### 2 php 字符串和数字比较\n**描述**\n遇到一个问题，传过来的参数可能是0，可能是字符串，然后与0作比较，但是当传递的参数是字符串时，与0比较，结果是true\n**解决办法**\n直接与'0'比较。0==='0'可以返回true,可以直接比较，字符串与'0'比较也不等\n#### 3 virtualbox共享文件夹不能执行virtualenv env，只能在其他文件夹下运行，暂时没想到解决办法\nvirtualbox的共享文件夹有保护机制，不允许直接运行virtualenv env，只能在其他文件夹下运行,解决办法：\n硬链接\n#### 4 laravel get()->toArray()无法获取数据\n","slug":"2019_01_01","published":1,"updated":"2021-07-23T01:58:27.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcw000jl0xobnd0e91y","content":"<h4 id=\"1-strtotime\"><a href=\"#1-strtotime\" class=\"headerlink\" title=\"1 strtotime()\"></a>1 strtotime()</h4><p><strong>描述</strong><br>获取上个月的时间可以是date(‘Y-m-d’,strtotime(‘-1 month’));如果今天是31号而上个月没有31号，就会直接输出这个月1号；<br><strong>解决办法</strong><br>使用last day of -1 month来获取上个月的最后一天</p>\n<h4 id=\"2-php-字符串和数字比较\"><a href=\"#2-php-字符串和数字比较\" class=\"headerlink\" title=\"2 php 字符串和数字比较\"></a>2 php 字符串和数字比较</h4><p><strong>描述</strong><br>遇到一个问题，传过来的参数可能是0，可能是字符串，然后与0作比较，但是当传递的参数是字符串时，与0比较，结果是true<br><strong>解决办法</strong><br>直接与’0’比较。0===’0’可以返回true,可以直接比较，字符串与’0’比较也不等</p>\n<h4 id=\"3-virtualbox共享文件夹不能执行virtualenv-env，只能在其他文件夹下运行，暂时没想到解决办法\"><a href=\"#3-virtualbox共享文件夹不能执行virtualenv-env，只能在其他文件夹下运行，暂时没想到解决办法\" class=\"headerlink\" title=\"3 virtualbox共享文件夹不能执行virtualenv env，只能在其他文件夹下运行，暂时没想到解决办法\"></a>3 virtualbox共享文件夹不能执行virtualenv env，只能在其他文件夹下运行，暂时没想到解决办法</h4><p>virtualbox的共享文件夹有保护机制，不允许直接运行virtualenv env，只能在其他文件夹下运行,解决办法：<br>硬链接</p>\n<h4 id=\"4-laravel-get-gt-toArray-无法获取数据\"><a href=\"#4-laravel-get-gt-toArray-无法获取数据\" class=\"headerlink\" title=\"4 laravel get()-&gt;toArray()无法获取数据\"></a>4 laravel get()-&gt;toArray()无法获取数据</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-strtotime\"><a href=\"#1-strtotime\" class=\"headerlink\" title=\"1 strtotime()\"></a>1 strtotime()</h4><p><strong>描述</strong><br>获取上个月的时间可以是date(‘Y-m-d’,strtotime(‘-1 month’));如果今天是31号而上个月没有31号，就会直接输出这个月1号；<br><strong>解决办法</strong><br>使用last day of -1 month来获取上个月的最后一天</p>\n<h4 id=\"2-php-字符串和数字比较\"><a href=\"#2-php-字符串和数字比较\" class=\"headerlink\" title=\"2 php 字符串和数字比较\"></a>2 php 字符串和数字比较</h4><p><strong>描述</strong><br>遇到一个问题，传过来的参数可能是0，可能是字符串，然后与0作比较，但是当传递的参数是字符串时，与0比较，结果是true<br><strong>解决办法</strong><br>直接与’0’比较。0===’0’可以返回true,可以直接比较，字符串与’0’比较也不等</p>\n<h4 id=\"3-virtualbox共享文件夹不能执行virtualenv-env，只能在其他文件夹下运行，暂时没想到解决办法\"><a href=\"#3-virtualbox共享文件夹不能执行virtualenv-env，只能在其他文件夹下运行，暂时没想到解决办法\" class=\"headerlink\" title=\"3 virtualbox共享文件夹不能执行virtualenv env，只能在其他文件夹下运行，暂时没想到解决办法\"></a>3 virtualbox共享文件夹不能执行virtualenv env，只能在其他文件夹下运行，暂时没想到解决办法</h4><p>virtualbox的共享文件夹有保护机制，不允许直接运行virtualenv env，只能在其他文件夹下运行,解决办法：<br>硬链接</p>\n<h4 id=\"4-laravel-get-gt-toArray-无法获取数据\"><a href=\"#4-laravel-get-gt-toArray-无法获取数据\" class=\"headerlink\" title=\"4 laravel get()-&gt;toArray()无法获取数据\"></a>4 laravel get()-&gt;toArray()无法获取数据</h4>"},{"title":"在github上使用Hexo 搭建个人博客","date":"2019-04-01T03:03:10.000Z","_content":"# 安装\n**简介**\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n**安装前提**\nnode.js\ngit\n**安装步骤**\n```\nnpm install -g hexo-cli\n```\n# 建站\n```\nhexo init <folder>\ncd <folder>\nnpm install\n```\n# 创建博客\n```\nhexo new [layout] <title> #hexo n\nhexo generate（或者hexo g:生成静态文件） #hexo g\nhexo publish [layout] <filename>（发布草稿）\nhexo server（启动服务器）\nhexo deploy（或者hexo d:部署）\nhexo render <file1> [file2] ...（渲染文件）\nhexo migrate <type>（从其他博客迁移内容）\nhexo clean（清除缓存文件 (db.json) 和已生成的静态文件 (public)）\nhexo list（列出网站资料）\nhexo version（显示 Hexo 版本）\n#部署使用hexo deploy (hexo d,需要先编译)\n```\n# 添加评论\n可以使用gitment或者valine\n[valine评论](https://blog.csdn.net/blue_zy/article/details/79071414 \"valine评论\")\n[gitment评论](https://blog.csdn.net/Biebersxzl/article/details/81913680 \"gitment评论\")\n**注意事项**\n1 如果添加了CNAME，回调地址需要填绑定的地址\n2 如果需要开启评论，除了百度能搜到的步骤以外，还需要本地安装博客评论模块\nnpm i --save gitment\n再重新hexo g -d一下\n3 作者的服务器停掉了，因此需要修改js源码来源：\n[修改源](https://blog.csdn.net/wardseptember/article/details/82828391 \"修改源\")\n（也可以wget将源码下载下来后修改源到自己服务器上）\n\n\n\n\n\n","source":"_posts/Hexo.md","raw":"---\ntitle: 在github上使用Hexo 搭建个人博客\ndate: 2019-04-01 11:03:10\ntags:\ncategories:\n - 前端\n---\n# 安装\n**简介**\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n**安装前提**\nnode.js\ngit\n**安装步骤**\n```\nnpm install -g hexo-cli\n```\n# 建站\n```\nhexo init <folder>\ncd <folder>\nnpm install\n```\n# 创建博客\n```\nhexo new [layout] <title> #hexo n\nhexo generate（或者hexo g:生成静态文件） #hexo g\nhexo publish [layout] <filename>（发布草稿）\nhexo server（启动服务器）\nhexo deploy（或者hexo d:部署）\nhexo render <file1> [file2] ...（渲染文件）\nhexo migrate <type>（从其他博客迁移内容）\nhexo clean（清除缓存文件 (db.json) 和已生成的静态文件 (public)）\nhexo list（列出网站资料）\nhexo version（显示 Hexo 版本）\n#部署使用hexo deploy (hexo d,需要先编译)\n```\n# 添加评论\n可以使用gitment或者valine\n[valine评论](https://blog.csdn.net/blue_zy/article/details/79071414 \"valine评论\")\n[gitment评论](https://blog.csdn.net/Biebersxzl/article/details/81913680 \"gitment评论\")\n**注意事项**\n1 如果添加了CNAME，回调地址需要填绑定的地址\n2 如果需要开启评论，除了百度能搜到的步骤以外，还需要本地安装博客评论模块\nnpm i --save gitment\n再重新hexo g -d一下\n3 作者的服务器停掉了，因此需要修改js源码来源：\n[修改源](https://blog.csdn.net/wardseptember/article/details/82828391 \"修改源\")\n（也可以wget将源码下载下来后修改源到自己服务器上）\n\n\n\n\n\n","slug":"Hexo","published":1,"updated":"2021-07-23T01:58:27.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcy000ml0xogmqi7w8c","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><strong>简介</strong><br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><strong>安装前提</strong><br>node.js<br>git<br><strong>安装步骤</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h1 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h1 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt; #hexo n</span><br><span class=\"line\">hexo generate（或者hexo g:生成静态文件） #hexo g</span><br><span class=\"line\">hexo publish [layout] &lt;filename&gt;（发布草稿）</span><br><span class=\"line\">hexo server（启动服务器）</span><br><span class=\"line\">hexo deploy（或者hexo d:部署）</span><br><span class=\"line\">hexo render &lt;file1&gt; [file2] ...（渲染文件）</span><br><span class=\"line\">hexo migrate &lt;type&gt;（从其他博客迁移内容）</span><br><span class=\"line\">hexo clean（清除缓存文件 (db.json) 和已生成的静态文件 (public)）</span><br><span class=\"line\">hexo list（列出网站资料）</span><br><span class=\"line\">hexo version（显示 Hexo 版本）</span><br><span class=\"line\">#部署使用hexo deploy (hexo d,需要先编译)</span><br></pre></td></tr></table></figure>\n<h1 id=\"添加评论\"><a href=\"#添加评论\" class=\"headerlink\" title=\"添加评论\"></a>添加评论</h1><p>可以使用gitment或者valine<br><a href=\"https://blog.csdn.net/blue_zy/article/details/79071414\" target=\"_blank\" rel=\"noopener\" title=\"valine评论\">valine评论</a><br><a href=\"https://blog.csdn.net/Biebersxzl/article/details/81913680\" target=\"_blank\" rel=\"noopener\" title=\"gitment评论\">gitment评论</a><br><strong>注意事项</strong><br>1 如果添加了CNAME，回调地址需要填绑定的地址<br>2 如果需要开启评论，除了百度能搜到的步骤以外，还需要本地安装博客评论模块<br>npm i –save gitment<br>再重新hexo g -d一下<br>3 作者的服务器停掉了，因此需要修改js源码来源：<br><a href=\"https://blog.csdn.net/wardseptember/article/details/82828391\" target=\"_blank\" rel=\"noopener\" title=\"修改源\">修改源</a><br>（也可以wget将源码下载下来后修改源到自己服务器上）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><strong>简介</strong><br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><strong>安装前提</strong><br>node.js<br>git<br><strong>安装步骤</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h1 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h1 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt; #hexo n</span><br><span class=\"line\">hexo generate（或者hexo g:生成静态文件） #hexo g</span><br><span class=\"line\">hexo publish [layout] &lt;filename&gt;（发布草稿）</span><br><span class=\"line\">hexo server（启动服务器）</span><br><span class=\"line\">hexo deploy（或者hexo d:部署）</span><br><span class=\"line\">hexo render &lt;file1&gt; [file2] ...（渲染文件）</span><br><span class=\"line\">hexo migrate &lt;type&gt;（从其他博客迁移内容）</span><br><span class=\"line\">hexo clean（清除缓存文件 (db.json) 和已生成的静态文件 (public)）</span><br><span class=\"line\">hexo list（列出网站资料）</span><br><span class=\"line\">hexo version（显示 Hexo 版本）</span><br><span class=\"line\">#部署使用hexo deploy (hexo d,需要先编译)</span><br></pre></td></tr></table></figure>\n<h1 id=\"添加评论\"><a href=\"#添加评论\" class=\"headerlink\" title=\"添加评论\"></a>添加评论</h1><p>可以使用gitment或者valine<br><a href=\"https://blog.csdn.net/blue_zy/article/details/79071414\" target=\"_blank\" rel=\"noopener\" title=\"valine评论\">valine评论</a><br><a href=\"https://blog.csdn.net/Biebersxzl/article/details/81913680\" target=\"_blank\" rel=\"noopener\" title=\"gitment评论\">gitment评论</a><br><strong>注意事项</strong><br>1 如果添加了CNAME，回调地址需要填绑定的地址<br>2 如果需要开启评论，除了百度能搜到的步骤以外，还需要本地安装博客评论模块<br>npm i –save gitment<br>再重新hexo g -d一下<br>3 作者的服务器停掉了，因此需要修改js源码来源：<br><a href=\"https://blog.csdn.net/wardseptember/article/details/82828391\" target=\"_blank\" rel=\"noopener\" title=\"修改源\">修改源</a><br>（也可以wget将源码下载下来后修改源到自己服务器上）</p>\n"},{"title":"一些php知识","date":"2019-03-28T06:00:40.000Z","_content":"## argc和argv\n$argv代表传递的参数,$argc代表参数个数（相对路径+传的参数）\n**示例**\n```php\n<?php\necho $argv[0];     echo \"\\n\";\nvar_dump($argv[1]);    echo \"\\n\";\nvar_dump(intval($argv[2]));  echo \"\\n\";\necho $argv[3];     echo \"\\n\";\necho $argc;\n```\n","source":"_posts/Laurel.md","raw":"---\ntitle: 一些php知识\ndate: 2019-03-28 14:00:40\ntags:\n---\n## argc和argv\n$argv代表传递的参数,$argc代表参数个数（相对路径+传的参数）\n**示例**\n```php\n<?php\necho $argv[0];     echo \"\\n\";\nvar_dump($argv[1]);    echo \"\\n\";\nvar_dump(intval($argv[2]));  echo \"\\n\";\necho $argv[3];     echo \"\\n\";\necho $argc;\n```\n","slug":"Laurel","published":1,"updated":"2021-07-23T01:58:27.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kcy000ol0xoatnh84yj","content":"<h2 id=\"argc和argv\"><a href=\"#argc和argv\" class=\"headerlink\" title=\"argc和argv\"></a>argc和argv</h2><p>$argv代表传递的参数,$argc代表参数个数（相对路径+传的参数）<br><strong>示例</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $argv[<span class=\"number\">0</span>];     <span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">var_dump($argv[<span class=\"number\">1</span>]);    <span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">var_dump(intval($argv[<span class=\"number\">2</span>]));  <span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $argv[<span class=\"number\">3</span>];     <span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $argc;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"argc和argv\"><a href=\"#argc和argv\" class=\"headerlink\" title=\"argc和argv\"></a>argc和argv</h2><p>$argv代表传递的参数,$argc代表参数个数（相对路径+传的参数）<br><strong>示例</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $argv[<span class=\"number\">0</span>];     <span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">var_dump($argv[<span class=\"number\">1</span>]);    <span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">var_dump(intval($argv[<span class=\"number\">2</span>]));  <span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $argv[<span class=\"number\">3</span>];     <span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $argc;</span><br></pre></td></tr></table></figure>\n"},{"title":"virtualbox搭建LANP环境（ubuntu）","date":"2019-04-28T06:00:40.000Z","_content":"## 1 基础软件下载\nvirtual box\nubuntu(ubuntu server)\n## 2 安装ubuntu\n(1)virtualbox创建虚拟电脑\n注意：最好重新设置virtualbox->管理->全局设定->默认虚拟电脑位置\n(2)启动，网络设置成网络地址转换(NAT)\n(3)重启的时候需要弹出U盘或者改变镜像位置\n(4)如果提示未指定nat网络名称，管理->全局设定->网络->nat网络（添加一条）\n(5)\n## 3 配置ssh\n(1)添加端口映射（例如2222->22）,注意主机端口不可重复，且子系统ip不填\n(2)ubuntu安装ssh\n```\nsudo apt-get install openssh-server\n```\n(3)xshell等工具连接，端口号为转发的主机端口\n## 4 安装php nginx Mysql\n(1)安装php\n```\nsudo apt-get install php7.0 \n```\n(2)安装nginx\n```\nsudo apt-get install nginx\n```\n(3)安装Mysql\n```\nsudo apt-get install mysql-server-5.7 mysql-client-5.7\n```\n## 5 基础配置\n(1)安装PHPFastCGI管理器\nsudo apt install php7.2-fpm\n\n## 6其他tips\n(1)配置sudo\n修改 /etc/sudoers，末尾添加一行：\n``` \ntest    ALL=(ALL) NOPASSWD: ALL\n```\ntest表示用户名；\n保存退出后执行一下命令：\n``` \nsudo usermod -aG test test\n```\n(2)配置共享文件夹且自启动\n1 virtualbox(设置-共享文件夹-勾选固定分配(不勾选自动挂载))\n2 ubuntu创建文件夹\n3 挂载共享文件夹\n``` \nsudo mount -t vboxsf filesname /mnt/filesname\n```\n**报错**\n可能报错wrong fs type, bad option, bad superblock\n，经过搜索需要安装```apt-get install nfs-common```   \n但是安装后依旧报错，查看系统日志，报错信息如下：\n![explain](/images/mysqlIndex/error.png)\n只查到了一条有用的记录，且是英文的，原来这是virtualbox的一个bug，我记得virtualbox还有一个bug,就是不能在共享文件夹里使用python的虚拟环境，但是这版直接共享文件夹都不能挂载了。路径如下：\n[virtualbox bug](https://www.virtualbox.org/ticket/9307 \"virtualbox bug\")\n再安装两个插件即可\n``` \nsudo apt install cifs-utils\nsudo apt install virtualbox-guest-utils\n```\n4 共享文件挂载自启动\n(3)配置rsa\n1 windows生成私钥\n```\nssh-keygen -t rsa -C <your_email@example.com>\n```\n2 git配置\n在git配置上加上公钥\n3 linux配置对应rsa\n进入当前用户的home目录(~)，创建.ssh文件夹,复制私钥到文件夹下，进入项目目录，即可执行git clone(可能权限不够，可以暂时把项目目录设置成777)\n## 7 配置\n#### 1 配置nginx\n```\nsudo vim /etc/nginx/sites-enabled/default\n//需要给默认index加上index.php\n```\n","source":"_posts/LANP.md","raw":"---\ntitle: virtualbox搭建LANP环境（ubuntu）\ndate: 2019-04-28 14:00:40\ntags:\n---\n## 1 基础软件下载\nvirtual box\nubuntu(ubuntu server)\n## 2 安装ubuntu\n(1)virtualbox创建虚拟电脑\n注意：最好重新设置virtualbox->管理->全局设定->默认虚拟电脑位置\n(2)启动，网络设置成网络地址转换(NAT)\n(3)重启的时候需要弹出U盘或者改变镜像位置\n(4)如果提示未指定nat网络名称，管理->全局设定->网络->nat网络（添加一条）\n(5)\n## 3 配置ssh\n(1)添加端口映射（例如2222->22）,注意主机端口不可重复，且子系统ip不填\n(2)ubuntu安装ssh\n```\nsudo apt-get install openssh-server\n```\n(3)xshell等工具连接，端口号为转发的主机端口\n## 4 安装php nginx Mysql\n(1)安装php\n```\nsudo apt-get install php7.0 \n```\n(2)安装nginx\n```\nsudo apt-get install nginx\n```\n(3)安装Mysql\n```\nsudo apt-get install mysql-server-5.7 mysql-client-5.7\n```\n## 5 基础配置\n(1)安装PHPFastCGI管理器\nsudo apt install php7.2-fpm\n\n## 6其他tips\n(1)配置sudo\n修改 /etc/sudoers，末尾添加一行：\n``` \ntest    ALL=(ALL) NOPASSWD: ALL\n```\ntest表示用户名；\n保存退出后执行一下命令：\n``` \nsudo usermod -aG test test\n```\n(2)配置共享文件夹且自启动\n1 virtualbox(设置-共享文件夹-勾选固定分配(不勾选自动挂载))\n2 ubuntu创建文件夹\n3 挂载共享文件夹\n``` \nsudo mount -t vboxsf filesname /mnt/filesname\n```\n**报错**\n可能报错wrong fs type, bad option, bad superblock\n，经过搜索需要安装```apt-get install nfs-common```   \n但是安装后依旧报错，查看系统日志，报错信息如下：\n![explain](/images/mysqlIndex/error.png)\n只查到了一条有用的记录，且是英文的，原来这是virtualbox的一个bug，我记得virtualbox还有一个bug,就是不能在共享文件夹里使用python的虚拟环境，但是这版直接共享文件夹都不能挂载了。路径如下：\n[virtualbox bug](https://www.virtualbox.org/ticket/9307 \"virtualbox bug\")\n再安装两个插件即可\n``` \nsudo apt install cifs-utils\nsudo apt install virtualbox-guest-utils\n```\n4 共享文件挂载自启动\n(3)配置rsa\n1 windows生成私钥\n```\nssh-keygen -t rsa -C <your_email@example.com>\n```\n2 git配置\n在git配置上加上公钥\n3 linux配置对应rsa\n进入当前用户的home目录(~)，创建.ssh文件夹,复制私钥到文件夹下，进入项目目录，即可执行git clone(可能权限不够，可以暂时把项目目录设置成777)\n## 7 配置\n#### 1 配置nginx\n```\nsudo vim /etc/nginx/sites-enabled/default\n//需要给默认index加上index.php\n```\n","slug":"LANP","published":1,"updated":"2021-07-23T01:58:27.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kd0000sl0xof41h1alf","content":"<h2 id=\"1-基础软件下载\"><a href=\"#1-基础软件下载\" class=\"headerlink\" title=\"1 基础软件下载\"></a>1 基础软件下载</h2><p>virtual box<br>ubuntu(ubuntu server)</p>\n<h2 id=\"2-安装ubuntu\"><a href=\"#2-安装ubuntu\" class=\"headerlink\" title=\"2 安装ubuntu\"></a>2 安装ubuntu</h2><p>(1)virtualbox创建虚拟电脑<br>注意：最好重新设置virtualbox-&gt;管理-&gt;全局设定-&gt;默认虚拟电脑位置<br>(2)启动，网络设置成网络地址转换(NAT)<br>(3)重启的时候需要弹出U盘或者改变镜像位置<br>(4)如果提示未指定nat网络名称，管理-&gt;全局设定-&gt;网络-&gt;nat网络（添加一条）<br>(5)</p>\n<h2 id=\"3-配置ssh\"><a href=\"#3-配置ssh\" class=\"headerlink\" title=\"3 配置ssh\"></a>3 配置ssh</h2><p>(1)添加端口映射（例如2222-&gt;22）,注意主机端口不可重复，且子系统ip不填<br>(2)ubuntu安装ssh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n<p>(3)xshell等工具连接，端口号为转发的主机端口</p>\n<h2 id=\"4-安装php-nginx-Mysql\"><a href=\"#4-安装php-nginx-Mysql\" class=\"headerlink\" title=\"4 安装php nginx Mysql\"></a>4 安装php nginx Mysql</h2><p>(1)安装php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php7.0</span><br></pre></td></tr></table></figure>\n<p>(2)安装nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n<p>(3)安装Mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server-5.7 mysql-client-5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-基础配置\"><a href=\"#5-基础配置\" class=\"headerlink\" title=\"5 基础配置\"></a>5 基础配置</h2><p>(1)安装PHPFastCGI管理器<br>sudo apt install php7.2-fpm</p>\n<h2 id=\"6其他tips\"><a href=\"#6其他tips\" class=\"headerlink\" title=\"6其他tips\"></a>6其他tips</h2><p>(1)配置sudo<br>修改 /etc/sudoers，末尾添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test    ALL&#x3D;(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n<p>test表示用户名；<br>保存退出后执行一下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG test test</span><br></pre></td></tr></table></figure>\n<p>(2)配置共享文件夹且自启动<br>1 virtualbox(设置-共享文件夹-勾选固定分配(不勾选自动挂载))<br>2 ubuntu创建文件夹<br>3 挂载共享文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t vboxsf filesname &#x2F;mnt&#x2F;filesname</span><br></pre></td></tr></table></figure>\n<p><strong>报错</strong><br>可能报错wrong fs type, bad option, bad superblock<br>，经过搜索需要安装<code>apt-get install nfs-common</code><br>但是安装后依旧报错，查看系统日志，报错信息如下：<br><img src=\"/images/mysqlIndex/error.png\" alt=\"explain\"><br>只查到了一条有用的记录，且是英文的，原来这是virtualbox的一个bug，我记得virtualbox还有一个bug,就是不能在共享文件夹里使用python的虚拟环境，但是这版直接共享文件夹都不能挂载了。路径如下：<br><a href=\"https://www.virtualbox.org/ticket/9307\" target=\"_blank\" rel=\"noopener\" title=\"virtualbox bug\">virtualbox bug</a><br>再安装两个插件即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install cifs-utils</span><br><span class=\"line\">sudo apt install virtualbox-guest-utils</span><br></pre></td></tr></table></figure>\n<p>4 共享文件挂载自启动<br>(3)配置rsa<br>1 windows生成私钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &lt;your_email@example.com&gt;</span><br></pre></td></tr></table></figure>\n<p>2 git配置<br>在git配置上加上公钥<br>3 linux配置对应rsa<br>进入当前用户的home目录(~)，创建.ssh文件夹,复制私钥到文件夹下，进入项目目录，即可执行git clone(可能权限不够，可以暂时把项目目录设置成777)</p>\n<h2 id=\"7-配置\"><a href=\"#7-配置\" class=\"headerlink\" title=\"7 配置\"></a>7 配置</h2><h4 id=\"1-配置nginx\"><a href=\"#1-配置nginx\" class=\"headerlink\" title=\"1 配置nginx\"></a>1 配置nginx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default</span><br><span class=\"line\">&#x2F;&#x2F;需要给默认index加上index.php</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-基础软件下载\"><a href=\"#1-基础软件下载\" class=\"headerlink\" title=\"1 基础软件下载\"></a>1 基础软件下载</h2><p>virtual box<br>ubuntu(ubuntu server)</p>\n<h2 id=\"2-安装ubuntu\"><a href=\"#2-安装ubuntu\" class=\"headerlink\" title=\"2 安装ubuntu\"></a>2 安装ubuntu</h2><p>(1)virtualbox创建虚拟电脑<br>注意：最好重新设置virtualbox-&gt;管理-&gt;全局设定-&gt;默认虚拟电脑位置<br>(2)启动，网络设置成网络地址转换(NAT)<br>(3)重启的时候需要弹出U盘或者改变镜像位置<br>(4)如果提示未指定nat网络名称，管理-&gt;全局设定-&gt;网络-&gt;nat网络（添加一条）<br>(5)</p>\n<h2 id=\"3-配置ssh\"><a href=\"#3-配置ssh\" class=\"headerlink\" title=\"3 配置ssh\"></a>3 配置ssh</h2><p>(1)添加端口映射（例如2222-&gt;22）,注意主机端口不可重复，且子系统ip不填<br>(2)ubuntu安装ssh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n<p>(3)xshell等工具连接，端口号为转发的主机端口</p>\n<h2 id=\"4-安装php-nginx-Mysql\"><a href=\"#4-安装php-nginx-Mysql\" class=\"headerlink\" title=\"4 安装php nginx Mysql\"></a>4 安装php nginx Mysql</h2><p>(1)安装php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php7.0</span><br></pre></td></tr></table></figure>\n<p>(2)安装nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n<p>(3)安装Mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server-5.7 mysql-client-5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-基础配置\"><a href=\"#5-基础配置\" class=\"headerlink\" title=\"5 基础配置\"></a>5 基础配置</h2><p>(1)安装PHPFastCGI管理器<br>sudo apt install php7.2-fpm</p>\n<h2 id=\"6其他tips\"><a href=\"#6其他tips\" class=\"headerlink\" title=\"6其他tips\"></a>6其他tips</h2><p>(1)配置sudo<br>修改 /etc/sudoers，末尾添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test    ALL&#x3D;(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n<p>test表示用户名；<br>保存退出后执行一下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG test test</span><br></pre></td></tr></table></figure>\n<p>(2)配置共享文件夹且自启动<br>1 virtualbox(设置-共享文件夹-勾选固定分配(不勾选自动挂载))<br>2 ubuntu创建文件夹<br>3 挂载共享文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t vboxsf filesname &#x2F;mnt&#x2F;filesname</span><br></pre></td></tr></table></figure>\n<p><strong>报错</strong><br>可能报错wrong fs type, bad option, bad superblock<br>，经过搜索需要安装<code>apt-get install nfs-common</code><br>但是安装后依旧报错，查看系统日志，报错信息如下：<br><img src=\"/images/mysqlIndex/error.png\" alt=\"explain\"><br>只查到了一条有用的记录，且是英文的，原来这是virtualbox的一个bug，我记得virtualbox还有一个bug,就是不能在共享文件夹里使用python的虚拟环境，但是这版直接共享文件夹都不能挂载了。路径如下：<br><a href=\"https://www.virtualbox.org/ticket/9307\" target=\"_blank\" rel=\"noopener\" title=\"virtualbox bug\">virtualbox bug</a><br>再安装两个插件即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install cifs-utils</span><br><span class=\"line\">sudo apt install virtualbox-guest-utils</span><br></pre></td></tr></table></figure>\n<p>4 共享文件挂载自启动<br>(3)配置rsa<br>1 windows生成私钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &lt;your_email@example.com&gt;</span><br></pre></td></tr></table></figure>\n<p>2 git配置<br>在git配置上加上公钥<br>3 linux配置对应rsa<br>进入当前用户的home目录(~)，创建.ssh文件夹,复制私钥到文件夹下，进入项目目录，即可执行git clone(可能权限不够，可以暂时把项目目录设置成777)</p>\n<h2 id=\"7-配置\"><a href=\"#7-配置\" class=\"headerlink\" title=\"7 配置\"></a>7 配置</h2><h4 id=\"1-配置nginx\"><a href=\"#1-配置nginx\" class=\"headerlink\" title=\"1 配置nginx\"></a>1 配置nginx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default</span><br><span class=\"line\">&#x2F;&#x2F;需要给默认index加上index.php</span><br></pre></td></tr></table></figure>\n"},{"title":"Laravel 日志系统","date":"2019-04-11T07:23:44.000Z","_content":"## 1 （自己摸索版本）5.2\n#### 1 定义路径\n.env配置文件添加日志路径，例如\n``` \nLOG_PATH=/tmp/paytest\n```\n#### 2 启动文件添加日志路径\n```php\n$app->configureMonologUsing(function($logger){\n    $logger->pushHandler(new \\Monolog\\Handler\\RotatingFileHandler(env('LOG_PATH').'.log'), 10);\n    return $logger;\n});\n```\n## 2 官方文档\n#### 1 异常处理\n**介绍**\n当您启动一个新的 Laravel 项目时，错误和异常处理就已为您配置。 应用程序触发的所有异常都被 App\\Exceptions\\Handler 类记录下来，然后渲染给用户。 我们将在本文档中深入介绍此类。\n**配置**\n（1）config/app.php 文件的 debug 选项，决定了是否向用户显示错误信息。默认情况下，此选项设置为存储在 .env 文件中的  APP_DEBUG 环境变量中。\n（2）Laravel 支持 single 、daily 、 syslog 和 errorlog 日志模式。要配置 Laravel 使用的存储机制，应该修改 config/app.php 配置文件中的 log 选项。例如，如果您希望使用每日一个日志文件而不是单个文件，则应将 app 配置文件中的 log 值设置为 daily\n**日志等级**\n使用 Monolog 时，日志消息可能具有不同的日志等级。默认情况下，Laravel 将所有日志级别写入存储。但是，在生产环境中，您可能希望通过将 log_level 选项添加到 app.php 配置文件中来配置应记录的最低日志等级。\n\n一旦配置了此选项，Laravel 将记录大于或等于指定日志等级的所有级别。例如，默认将 log_level 设置为 error 那么将会记录 error , critical , alert 和 emergency 日志信息：\n``` \n'log_level' => env('APP_LOG_LEVEL', 'error'),\n```\n**注意事项**\n Monolog 识别以下日志等级 - 从低到高为: debug , info , notice , warning , error , critical , alert , emergency\n**Report方法**\n所有异常都由 App\\Exceptions\\Handler 类处理。 这个类包含两个方法：report 和 render 。 我们将详细研究这些方法。 report 方法用于记录异常或将其发送到外部服务，如 Bugsnag 或 Sentry 。默认情况下，report 方法只是将异常传递给记录异常的基类。然而，你可以自由选择任何方式进行处理。\n**render方法**\nrender 方法负责将异常转换成 HTTP 响应发送给浏览器。默认情况下，异常会传递给为您生成响应的基类。但是，您可以自由检查异常类型或返回您自己的自定义响应\n``` \n/**\n * 渲染异常并添加到 HTTP 响应中。\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  \\Exception  $exception\n * @return \\Illuminate\\Http\\Response\n */\npublic function render($request, Exception $exception)\n{\n    if ($exception instanceof CustomException) {\n        return response()->view('errors.custom', [], 500);\n    }\n\n    return parent::render($request, $exception);\n}\n```\n**HTTP异常**\n可直接用abort()，例如abort(404),abort(403, 'Unauthorized action.');\n**自定义错误页面**\n如果您要自定义404 HTTP状态代码的错误页面，请创建一个 resources/views/errors/404.blade.php 。此文件将会用于渲染所有404错误。此目录中的视图文件命名应与它们对应的HTTP状态代码匹配。由 abort 函数引发的 HttpException 实例将作为 $exception 变量传递给视图。\n#### 2 记录\n**介绍**\n默认情况下，Laravel 日志目录为 storage/logs\n可以传递参数，例如：\n``` \n$test = \"test\";\nLog::info(222222222, ['te' => $test]);\n```\n\n\n\n","source":"_posts/Log.md","raw":"---\ntitle: Laravel 日志系统\ndate: 2019-04-11 15:23:44\ntags:\ncategories: \n- 服务端语言\n- php\n- laravel\n---\n## 1 （自己摸索版本）5.2\n#### 1 定义路径\n.env配置文件添加日志路径，例如\n``` \nLOG_PATH=/tmp/paytest\n```\n#### 2 启动文件添加日志路径\n```php\n$app->configureMonologUsing(function($logger){\n    $logger->pushHandler(new \\Monolog\\Handler\\RotatingFileHandler(env('LOG_PATH').'.log'), 10);\n    return $logger;\n});\n```\n## 2 官方文档\n#### 1 异常处理\n**介绍**\n当您启动一个新的 Laravel 项目时，错误和异常处理就已为您配置。 应用程序触发的所有异常都被 App\\Exceptions\\Handler 类记录下来，然后渲染给用户。 我们将在本文档中深入介绍此类。\n**配置**\n（1）config/app.php 文件的 debug 选项，决定了是否向用户显示错误信息。默认情况下，此选项设置为存储在 .env 文件中的  APP_DEBUG 环境变量中。\n（2）Laravel 支持 single 、daily 、 syslog 和 errorlog 日志模式。要配置 Laravel 使用的存储机制，应该修改 config/app.php 配置文件中的 log 选项。例如，如果您希望使用每日一个日志文件而不是单个文件，则应将 app 配置文件中的 log 值设置为 daily\n**日志等级**\n使用 Monolog 时，日志消息可能具有不同的日志等级。默认情况下，Laravel 将所有日志级别写入存储。但是，在生产环境中，您可能希望通过将 log_level 选项添加到 app.php 配置文件中来配置应记录的最低日志等级。\n\n一旦配置了此选项，Laravel 将记录大于或等于指定日志等级的所有级别。例如，默认将 log_level 设置为 error 那么将会记录 error , critical , alert 和 emergency 日志信息：\n``` \n'log_level' => env('APP_LOG_LEVEL', 'error'),\n```\n**注意事项**\n Monolog 识别以下日志等级 - 从低到高为: debug , info , notice , warning , error , critical , alert , emergency\n**Report方法**\n所有异常都由 App\\Exceptions\\Handler 类处理。 这个类包含两个方法：report 和 render 。 我们将详细研究这些方法。 report 方法用于记录异常或将其发送到外部服务，如 Bugsnag 或 Sentry 。默认情况下，report 方法只是将异常传递给记录异常的基类。然而，你可以自由选择任何方式进行处理。\n**render方法**\nrender 方法负责将异常转换成 HTTP 响应发送给浏览器。默认情况下，异常会传递给为您生成响应的基类。但是，您可以自由检查异常类型或返回您自己的自定义响应\n``` \n/**\n * 渲染异常并添加到 HTTP 响应中。\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  \\Exception  $exception\n * @return \\Illuminate\\Http\\Response\n */\npublic function render($request, Exception $exception)\n{\n    if ($exception instanceof CustomException) {\n        return response()->view('errors.custom', [], 500);\n    }\n\n    return parent::render($request, $exception);\n}\n```\n**HTTP异常**\n可直接用abort()，例如abort(404),abort(403, 'Unauthorized action.');\n**自定义错误页面**\n如果您要自定义404 HTTP状态代码的错误页面，请创建一个 resources/views/errors/404.blade.php 。此文件将会用于渲染所有404错误。此目录中的视图文件命名应与它们对应的HTTP状态代码匹配。由 abort 函数引发的 HttpException 实例将作为 $exception 变量传递给视图。\n#### 2 记录\n**介绍**\n默认情况下，Laravel 日志目录为 storage/logs\n可以传递参数，例如：\n``` \n$test = \"test\";\nLog::info(222222222, ['te' => $test]);\n```\n\n\n\n","slug":"Log","published":1,"updated":"2021-07-23T01:58:27.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kd1000ul0xogfp854n0","content":"<h2 id=\"1-（自己摸索版本）5-2\"><a href=\"#1-（自己摸索版本）5-2\" class=\"headerlink\" title=\"1 （自己摸索版本）5.2\"></a>1 （自己摸索版本）5.2</h2><h4 id=\"1-定义路径\"><a href=\"#1-定义路径\" class=\"headerlink\" title=\"1 定义路径\"></a>1 定义路径</h4><p>.env配置文件添加日志路径，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOG_PATH&#x3D;&#x2F;tmp&#x2F;paytest</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-启动文件添加日志路径\"><a href=\"#2-启动文件添加日志路径\" class=\"headerlink\" title=\"2 启动文件添加日志路径\"></a>2 启动文件添加日志路径</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$app-&gt;configureMonologUsing(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($logger)</span></span>&#123;</span><br><span class=\"line\">    $logger-&gt;pushHandler(<span class=\"keyword\">new</span> \\Monolog\\Handler\\RotatingFileHandler(env(<span class=\"string\">'LOG_PATH'</span>).<span class=\"string\">'.log'</span>), <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $logger;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-官方文档\"><a href=\"#2-官方文档\" class=\"headerlink\" title=\"2 官方文档\"></a>2 官方文档</h2><h4 id=\"1-异常处理\"><a href=\"#1-异常处理\" class=\"headerlink\" title=\"1 异常处理\"></a>1 异常处理</h4><p><strong>介绍</strong><br>当您启动一个新的 Laravel 项目时，错误和异常处理就已为您配置。 应用程序触发的所有异常都被 App\\Exceptions\\Handler 类记录下来，然后渲染给用户。 我们将在本文档中深入介绍此类。<br><strong>配置</strong><br>（1）config/app.php 文件的 debug 选项，决定了是否向用户显示错误信息。默认情况下，此选项设置为存储在 .env 文件中的  APP_DEBUG 环境变量中。<br>（2）Laravel 支持 single 、daily 、 syslog 和 errorlog 日志模式。要配置 Laravel 使用的存储机制，应该修改 config/app.php 配置文件中的 log 选项。例如，如果您希望使用每日一个日志文件而不是单个文件，则应将 app 配置文件中的 log 值设置为 daily<br><strong>日志等级</strong><br>使用 Monolog 时，日志消息可能具有不同的日志等级。默认情况下，Laravel 将所有日志级别写入存储。但是，在生产环境中，您可能希望通过将 log_level 选项添加到 app.php 配置文件中来配置应记录的最低日志等级。</p>\n<p>一旦配置了此选项，Laravel 将记录大于或等于指定日志等级的所有级别。例如，默认将 log_level 设置为 error 那么将会记录 error , critical , alert 和 emergency 日志信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;log_level&#39; &#x3D;&gt; env(&#39;APP_LOG_LEVEL&#39;, &#39;error&#39;),</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong><br> Monolog 识别以下日志等级 - 从低到高为: debug , info , notice , warning , error , critical , alert , emergency<br><strong>Report方法</strong><br>所有异常都由 App\\Exceptions\\Handler 类处理。 这个类包含两个方法：report 和 render 。 我们将详细研究这些方法。 report 方法用于记录异常或将其发送到外部服务，如 Bugsnag 或 Sentry 。默认情况下，report 方法只是将异常传递给记录异常的基类。然而，你可以自由选择任何方式进行处理。<br><strong>render方法</strong><br>render 方法负责将异常转换成 HTTP 响应发送给浏览器。默认情况下，异常会传递给为您生成响应的基类。但是，您可以自由检查异常类型或返回您自己的自定义响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 渲染异常并添加到 HTTP 响应中。</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param  \\Illuminate\\Http\\Request  $request</span><br><span class=\"line\"> * @param  \\Exception  $exception</span><br><span class=\"line\"> * @return \\Illuminate\\Http\\Response</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public function render($request, Exception $exception)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if ($exception instanceof CustomException) &#123;</span><br><span class=\"line\">        return response()-&gt;view(&#39;errors.custom&#39;, [], 500);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return parent::render($request, $exception);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>HTTP异常</strong><br>可直接用abort()，例如abort(404),abort(403, ‘Unauthorized action.’);<br><strong>自定义错误页面</strong><br>如果您要自定义404 HTTP状态代码的错误页面，请创建一个 resources/views/errors/404.blade.php 。此文件将会用于渲染所有404错误。此目录中的视图文件命名应与它们对应的HTTP状态代码匹配。由 abort 函数引发的 HttpException 实例将作为 $exception 变量传递给视图。</p>\n<h4 id=\"2-记录\"><a href=\"#2-记录\" class=\"headerlink\" title=\"2 记录\"></a>2 记录</h4><p><strong>介绍</strong><br>默认情况下，Laravel 日志目录为 storage/logs<br>可以传递参数，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$test &#x3D; &quot;test&quot;;</span><br><span class=\"line\">Log::info(222222222, [&#39;te&#39; &#x3D;&gt; $test]);</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-（自己摸索版本）5-2\"><a href=\"#1-（自己摸索版本）5-2\" class=\"headerlink\" title=\"1 （自己摸索版本）5.2\"></a>1 （自己摸索版本）5.2</h2><h4 id=\"1-定义路径\"><a href=\"#1-定义路径\" class=\"headerlink\" title=\"1 定义路径\"></a>1 定义路径</h4><p>.env配置文件添加日志路径，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOG_PATH&#x3D;&#x2F;tmp&#x2F;paytest</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-启动文件添加日志路径\"><a href=\"#2-启动文件添加日志路径\" class=\"headerlink\" title=\"2 启动文件添加日志路径\"></a>2 启动文件添加日志路径</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$app-&gt;configureMonologUsing(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($logger)</span></span>&#123;</span><br><span class=\"line\">    $logger-&gt;pushHandler(<span class=\"keyword\">new</span> \\Monolog\\Handler\\RotatingFileHandler(env(<span class=\"string\">'LOG_PATH'</span>).<span class=\"string\">'.log'</span>), <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $logger;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-官方文档\"><a href=\"#2-官方文档\" class=\"headerlink\" title=\"2 官方文档\"></a>2 官方文档</h2><h4 id=\"1-异常处理\"><a href=\"#1-异常处理\" class=\"headerlink\" title=\"1 异常处理\"></a>1 异常处理</h4><p><strong>介绍</strong><br>当您启动一个新的 Laravel 项目时，错误和异常处理就已为您配置。 应用程序触发的所有异常都被 App\\Exceptions\\Handler 类记录下来，然后渲染给用户。 我们将在本文档中深入介绍此类。<br><strong>配置</strong><br>（1）config/app.php 文件的 debug 选项，决定了是否向用户显示错误信息。默认情况下，此选项设置为存储在 .env 文件中的  APP_DEBUG 环境变量中。<br>（2）Laravel 支持 single 、daily 、 syslog 和 errorlog 日志模式。要配置 Laravel 使用的存储机制，应该修改 config/app.php 配置文件中的 log 选项。例如，如果您希望使用每日一个日志文件而不是单个文件，则应将 app 配置文件中的 log 值设置为 daily<br><strong>日志等级</strong><br>使用 Monolog 时，日志消息可能具有不同的日志等级。默认情况下，Laravel 将所有日志级别写入存储。但是，在生产环境中，您可能希望通过将 log_level 选项添加到 app.php 配置文件中来配置应记录的最低日志等级。</p>\n<p>一旦配置了此选项，Laravel 将记录大于或等于指定日志等级的所有级别。例如，默认将 log_level 设置为 error 那么将会记录 error , critical , alert 和 emergency 日志信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;log_level&#39; &#x3D;&gt; env(&#39;APP_LOG_LEVEL&#39;, &#39;error&#39;),</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong><br> Monolog 识别以下日志等级 - 从低到高为: debug , info , notice , warning , error , critical , alert , emergency<br><strong>Report方法</strong><br>所有异常都由 App\\Exceptions\\Handler 类处理。 这个类包含两个方法：report 和 render 。 我们将详细研究这些方法。 report 方法用于记录异常或将其发送到外部服务，如 Bugsnag 或 Sentry 。默认情况下，report 方法只是将异常传递给记录异常的基类。然而，你可以自由选择任何方式进行处理。<br><strong>render方法</strong><br>render 方法负责将异常转换成 HTTP 响应发送给浏览器。默认情况下，异常会传递给为您生成响应的基类。但是，您可以自由检查异常类型或返回您自己的自定义响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 渲染异常并添加到 HTTP 响应中。</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param  \\Illuminate\\Http\\Request  $request</span><br><span class=\"line\"> * @param  \\Exception  $exception</span><br><span class=\"line\"> * @return \\Illuminate\\Http\\Response</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public function render($request, Exception $exception)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if ($exception instanceof CustomException) &#123;</span><br><span class=\"line\">        return response()-&gt;view(&#39;errors.custom&#39;, [], 500);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return parent::render($request, $exception);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>HTTP异常</strong><br>可直接用abort()，例如abort(404),abort(403, ‘Unauthorized action.’);<br><strong>自定义错误页面</strong><br>如果您要自定义404 HTTP状态代码的错误页面，请创建一个 resources/views/errors/404.blade.php 。此文件将会用于渲染所有404错误。此目录中的视图文件命名应与它们对应的HTTP状态代码匹配。由 abort 函数引发的 HttpException 实例将作为 $exception 变量传递给视图。</p>\n<h4 id=\"2-记录\"><a href=\"#2-记录\" class=\"headerlink\" title=\"2 记录\"></a>2 记录</h4><p><strong>介绍</strong><br>默认情况下，Laravel 日志目录为 storage/logs<br>可以传递参数，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$test &#x3D; &quot;test&quot;;</span><br><span class=\"line\">Log::info(222222222, [&#39;te&#39; &#x3D;&gt; $test]);</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"bash学习笔记","date":"2019-03-13T06:28:10.000Z","_content":"## ","source":"_posts/bash.md","raw":"---\ntitle: bash学习笔记\ndate: 2019-03-13 14:28:10\ntags:\n---\n## ","slug":"bash","published":1,"updated":"2021-07-23T01:58:27.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kd2000yl0xofsao33qj","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>"},{"title":"简单工厂模式","date":"2019-07-24T02:40:10.000Z","_content":"## 引入\n### 实现计算器\n#### 代码实现\n1 实现一个基础的计算器功能，代码见https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/calculator01.php\n#### 问题分析\n（1）错误处理只判断了除数是否为0，对于字符超长，不可计算等都未处理，可以加上try catch；    \n（2）代码不可复用，耦合性很高\n#### 使用面向对象处理\n（1）使用面向对象的方式实现，将输入输出流和逻辑代码分离，可以提高代码复用性，降低耦合，代码见https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate2.php\n#### 紧耦合vs松耦合\n思考：什么情况下使用继承和多态（各种运算可以继承自运算基类，便于扩展，多态考虑输入的不同类型，对于字符串怎样运算）    \n根据以上思考，完成有继承和多态的代码如下：\nhttps://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate03.php      \n思考：以上代码实现方式虽然使用到了继承，但是如何知道应该调用哪个类呢？难道像之前预估的一样，还是要使用switch判断？\n#### 简单工厂模式\n解决问题，实例化谁，将来会不会增加实例化的对象等容易变化的地方，考虑用一个单独的类来做这个创造实例的过程\n在此基础上实现一个简单工厂类，代码如下：    \nhttps://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate04.php\n如果需要修改运算，可以只修改对应的类，如果需要添加运算，只需要添加运算类，并在工厂中添加对应的分支就可以了    \n简单工厂模式的工厂类一般是使用静态方法，通过接受的参数的不同来返回不同的对象实例\n#### 工厂方法模式\n1 简单工厂模式优点：    \n（1）简单工厂包含必要的判断逻辑，实现了对象的创建和使用的分离；    \n（2）客户端无需知道所创建的具体产品类的类名，只需要具体产品类对应的参数即可；    \n（3）在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性    \n2 简单工厂模式缺点：    \n（1）工厂类职责过重，它出问题整个系统都会崩溃     \n（2）添加新的类的时候，系统中的简单工厂类都要修改，违反了开放-封闭原则    \n（3）简单工厂的静态方法，使得工厂角色无法形成基于继承的等级结构     \n工厂方法模式每一种算法都对应一种工厂，\n工厂方法模式优点：    \n（1）\n#### 抽象工厂\n","source":"_posts/SimpleFactory.md","raw":"---\ntitle: 简单工厂模式\ndate: 2019-07-24 10:40:10\ntags: \n- 概念介绍\ncategories: \n- 学习\n- 设计模式\n---\n## 引入\n### 实现计算器\n#### 代码实现\n1 实现一个基础的计算器功能，代码见https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/calculator01.php\n#### 问题分析\n（1）错误处理只判断了除数是否为0，对于字符超长，不可计算等都未处理，可以加上try catch；    \n（2）代码不可复用，耦合性很高\n#### 使用面向对象处理\n（1）使用面向对象的方式实现，将输入输出流和逻辑代码分离，可以提高代码复用性，降低耦合，代码见https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate2.php\n#### 紧耦合vs松耦合\n思考：什么情况下使用继承和多态（各种运算可以继承自运算基类，便于扩展，多态考虑输入的不同类型，对于字符串怎样运算）    \n根据以上思考，完成有继承和多态的代码如下：\nhttps://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate03.php      \n思考：以上代码实现方式虽然使用到了继承，但是如何知道应该调用哪个类呢？难道像之前预估的一样，还是要使用switch判断？\n#### 简单工厂模式\n解决问题，实例化谁，将来会不会增加实例化的对象等容易变化的地方，考虑用一个单独的类来做这个创造实例的过程\n在此基础上实现一个简单工厂类，代码如下：    \nhttps://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate04.php\n如果需要修改运算，可以只修改对应的类，如果需要添加运算，只需要添加运算类，并在工厂中添加对应的分支就可以了    \n简单工厂模式的工厂类一般是使用静态方法，通过接受的参数的不同来返回不同的对象实例\n#### 工厂方法模式\n1 简单工厂模式优点：    \n（1）简单工厂包含必要的判断逻辑，实现了对象的创建和使用的分离；    \n（2）客户端无需知道所创建的具体产品类的类名，只需要具体产品类对应的参数即可；    \n（3）在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性    \n2 简单工厂模式缺点：    \n（1）工厂类职责过重，它出问题整个系统都会崩溃     \n（2）添加新的类的时候，系统中的简单工厂类都要修改，违反了开放-封闭原则    \n（3）简单工厂的静态方法，使得工厂角色无法形成基于继承的等级结构     \n工厂方法模式每一种算法都对应一种工厂，\n工厂方法模式优点：    \n（1）\n#### 抽象工厂\n","slug":"SimpleFactory","published":1,"updated":"2021-07-23T01:58:27.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kd30011l0xo3iuv7vef","content":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><h3 id=\"实现计算器\"><a href=\"#实现计算器\" class=\"headerlink\" title=\"实现计算器\"></a>实现计算器</h3><h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>1 实现一个基础的计算器功能，代码见<a href=\"https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/calculator01.php\" target=\"_blank\" rel=\"noopener\">https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/calculator01.php</a></p>\n<h4 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h4><p>（1）错误处理只判断了除数是否为0，对于字符超长，不可计算等都未处理，可以加上try catch；<br>（2）代码不可复用，耦合性很高</p>\n<h4 id=\"使用面向对象处理\"><a href=\"#使用面向对象处理\" class=\"headerlink\" title=\"使用面向对象处理\"></a>使用面向对象处理</h4><p>（1）使用面向对象的方式实现，将输入输出流和逻辑代码分离，可以提高代码复用性，降低耦合，代码见<a href=\"https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate2.php\" target=\"_blank\" rel=\"noopener\">https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate2.php</a></p>\n<h4 id=\"紧耦合vs松耦合\"><a href=\"#紧耦合vs松耦合\" class=\"headerlink\" title=\"紧耦合vs松耦合\"></a>紧耦合vs松耦合</h4><p>思考：什么情况下使用继承和多态（各种运算可以继承自运算基类，便于扩展，多态考虑输入的不同类型，对于字符串怎样运算）<br>根据以上思考，完成有继承和多态的代码如下：<br><a href=\"https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate03.php\" target=\"_blank\" rel=\"noopener\">https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate03.php</a><br>思考：以上代码实现方式虽然使用到了继承，但是如何知道应该调用哪个类呢？难道像之前预估的一样，还是要使用switch判断？</p>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p>解决问题，实例化谁，将来会不会增加实例化的对象等容易变化的地方，考虑用一个单独的类来做这个创造实例的过程<br>在此基础上实现一个简单工厂类，代码如下：<br><a href=\"https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate04.php\" target=\"_blank\" rel=\"noopener\">https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate04.php</a><br>如果需要修改运算，可以只修改对应的类，如果需要添加运算，只需要添加运算类，并在工厂中添加对应的分支就可以了<br>简单工厂模式的工厂类一般是使用静态方法，通过接受的参数的不同来返回不同的对象实例</p>\n<h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><p>1 简单工厂模式优点：<br>（1）简单工厂包含必要的判断逻辑，实现了对象的创建和使用的分离；<br>（2）客户端无需知道所创建的具体产品类的类名，只需要具体产品类对应的参数即可；<br>（3）在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性<br>2 简单工厂模式缺点：<br>（1）工厂类职责过重，它出问题整个系统都会崩溃<br>（2）添加新的类的时候，系统中的简单工厂类都要修改，违反了开放-封闭原则<br>（3）简单工厂的静态方法，使得工厂角色无法形成基于继承的等级结构<br>工厂方法模式每一种算法都对应一种工厂，<br>工厂方法模式优点：<br>（1）</p>\n<h4 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><h3 id=\"实现计算器\"><a href=\"#实现计算器\" class=\"headerlink\" title=\"实现计算器\"></a>实现计算器</h3><h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>1 实现一个基础的计算器功能，代码见<a href=\"https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/calculator01.php\" target=\"_blank\" rel=\"noopener\">https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/calculator01.php</a></p>\n<h4 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h4><p>（1）错误处理只判断了除数是否为0，对于字符超长，不可计算等都未处理，可以加上try catch；<br>（2）代码不可复用，耦合性很高</p>\n<h4 id=\"使用面向对象处理\"><a href=\"#使用面向对象处理\" class=\"headerlink\" title=\"使用面向对象处理\"></a>使用面向对象处理</h4><p>（1）使用面向对象的方式实现，将输入输出流和逻辑代码分离，可以提高代码复用性，降低耦合，代码见<a href=\"https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate2.php\" target=\"_blank\" rel=\"noopener\">https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate2.php</a></p>\n<h4 id=\"紧耦合vs松耦合\"><a href=\"#紧耦合vs松耦合\" class=\"headerlink\" title=\"紧耦合vs松耦合\"></a>紧耦合vs松耦合</h4><p>思考：什么情况下使用继承和多态（各种运算可以继承自运算基类，便于扩展，多态考虑输入的不同类型，对于字符串怎样运算）<br>根据以上思考，完成有继承和多态的代码如下：<br><a href=\"https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate03.php\" target=\"_blank\" rel=\"noopener\">https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate03.php</a><br>思考：以上代码实现方式虽然使用到了继承，但是如何知道应该调用哪个类呢？难道像之前预估的一样，还是要使用switch判断？</p>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p>解决问题，实例化谁，将来会不会增加实例化的对象等容易变化的地方，考虑用一个单独的类来做这个创造实例的过程<br>在此基础上实现一个简单工厂类，代码如下：<br><a href=\"https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate04.php\" target=\"_blank\" rel=\"noopener\">https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/Calculate04.php</a><br>如果需要修改运算，可以只修改对应的类，如果需要添加运算，只需要添加运算类，并在工厂中添加对应的分支就可以了<br>简单工厂模式的工厂类一般是使用静态方法，通过接受的参数的不同来返回不同的对象实例</p>\n<h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><p>1 简单工厂模式优点：<br>（1）简单工厂包含必要的判断逻辑，实现了对象的创建和使用的分离；<br>（2）客户端无需知道所创建的具体产品类的类名，只需要具体产品类对应的参数即可；<br>（3）在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性<br>2 简单工厂模式缺点：<br>（1）工厂类职责过重，它出问题整个系统都会崩溃<br>（2）添加新的类的时候，系统中的简单工厂类都要修改，违反了开放-封闭原则<br>（3）简单工厂的静态方法，使得工厂角色无法形成基于继承的等级结构<br>工厂方法模式每一种算法都对应一种工厂，<br>工厂方法模式优点：<br>（1）</p>\n<h4 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h4>"},{"title":"策略模式","date":"2019-07-29T06:37:10.000Z","_content":"## 概念\n### 定义\n策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，该模式让算法独立于使用它的客户而独立变化\n### 组成\n1 抽象策略角色：策略类，通常由一个接口或者抽象类实现    \n2 具体策略角色：包装了相关的算法和行为。     \n3 环境角色：持有一个策略类的引用，最终给客户端调用。\n#### 分析\n策略模式用一个抽象策略角色提供一个类（一般是接口或抽象类），每个策略都实现了这个抽象策略角色，环境角色去调用（依赖注入）    \n#### 代码\n```php\n<?php\n/**\n * @author: hexiaojiao@jiapinai.com\n * @todo:\n * time: 2019-07-30 20:07\n */\n\n/**\n * 定义抽象角色类`\n * Interface CollectInter\n */\ninterface CollectInter\n{\n    public function collect($price, $num);\n    public function input();\n}\nclass Base\n{\n    public function input($discount = 1)\n    {\n        fwrite(STDOUT, '请输入单价');\n        $price = trim(fgets(STDIN));\n        fwrite(STDOUT, '请输入数量');\n        $num = trim(fgets(STDIN));\n        $res = $this->collect($price, $num, $discount);\n        return $res;\n    }\n}\n\n/**\n * 定义具体策略类\n * Class Collect02\n */\nclass Collect02 extends Base implements CollectInter\n{\n    public function collect($price, $num, $discount = 1) {\n        var_dump('Collect02:', $price * $num * $discount);\n        return true;\n    }\n}\n\n/**\n * Class Discount\n */\nclass Discount extends Base implements CollectInter\n{\n    public function collect($price, $num, $discount = 0.8)\n    {\n        var_dump('Discount:', $price * $num * $discount);\n        return true;\n    }\n}\n\n/**\n * Class Reduce\n */\nclass Reduce extends Base implements  CollectInter\n{\n    public function collect($price, $num, $total = 100, $reduce = 0)\n    {\n        if ($price * $total >= $total) {\n            var_dump('Reduce:', ($price * $total) - $reduce);\n        } else {\n            var_dump('Reduce:', $price * $total);\n        }\n        return true;\n    }\n}\n/**\n * 环境角色类\n * Class Main\n */\nclass Main\n{\n    private $_strategy;\n    private $_isChange;\n    public function __construct(CollectInter $collectInter)\n    {\n        $this->_strategy = $collectInter;\n    }\n    public function change(CollectInter $collectInter)\n    {\n        $this->_strategy = $collectInter;\n        $this->_isChange = true;\n    }\n    public function beginCollect()\n    {\n        if ($this->_isChange) {\n            echo \"改变收银方式：\";\n            $this->_strategy->input();\n        } else {\n            $this->_strategy->input();\n        }\n    }\n}\n$strategy = new Main(new Discount());\n$strategy->beginCollect();\n$strategy->change(new Collect02());\n$strategy->beginCollect();\n```\n#### 运行结果\n```\n请输入单价4\n请输入数量2\nstring(9) \"Discount:\"\nint(8)\n改变收银方式：请输入单价7\n请输入数量3\nstring(10) \"Collect02:\"\nint(21)\n```\n","source":"_posts/Strategy.md","raw":"---\ntitle: 策略模式\ndate: 2019-07-29 14:37:10\ntags: \n- 概念介绍\ncategories: \n- 学习\n- 设计模式\n---\n## 概念\n### 定义\n策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，该模式让算法独立于使用它的客户而独立变化\n### 组成\n1 抽象策略角色：策略类，通常由一个接口或者抽象类实现    \n2 具体策略角色：包装了相关的算法和行为。     \n3 环境角色：持有一个策略类的引用，最终给客户端调用。\n#### 分析\n策略模式用一个抽象策略角色提供一个类（一般是接口或抽象类），每个策略都实现了这个抽象策略角色，环境角色去调用（依赖注入）    \n#### 代码\n```php\n<?php\n/**\n * @author: hexiaojiao@jiapinai.com\n * @todo:\n * time: 2019-07-30 20:07\n */\n\n/**\n * 定义抽象角色类`\n * Interface CollectInter\n */\ninterface CollectInter\n{\n    public function collect($price, $num);\n    public function input();\n}\nclass Base\n{\n    public function input($discount = 1)\n    {\n        fwrite(STDOUT, '请输入单价');\n        $price = trim(fgets(STDIN));\n        fwrite(STDOUT, '请输入数量');\n        $num = trim(fgets(STDIN));\n        $res = $this->collect($price, $num, $discount);\n        return $res;\n    }\n}\n\n/**\n * 定义具体策略类\n * Class Collect02\n */\nclass Collect02 extends Base implements CollectInter\n{\n    public function collect($price, $num, $discount = 1) {\n        var_dump('Collect02:', $price * $num * $discount);\n        return true;\n    }\n}\n\n/**\n * Class Discount\n */\nclass Discount extends Base implements CollectInter\n{\n    public function collect($price, $num, $discount = 0.8)\n    {\n        var_dump('Discount:', $price * $num * $discount);\n        return true;\n    }\n}\n\n/**\n * Class Reduce\n */\nclass Reduce extends Base implements  CollectInter\n{\n    public function collect($price, $num, $total = 100, $reduce = 0)\n    {\n        if ($price * $total >= $total) {\n            var_dump('Reduce:', ($price * $total) - $reduce);\n        } else {\n            var_dump('Reduce:', $price * $total);\n        }\n        return true;\n    }\n}\n/**\n * 环境角色类\n * Class Main\n */\nclass Main\n{\n    private $_strategy;\n    private $_isChange;\n    public function __construct(CollectInter $collectInter)\n    {\n        $this->_strategy = $collectInter;\n    }\n    public function change(CollectInter $collectInter)\n    {\n        $this->_strategy = $collectInter;\n        $this->_isChange = true;\n    }\n    public function beginCollect()\n    {\n        if ($this->_isChange) {\n            echo \"改变收银方式：\";\n            $this->_strategy->input();\n        } else {\n            $this->_strategy->input();\n        }\n    }\n}\n$strategy = new Main(new Discount());\n$strategy->beginCollect();\n$strategy->change(new Collect02());\n$strategy->beginCollect();\n```\n#### 运行结果\n```\n请输入单价4\n请输入数量2\nstring(9) \"Discount:\"\nint(8)\n改变收银方式：请输入单价7\n请输入数量3\nstring(10) \"Collect02:\"\nint(21)\n```\n","slug":"Strategy","published":1,"updated":"2021-07-23T01:58:27.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kd40015l0xo3yfa2cuz","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，该模式让算法独立于使用它的客户而独立变化</p>\n<h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><p>1 抽象策略角色：策略类，通常由一个接口或者抽象类实现<br>2 具体策略角色：包装了相关的算法和行为。<br>3 环境角色：持有一个策略类的引用，最终给客户端调用。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>策略模式用一个抽象策略角色提供一个类（一般是接口或抽象类），每个策略都实现了这个抽象策略角色，环境角色去调用（依赖注入）    </p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: hexiaojiao<span class=\"doctag\">@jiapinai</span>.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@todo</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * time: 2019-07-30 20:07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义抽象角色类`</span></span><br><span class=\"line\"><span class=\"comment\"> * Interface CollectInter</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CollectInter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collect</span><span class=\"params\">($price, $num)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">input</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">input</span><span class=\"params\">($discount = <span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        fwrite(STDOUT, <span class=\"string\">'请输入单价'</span>);</span><br><span class=\"line\">        $price = trim(fgets(STDIN));</span><br><span class=\"line\">        fwrite(STDOUT, <span class=\"string\">'请输入数量'</span>);</span><br><span class=\"line\">        $num = trim(fgets(STDIN));</span><br><span class=\"line\">        $res = <span class=\"keyword\">$this</span>-&gt;collect($price, $num, $discount);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义具体策略类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Collect02</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Collect02</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> <span class=\"keyword\">implements</span> <span class=\"title\">CollectInter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collect</span><span class=\"params\">($price, $num, $discount = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"string\">'Collect02:'</span>, $price * $num * $discount);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Discount</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Discount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> <span class=\"keyword\">implements</span> <span class=\"title\">CollectInter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collect</span><span class=\"params\">($price, $num, $discount = <span class=\"number\">0.8</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"string\">'Discount:'</span>, $price * $num * $discount);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Reduce</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reduce</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> <span class=\"keyword\">implements</span>  <span class=\"title\">CollectInter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collect</span><span class=\"params\">($price, $num, $total = <span class=\"number\">100</span>, $reduce = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($price * $total &gt;= $total) &#123;</span><br><span class=\"line\">            var_dump(<span class=\"string\">'Reduce:'</span>, ($price * $total) - $reduce);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var_dump(<span class=\"string\">'Reduce:'</span>, $price * $total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 环境角色类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Main</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_strategy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_isChange;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(CollectInter $collectInter)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_strategy = $collectInter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span><span class=\"params\">(CollectInter $collectInter)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_strategy = $collectInter;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_isChange = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beginCollect</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;_isChange) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"改变收银方式：\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_strategy-&gt;input();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_strategy-&gt;input();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$strategy = <span class=\"keyword\">new</span> Main(<span class=\"keyword\">new</span> Discount());</span><br><span class=\"line\">$strategy-&gt;beginCollect();</span><br><span class=\"line\">$strategy-&gt;change(<span class=\"keyword\">new</span> Collect02());</span><br><span class=\"line\">$strategy-&gt;beginCollect();</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入单价4</span><br><span class=\"line\">请输入数量2</span><br><span class=\"line\">string(9) &quot;Discount:&quot;</span><br><span class=\"line\">int(8)</span><br><span class=\"line\">改变收银方式：请输入单价7</span><br><span class=\"line\">请输入数量3</span><br><span class=\"line\">string(10) &quot;Collect02:&quot;</span><br><span class=\"line\">int(21)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，该模式让算法独立于使用它的客户而独立变化</p>\n<h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><p>1 抽象策略角色：策略类，通常由一个接口或者抽象类实现<br>2 具体策略角色：包装了相关的算法和行为。<br>3 环境角色：持有一个策略类的引用，最终给客户端调用。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>策略模式用一个抽象策略角色提供一个类（一般是接口或抽象类），每个策略都实现了这个抽象策略角色，环境角色去调用（依赖注入）    </p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: hexiaojiao<span class=\"doctag\">@jiapinai</span>.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@todo</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * time: 2019-07-30 20:07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义抽象角色类`</span></span><br><span class=\"line\"><span class=\"comment\"> * Interface CollectInter</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CollectInter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collect</span><span class=\"params\">($price, $num)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">input</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">input</span><span class=\"params\">($discount = <span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        fwrite(STDOUT, <span class=\"string\">'请输入单价'</span>);</span><br><span class=\"line\">        $price = trim(fgets(STDIN));</span><br><span class=\"line\">        fwrite(STDOUT, <span class=\"string\">'请输入数量'</span>);</span><br><span class=\"line\">        $num = trim(fgets(STDIN));</span><br><span class=\"line\">        $res = <span class=\"keyword\">$this</span>-&gt;collect($price, $num, $discount);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义具体策略类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Collect02</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Collect02</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> <span class=\"keyword\">implements</span> <span class=\"title\">CollectInter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collect</span><span class=\"params\">($price, $num, $discount = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"string\">'Collect02:'</span>, $price * $num * $discount);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Discount</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Discount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> <span class=\"keyword\">implements</span> <span class=\"title\">CollectInter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collect</span><span class=\"params\">($price, $num, $discount = <span class=\"number\">0.8</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"string\">'Discount:'</span>, $price * $num * $discount);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Reduce</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reduce</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> <span class=\"keyword\">implements</span>  <span class=\"title\">CollectInter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collect</span><span class=\"params\">($price, $num, $total = <span class=\"number\">100</span>, $reduce = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($price * $total &gt;= $total) &#123;</span><br><span class=\"line\">            var_dump(<span class=\"string\">'Reduce:'</span>, ($price * $total) - $reduce);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var_dump(<span class=\"string\">'Reduce:'</span>, $price * $total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 环境角色类</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Main</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_strategy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_isChange;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(CollectInter $collectInter)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_strategy = $collectInter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span><span class=\"params\">(CollectInter $collectInter)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_strategy = $collectInter;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_isChange = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beginCollect</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;_isChange) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"改变收银方式：\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_strategy-&gt;input();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_strategy-&gt;input();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$strategy = <span class=\"keyword\">new</span> Main(<span class=\"keyword\">new</span> Discount());</span><br><span class=\"line\">$strategy-&gt;beginCollect();</span><br><span class=\"line\">$strategy-&gt;change(<span class=\"keyword\">new</span> Collect02());</span><br><span class=\"line\">$strategy-&gt;beginCollect();</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入单价4</span><br><span class=\"line\">请输入数量2</span><br><span class=\"line\">string(9) &quot;Discount:&quot;</span><br><span class=\"line\">int(8)</span><br><span class=\"line\">改变收银方式：请输入单价7</span><br><span class=\"line\">请输入数量3</span><br><span class=\"line\">string(10) &quot;Collect02:&quot;</span><br><span class=\"line\">int(21)</span><br></pre></td></tr></table></figure>\n"},{"title":"代码整洁之道1-9章","date":"2019-10-07T09:40:10.000Z","_content":"## 提要\n要有代码：代码呈现了需求的细节，将需求明确到机器可以执行的细节程度    \n不要产生糟糕的、混乱的代码，勒布朗法则：稍后等于永不     \n制造混乱无益于赶上期限，做得快的唯一方法就是始终保持代码整洁。\n## 好代码的特点\n优雅、搞笑；代码逻辑直截了当，缺陷难以隐藏；    \n尽量减少依赖关系，使之便于维护；    \n根据某种分层战略完善处理错误代码，性能调至最优    \n整洁的代码力求集中，每个函数、每个类和每个模块都全神贯注于一事，完全不受四周细节的干扰和污染    \n整洁的代码可由作者之外的开发者阅读和增补，它应当有单元测试和验收测试    \n尽量使用有意义的命名，它只提供一种而非多种做一件事的途径    \n尽量少的依赖关系，明确地定义和提供清晰、尽量少的API\n## 总结\n（1）能通过所有测试    \n（2）没有重复代码    \n（3）体现系统中的全部设计理念    \n（4）包含尽量少的实体，比如类、方法、函数等    \n不要重复代码，只做一件事，表达力，小规模抽象\n## 有意义的命名\n（1）如果名称需要注释来补充，那就不算是名副其实（之前出现过争议）    \n（2）不要使用意义含糊的废话，如果名称相同但是意义不同，那么info和data与a an the一样毫无意义，不要使用废话，varable不应出现在便能两种，table不应出现在表中     \n（3）使用读得出来的名称，方便阅读    \n（4）使用方便搜索的名称    \n（5）避免使用编码      \n（6）应当把类和函数做得足够小，消除对成员前缀的需要，读代码的人通常不会读前缀    \n（7）不要在类名中使用奇怪的命名    \n（8）不要使用双关语\n### 函数\n（1）函数应该尽可能小，20行封顶最佳    \n（2）每个函数都一目了然，每个函数都只说一件事，每个函数都依次带到下一个函数    \n（3）函数的缩进层不应该多余一层或两层    \n### 需要遵循的原则\n（1）确保每隔switch函数都埋藏在较低的抽象层而且永远不重复        \n（2）不要向函数传入布尔值（我以前经常这么做），因为传入布尔值表示函数会有多余的操作    \n（3）使用异常代替返回错误码（错误代码能从主路径代码中分离出来得到简化）    \n（4）抽离try/catch代码块    \n（5）不要重复自己\n## 注释\n### 注意\n注释存在的时间越久，就离它所描述的代码越远，越来越变得全然错误，因为程序员不能坚持维护注释    \n### 必要的注释（好的注释）\n（1）法律信息    \n（2）提供信息的注释    \n（3）对意图的解释    \n（4）阐释（如果参数或返回值是某个标准库的一部分或者不能修改的代码，帮助阐释其含义的代码就会有用）    \n（5）警示\n## 单元测试\n\n","source":"_posts/cleanCode.md","raw":"---\ntitle: 代码整洁之道1-9章\ndate: 2019-10-07 17:40:10\ntags: \n- 学习\ncategories: \n- 学习\n- 代码整洁之道\n---\n## 提要\n要有代码：代码呈现了需求的细节，将需求明确到机器可以执行的细节程度    \n不要产生糟糕的、混乱的代码，勒布朗法则：稍后等于永不     \n制造混乱无益于赶上期限，做得快的唯一方法就是始终保持代码整洁。\n## 好代码的特点\n优雅、搞笑；代码逻辑直截了当，缺陷难以隐藏；    \n尽量减少依赖关系，使之便于维护；    \n根据某种分层战略完善处理错误代码，性能调至最优    \n整洁的代码力求集中，每个函数、每个类和每个模块都全神贯注于一事，完全不受四周细节的干扰和污染    \n整洁的代码可由作者之外的开发者阅读和增补，它应当有单元测试和验收测试    \n尽量使用有意义的命名，它只提供一种而非多种做一件事的途径    \n尽量少的依赖关系，明确地定义和提供清晰、尽量少的API\n## 总结\n（1）能通过所有测试    \n（2）没有重复代码    \n（3）体现系统中的全部设计理念    \n（4）包含尽量少的实体，比如类、方法、函数等    \n不要重复代码，只做一件事，表达力，小规模抽象\n## 有意义的命名\n（1）如果名称需要注释来补充，那就不算是名副其实（之前出现过争议）    \n（2）不要使用意义含糊的废话，如果名称相同但是意义不同，那么info和data与a an the一样毫无意义，不要使用废话，varable不应出现在便能两种，table不应出现在表中     \n（3）使用读得出来的名称，方便阅读    \n（4）使用方便搜索的名称    \n（5）避免使用编码      \n（6）应当把类和函数做得足够小，消除对成员前缀的需要，读代码的人通常不会读前缀    \n（7）不要在类名中使用奇怪的命名    \n（8）不要使用双关语\n### 函数\n（1）函数应该尽可能小，20行封顶最佳    \n（2）每个函数都一目了然，每个函数都只说一件事，每个函数都依次带到下一个函数    \n（3）函数的缩进层不应该多余一层或两层    \n### 需要遵循的原则\n（1）确保每隔switch函数都埋藏在较低的抽象层而且永远不重复        \n（2）不要向函数传入布尔值（我以前经常这么做），因为传入布尔值表示函数会有多余的操作    \n（3）使用异常代替返回错误码（错误代码能从主路径代码中分离出来得到简化）    \n（4）抽离try/catch代码块    \n（5）不要重复自己\n## 注释\n### 注意\n注释存在的时间越久，就离它所描述的代码越远，越来越变得全然错误，因为程序员不能坚持维护注释    \n### 必要的注释（好的注释）\n（1）法律信息    \n（2）提供信息的注释    \n（3）对意图的解释    \n（4）阐释（如果参数或返回值是某个标准库的一部分或者不能修改的代码，帮助阐释其含义的代码就会有用）    \n（5）警示\n## 单元测试\n\n","slug":"cleanCode","published":1,"updated":"2021-07-23T01:58:27.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kd50018l0xogk5x7b3e","content":"<h2 id=\"提要\"><a href=\"#提要\" class=\"headerlink\" title=\"提要\"></a>提要</h2><p>要有代码：代码呈现了需求的细节，将需求明确到机器可以执行的细节程度<br>不要产生糟糕的、混乱的代码，勒布朗法则：稍后等于永不<br>制造混乱无益于赶上期限，做得快的唯一方法就是始终保持代码整洁。</p>\n<h2 id=\"好代码的特点\"><a href=\"#好代码的特点\" class=\"headerlink\" title=\"好代码的特点\"></a>好代码的特点</h2><p>优雅、搞笑；代码逻辑直截了当，缺陷难以隐藏；<br>尽量减少依赖关系，使之便于维护；<br>根据某种分层战略完善处理错误代码，性能调至最优<br>整洁的代码力求集中，每个函数、每个类和每个模块都全神贯注于一事，完全不受四周细节的干扰和污染<br>整洁的代码可由作者之外的开发者阅读和增补，它应当有单元测试和验收测试<br>尽量使用有意义的命名，它只提供一种而非多种做一件事的途径<br>尽量少的依赖关系，明确地定义和提供清晰、尽量少的API</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>（1）能通过所有测试<br>（2）没有重复代码<br>（3）体现系统中的全部设计理念<br>（4）包含尽量少的实体，比如类、方法、函数等<br>不要重复代码，只做一件事，表达力，小规模抽象</p>\n<h2 id=\"有意义的命名\"><a href=\"#有意义的命名\" class=\"headerlink\" title=\"有意义的命名\"></a>有意义的命名</h2><p>（1）如果名称需要注释来补充，那就不算是名副其实（之前出现过争议）<br>（2）不要使用意义含糊的废话，如果名称相同但是意义不同，那么info和data与a an the一样毫无意义，不要使用废话，varable不应出现在便能两种，table不应出现在表中<br>（3）使用读得出来的名称，方便阅读<br>（4）使用方便搜索的名称<br>（5）避免使用编码<br>（6）应当把类和函数做得足够小，消除对成员前缀的需要，读代码的人通常不会读前缀<br>（7）不要在类名中使用奇怪的命名<br>（8）不要使用双关语</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>（1）函数应该尽可能小，20行封顶最佳<br>（2）每个函数都一目了然，每个函数都只说一件事，每个函数都依次带到下一个函数<br>（3）函数的缩进层不应该多余一层或两层    </p>\n<h3 id=\"需要遵循的原则\"><a href=\"#需要遵循的原则\" class=\"headerlink\" title=\"需要遵循的原则\"></a>需要遵循的原则</h3><p>（1）确保每隔switch函数都埋藏在较低的抽象层而且永远不重复<br>（2）不要向函数传入布尔值（我以前经常这么做），因为传入布尔值表示函数会有多余的操作<br>（3）使用异常代替返回错误码（错误代码能从主路径代码中分离出来得到简化）<br>（4）抽离try/catch代码块<br>（5）不要重复自己</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>注释存在的时间越久，就离它所描述的代码越远，越来越变得全然错误，因为程序员不能坚持维护注释    </p>\n<h3 id=\"必要的注释（好的注释）\"><a href=\"#必要的注释（好的注释）\" class=\"headerlink\" title=\"必要的注释（好的注释）\"></a>必要的注释（好的注释）</h3><p>（1）法律信息<br>（2）提供信息的注释<br>（3）对意图的解释<br>（4）阐释（如果参数或返回值是某个标准库的一部分或者不能修改的代码，帮助阐释其含义的代码就会有用）<br>（5）警示</p>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"提要\"><a href=\"#提要\" class=\"headerlink\" title=\"提要\"></a>提要</h2><p>要有代码：代码呈现了需求的细节，将需求明确到机器可以执行的细节程度<br>不要产生糟糕的、混乱的代码，勒布朗法则：稍后等于永不<br>制造混乱无益于赶上期限，做得快的唯一方法就是始终保持代码整洁。</p>\n<h2 id=\"好代码的特点\"><a href=\"#好代码的特点\" class=\"headerlink\" title=\"好代码的特点\"></a>好代码的特点</h2><p>优雅、搞笑；代码逻辑直截了当，缺陷难以隐藏；<br>尽量减少依赖关系，使之便于维护；<br>根据某种分层战略完善处理错误代码，性能调至最优<br>整洁的代码力求集中，每个函数、每个类和每个模块都全神贯注于一事，完全不受四周细节的干扰和污染<br>整洁的代码可由作者之外的开发者阅读和增补，它应当有单元测试和验收测试<br>尽量使用有意义的命名，它只提供一种而非多种做一件事的途径<br>尽量少的依赖关系，明确地定义和提供清晰、尽量少的API</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>（1）能通过所有测试<br>（2）没有重复代码<br>（3）体现系统中的全部设计理念<br>（4）包含尽量少的实体，比如类、方法、函数等<br>不要重复代码，只做一件事，表达力，小规模抽象</p>\n<h2 id=\"有意义的命名\"><a href=\"#有意义的命名\" class=\"headerlink\" title=\"有意义的命名\"></a>有意义的命名</h2><p>（1）如果名称需要注释来补充，那就不算是名副其实（之前出现过争议）<br>（2）不要使用意义含糊的废话，如果名称相同但是意义不同，那么info和data与a an the一样毫无意义，不要使用废话，varable不应出现在便能两种，table不应出现在表中<br>（3）使用读得出来的名称，方便阅读<br>（4）使用方便搜索的名称<br>（5）避免使用编码<br>（6）应当把类和函数做得足够小，消除对成员前缀的需要，读代码的人通常不会读前缀<br>（7）不要在类名中使用奇怪的命名<br>（8）不要使用双关语</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>（1）函数应该尽可能小，20行封顶最佳<br>（2）每个函数都一目了然，每个函数都只说一件事，每个函数都依次带到下一个函数<br>（3）函数的缩进层不应该多余一层或两层    </p>\n<h3 id=\"需要遵循的原则\"><a href=\"#需要遵循的原则\" class=\"headerlink\" title=\"需要遵循的原则\"></a>需要遵循的原则</h3><p>（1）确保每隔switch函数都埋藏在较低的抽象层而且永远不重复<br>（2）不要向函数传入布尔值（我以前经常这么做），因为传入布尔值表示函数会有多余的操作<br>（3）使用异常代替返回错误码（错误代码能从主路径代码中分离出来得到简化）<br>（4）抽离try/catch代码块<br>（5）不要重复自己</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>注释存在的时间越久，就离它所描述的代码越远，越来越变得全然错误，因为程序员不能坚持维护注释    </p>\n<h3 id=\"必要的注释（好的注释）\"><a href=\"#必要的注释（好的注释）\" class=\"headerlink\" title=\"必要的注释（好的注释）\"></a>必要的注释（好的注释）</h3><p>（1）法律信息<br>（2）提供信息的注释<br>（3）对意图的解释<br>（4）阐释（如果参数或返回值是某个标准库的一部分或者不能修改的代码，帮助阐释其含义的代码就会有用）<br>（5）警示</p>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2>"},{"title":"计算相关","date":"2020-02-25T12:10:10.000Z","_content":"#### 1 计算矩形是否相交\n**描述**\n给定两个矩形的左上角起始点坐标和矩形的宽，高，计算这两个矩形是否相交    \n**分析**\n 1 矩形1左上角坐标p1,右下角坐标p2,矩形2左上角坐标p3,右下角坐标p4\n 2 M点坐标为P1与P3点在X方向较大值与Y方向较大值的交点\n 3 N点坐标为P2与P4点在X方向较小值与Y方向较小值的交点\n 4 如果M点的X坐标和Y坐标值均比N点相应的X坐标和Y坐标值小，亦即M和N可以分别构成一个矩形的左上角点和右上角点，则两矩形相交；其余情况则不相交\n **代码**\n ```php\n<?php\nfunction checkRectInterSect($rect1, $rect2)\n    {\n        $x1 = $rect1['x'];   $w1 = $rect1['w'];\n        $y1 = $rect1['y'];   $h1 = $rect1['h'];\n        $x2 = $rect2['x'];   $w2 = $rect2['w'];\n        $y2 = $rect2['y'];   $h2 = $rect2['h'];\n        $p1 = [$x1, $y1];\n        $p2 = [$x1 + $w1, $y1 + $h1];\n        $p3 = [$x2, $y2];\n        $p4 = [$x2 + $w2, $y2 + $h2];\n\n        $M = [max($p1[0], $p3[0]), max($p1[1], $p1[1])];\n        $N = [min($p2[0], $p4[0]), min($p2[1], $p4[1])];\n\n        if ($M[0] < $N[0] && $M[1] < $N[1]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n?>\n```\n#### 2 json转csv\n**描述**\n需要将数据库数据导出为csv文件\n**代码**\n```php\n<?php\n    function getCsvData(int $limit = 1000, int $skip = 0, string $ageId = '')\n    {\n        $data = $this->dao->conn->query(['faceItems' => ['$in' => [$ageId]], 'status' => 2, 'apiCheckPass' => true],\n            null, ['limit' => $limit, 'skip' => $skip]);\n        foreach ($data as $v) {\n            foreach ($v as $key => $values) {\n                if (is_array($values)) {\n                    $v[$key] = implode('|', $values);\n                }\n                (string)$v[$key];\n            }\n            $exportData = implode(',', $v);\n            $exportData = $exportData . \"\\r\\n\";\n            $myfile = fopen(\"data.csv\", \"a\") or die(\"Unable to open file!\");\n            $this->writeToCsvFile($data, $myfile, $exportData);\n            fclose($myfile);\n        }\n    }\n    function writeToCsvFile(array $data, $myfile, $exportData)\n    {\n//        $txt = \\GuzzleHttp\\json_encode($data);\n        fwrite($myfile, $exportData);\n        return true;\n    }\n?>\n```\n","source":"_posts/codeCollect.md","raw":"---\ntitle: 计算相关\ndate: 2020-02-25 20:10:10\ntags: \n- 学习\ncategories: \n- 有用代码段收集\n---\n#### 1 计算矩形是否相交\n**描述**\n给定两个矩形的左上角起始点坐标和矩形的宽，高，计算这两个矩形是否相交    \n**分析**\n 1 矩形1左上角坐标p1,右下角坐标p2,矩形2左上角坐标p3,右下角坐标p4\n 2 M点坐标为P1与P3点在X方向较大值与Y方向较大值的交点\n 3 N点坐标为P2与P4点在X方向较小值与Y方向较小值的交点\n 4 如果M点的X坐标和Y坐标值均比N点相应的X坐标和Y坐标值小，亦即M和N可以分别构成一个矩形的左上角点和右上角点，则两矩形相交；其余情况则不相交\n **代码**\n ```php\n<?php\nfunction checkRectInterSect($rect1, $rect2)\n    {\n        $x1 = $rect1['x'];   $w1 = $rect1['w'];\n        $y1 = $rect1['y'];   $h1 = $rect1['h'];\n        $x2 = $rect2['x'];   $w2 = $rect2['w'];\n        $y2 = $rect2['y'];   $h2 = $rect2['h'];\n        $p1 = [$x1, $y1];\n        $p2 = [$x1 + $w1, $y1 + $h1];\n        $p3 = [$x2, $y2];\n        $p4 = [$x2 + $w2, $y2 + $h2];\n\n        $M = [max($p1[0], $p3[0]), max($p1[1], $p1[1])];\n        $N = [min($p2[0], $p4[0]), min($p2[1], $p4[1])];\n\n        if ($M[0] < $N[0] && $M[1] < $N[1]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n?>\n```\n#### 2 json转csv\n**描述**\n需要将数据库数据导出为csv文件\n**代码**\n```php\n<?php\n    function getCsvData(int $limit = 1000, int $skip = 0, string $ageId = '')\n    {\n        $data = $this->dao->conn->query(['faceItems' => ['$in' => [$ageId]], 'status' => 2, 'apiCheckPass' => true],\n            null, ['limit' => $limit, 'skip' => $skip]);\n        foreach ($data as $v) {\n            foreach ($v as $key => $values) {\n                if (is_array($values)) {\n                    $v[$key] = implode('|', $values);\n                }\n                (string)$v[$key];\n            }\n            $exportData = implode(',', $v);\n            $exportData = $exportData . \"\\r\\n\";\n            $myfile = fopen(\"data.csv\", \"a\") or die(\"Unable to open file!\");\n            $this->writeToCsvFile($data, $myfile, $exportData);\n            fclose($myfile);\n        }\n    }\n    function writeToCsvFile(array $data, $myfile, $exportData)\n    {\n//        $txt = \\GuzzleHttp\\json_encode($data);\n        fwrite($myfile, $exportData);\n        return true;\n    }\n?>\n```\n","slug":"codeCollect","published":1,"updated":"2021-07-23T01:58:27.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kd9001bl0xog71oem7c","content":"<h4 id=\"1-计算矩形是否相交\"><a href=\"#1-计算矩形是否相交\" class=\"headerlink\" title=\"1 计算矩形是否相交\"></a>1 计算矩形是否相交</h4><p><strong>描述</strong><br>给定两个矩形的左上角起始点坐标和矩形的宽，高，计算这两个矩形是否相交<br><strong>分析</strong><br> 1 矩形1左上角坐标p1,右下角坐标p2,矩形2左上角坐标p3,右下角坐标p4<br> 2 M点坐标为P1与P3点在X方向较大值与Y方向较大值的交点<br> 3 N点坐标为P2与P4点在X方向较小值与Y方向较小值的交点<br> 4 如果M点的X坐标和Y坐标值均比N点相应的X坐标和Y坐标值小，亦即M和N可以分别构成一个矩形的左上角点和右上角点，则两矩形相交；其余情况则不相交<br> <strong>代码</strong><br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkRectInterSect</span><span class=\"params\">($rect1, $rect2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $x1 = $rect1[<span class=\"string\">'x'</span>];   $w1 = $rect1[<span class=\"string\">'w'</span>];</span><br><span class=\"line\">        $y1 = $rect1[<span class=\"string\">'y'</span>];   $h1 = $rect1[<span class=\"string\">'h'</span>];</span><br><span class=\"line\">        $x2 = $rect2[<span class=\"string\">'x'</span>];   $w2 = $rect2[<span class=\"string\">'w'</span>];</span><br><span class=\"line\">        $y2 = $rect2[<span class=\"string\">'y'</span>];   $h2 = $rect2[<span class=\"string\">'h'</span>];</span><br><span class=\"line\">        $p1 = [$x1, $y1];</span><br><span class=\"line\">        $p2 = [$x1 + $w1, $y1 + $h1];</span><br><span class=\"line\">        $p3 = [$x2, $y2];</span><br><span class=\"line\">        $p4 = [$x2 + $w2, $y2 + $h2];</span><br><span class=\"line\"></span><br><span class=\"line\">        $M = [max($p1[<span class=\"number\">0</span>], $p3[<span class=\"number\">0</span>]), max($p1[<span class=\"number\">1</span>], $p1[<span class=\"number\">1</span>])];</span><br><span class=\"line\">        $N = [min($p2[<span class=\"number\">0</span>], $p4[<span class=\"number\">0</span>]), min($p2[<span class=\"number\">1</span>], $p4[<span class=\"number\">1</span>])];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($M[<span class=\"number\">0</span>] &lt; $N[<span class=\"number\">0</span>] &amp;&amp; $M[<span class=\"number\">1</span>] &lt; $N[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-json转csv\"><a href=\"#2-json转csv\" class=\"headerlink\" title=\"2 json转csv\"></a>2 json转csv</h4><p><strong>描述</strong><br>需要将数据库数据导出为csv文件<br><strong>代码</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCsvData</span><span class=\"params\">(int $limit = <span class=\"number\">1000</span>, int $skip = <span class=\"number\">0</span>, string $ageId = <span class=\"string\">''</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $data = <span class=\"keyword\">$this</span>-&gt;dao-&gt;conn-&gt;query([<span class=\"string\">'faceItems'</span> =&gt; [<span class=\"string\">'$in'</span> =&gt; [$ageId]], <span class=\"string\">'status'</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">'apiCheckPass'</span> =&gt; <span class=\"keyword\">true</span>],</span><br><span class=\"line\">            <span class=\"keyword\">null</span>, [<span class=\"string\">'limit'</span> =&gt; $limit, <span class=\"string\">'skip'</span> =&gt; $skip]);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($v <span class=\"keyword\">as</span> $key =&gt; $values) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (is_array($values)) &#123;</span><br><span class=\"line\">                    $v[$key] = implode(<span class=\"string\">'|'</span>, $values);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                (string)$v[$key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $exportData = implode(<span class=\"string\">','</span>, $v);</span><br><span class=\"line\">            $exportData = $exportData . <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">            $myfile = fopen(<span class=\"string\">\"data.csv\"</span>, <span class=\"string\">\"a\"</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"Unable to open file!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;writeToCsvFile($data, $myfile, $exportData);</span><br><span class=\"line\">            fclose($myfile);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeToCsvFile</span><span class=\"params\">(array $data, $myfile, $exportData)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        $txt = \\GuzzleHttp\\json_encode($data);</span></span><br><span class=\"line\">        fwrite($myfile, $exportData);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-计算矩形是否相交\"><a href=\"#1-计算矩形是否相交\" class=\"headerlink\" title=\"1 计算矩形是否相交\"></a>1 计算矩形是否相交</h4><p><strong>描述</strong><br>给定两个矩形的左上角起始点坐标和矩形的宽，高，计算这两个矩形是否相交<br><strong>分析</strong><br> 1 矩形1左上角坐标p1,右下角坐标p2,矩形2左上角坐标p3,右下角坐标p4<br> 2 M点坐标为P1与P3点在X方向较大值与Y方向较大值的交点<br> 3 N点坐标为P2与P4点在X方向较小值与Y方向较小值的交点<br> 4 如果M点的X坐标和Y坐标值均比N点相应的X坐标和Y坐标值小，亦即M和N可以分别构成一个矩形的左上角点和右上角点，则两矩形相交；其余情况则不相交<br> <strong>代码</strong><br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkRectInterSect</span><span class=\"params\">($rect1, $rect2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $x1 = $rect1[<span class=\"string\">'x'</span>];   $w1 = $rect1[<span class=\"string\">'w'</span>];</span><br><span class=\"line\">        $y1 = $rect1[<span class=\"string\">'y'</span>];   $h1 = $rect1[<span class=\"string\">'h'</span>];</span><br><span class=\"line\">        $x2 = $rect2[<span class=\"string\">'x'</span>];   $w2 = $rect2[<span class=\"string\">'w'</span>];</span><br><span class=\"line\">        $y2 = $rect2[<span class=\"string\">'y'</span>];   $h2 = $rect2[<span class=\"string\">'h'</span>];</span><br><span class=\"line\">        $p1 = [$x1, $y1];</span><br><span class=\"line\">        $p2 = [$x1 + $w1, $y1 + $h1];</span><br><span class=\"line\">        $p3 = [$x2, $y2];</span><br><span class=\"line\">        $p4 = [$x2 + $w2, $y2 + $h2];</span><br><span class=\"line\"></span><br><span class=\"line\">        $M = [max($p1[<span class=\"number\">0</span>], $p3[<span class=\"number\">0</span>]), max($p1[<span class=\"number\">1</span>], $p1[<span class=\"number\">1</span>])];</span><br><span class=\"line\">        $N = [min($p2[<span class=\"number\">0</span>], $p4[<span class=\"number\">0</span>]), min($p2[<span class=\"number\">1</span>], $p4[<span class=\"number\">1</span>])];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($M[<span class=\"number\">0</span>] &lt; $N[<span class=\"number\">0</span>] &amp;&amp; $M[<span class=\"number\">1</span>] &lt; $N[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-json转csv\"><a href=\"#2-json转csv\" class=\"headerlink\" title=\"2 json转csv\"></a>2 json转csv</h4><p><strong>描述</strong><br>需要将数据库数据导出为csv文件<br><strong>代码</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCsvData</span><span class=\"params\">(int $limit = <span class=\"number\">1000</span>, int $skip = <span class=\"number\">0</span>, string $ageId = <span class=\"string\">''</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $data = <span class=\"keyword\">$this</span>-&gt;dao-&gt;conn-&gt;query([<span class=\"string\">'faceItems'</span> =&gt; [<span class=\"string\">'$in'</span> =&gt; [$ageId]], <span class=\"string\">'status'</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">'apiCheckPass'</span> =&gt; <span class=\"keyword\">true</span>],</span><br><span class=\"line\">            <span class=\"keyword\">null</span>, [<span class=\"string\">'limit'</span> =&gt; $limit, <span class=\"string\">'skip'</span> =&gt; $skip]);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($data <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($v <span class=\"keyword\">as</span> $key =&gt; $values) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (is_array($values)) &#123;</span><br><span class=\"line\">                    $v[$key] = implode(<span class=\"string\">'|'</span>, $values);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                (string)$v[$key];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $exportData = implode(<span class=\"string\">','</span>, $v);</span><br><span class=\"line\">            $exportData = $exportData . <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">            $myfile = fopen(<span class=\"string\">\"data.csv\"</span>, <span class=\"string\">\"a\"</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"Unable to open file!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;writeToCsvFile($data, $myfile, $exportData);</span><br><span class=\"line\">            fclose($myfile);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeToCsvFile</span><span class=\"params\">(array $data, $myfile, $exportData)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        $txt = \\GuzzleHttp\\json_encode($data);</span></span><br><span class=\"line\">        fwrite($myfile, $exportData);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"运行相关","date":"2020-02-25T12:10:10.000Z","_content":"#### 1 下载数据\n**描述**\n根据链接下载文件\n**代码**\n```php\n<?php \nfunction downloadOldFile($url,$rename,$ext){\n    $file_path = 'public/images/age_60-120/';\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);\n    $rawdata=curl_exec ($ch);\n    curl_close ($ch);\n    // 使用中文文件名需要转码\n    $fp = fopen($file_path. $rename .\".\".$ext,'w');\n    fwrite($fp, $rawdata);\n    fclose($fp);\n    // 返回路径\n    return $_SERVER['DOCUMENT_ROOT'].$file_path.$rename.\".\".$ext;\n}\n?>\n```\n#### 2 按步骤执行方法\n**描述**\n经常有需求：分页执行脚本，例如前1000条执行完后继续分页，此时就需要自动跳页执行\n**代码**\n```php\n<?php\n    /**\n     * @param mixed ...$args\n     * @return bool\n     * @throws Exception\n     */\n    private function stepRun(...$args)\n    {\n        $count = $args[0];\n        $method = $args[1];\n        $step = array_key_exists(2, $args) ? $args[2] : 10;\n        $limit = array_key_exists(3, $args) ? $args[3] : 10;\n        $param = array_key_exists(4, $args) ? $args[4] : '';\n        $stepCount = ceil($count / $step);\n        for ($nowStep = 0; $nowStep < $stepCount; $nowStep ++) {\n            $this->$method($limit, $nowStep * $step, $param);\n            sleep(1);\n        }\n        sleep(1);\n        return true;\n    }\n    // 调用\n    //     $this->stepRun($exportCount, 'loopChildData', 1000, $ageId);\n    \n    // 执行方法\n    /**\n        function loopChildData(int $limit = 1000, int $skip = 0, string $ageId = '')\n        {\n            $data = $this->dao->conn->query(['faceItems' => ['$in' => [$ageId]], 'status' => 2, 'apiCheckPass' => true],\n                null, ['limit' => $limit, 'skip' => $skip]);\n            foreach ($data as $v) {\n                $this->downloadChildFile(Url::createPrivateUrl($v['url']), $v['_id'], 'jpg');\n            }\n        }\n    **/\n?>\n``","source":"_posts/codeCollect2.md","raw":"---\ntitle: 运行相关\ndate: 2020-02-25 20:10:10\ntags: \n- 学习\ncategories: \n- 有用代码段收集\n---\n#### 1 下载数据\n**描述**\n根据链接下载文件\n**代码**\n```php\n<?php \nfunction downloadOldFile($url,$rename,$ext){\n    $file_path = 'public/images/age_60-120/';\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);\n    $rawdata=curl_exec ($ch);\n    curl_close ($ch);\n    // 使用中文文件名需要转码\n    $fp = fopen($file_path. $rename .\".\".$ext,'w');\n    fwrite($fp, $rawdata);\n    fclose($fp);\n    // 返回路径\n    return $_SERVER['DOCUMENT_ROOT'].$file_path.$rename.\".\".$ext;\n}\n?>\n```\n#### 2 按步骤执行方法\n**描述**\n经常有需求：分页执行脚本，例如前1000条执行完后继续分页，此时就需要自动跳页执行\n**代码**\n```php\n<?php\n    /**\n     * @param mixed ...$args\n     * @return bool\n     * @throws Exception\n     */\n    private function stepRun(...$args)\n    {\n        $count = $args[0];\n        $method = $args[1];\n        $step = array_key_exists(2, $args) ? $args[2] : 10;\n        $limit = array_key_exists(3, $args) ? $args[3] : 10;\n        $param = array_key_exists(4, $args) ? $args[4] : '';\n        $stepCount = ceil($count / $step);\n        for ($nowStep = 0; $nowStep < $stepCount; $nowStep ++) {\n            $this->$method($limit, $nowStep * $step, $param);\n            sleep(1);\n        }\n        sleep(1);\n        return true;\n    }\n    // 调用\n    //     $this->stepRun($exportCount, 'loopChildData', 1000, $ageId);\n    \n    // 执行方法\n    /**\n        function loopChildData(int $limit = 1000, int $skip = 0, string $ageId = '')\n        {\n            $data = $this->dao->conn->query(['faceItems' => ['$in' => [$ageId]], 'status' => 2, 'apiCheckPass' => true],\n                null, ['limit' => $limit, 'skip' => $skip]);\n            foreach ($data as $v) {\n                $this->downloadChildFile(Url::createPrivateUrl($v['url']), $v['_id'], 'jpg');\n            }\n        }\n    **/\n?>\n``","slug":"codeCollect2","published":1,"updated":"2021-07-23T01:58:27.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kda001fl0xo47h12fgp","content":"<h4 id=\"1-下载数据\"><a href=\"#1-下载数据\" class=\"headerlink\" title=\"1 下载数据\"></a>1 下载数据</h4><p><strong>描述</strong><br>根据链接下载文件<br><strong>代码</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadOldFile</span><span class=\"params\">($url,$rename,$ext)</span></span>&#123;</span><br><span class=\"line\">    $file_path = <span class=\"string\">'public/images/age_60-120/'</span>;</span><br><span class=\"line\">    $ch = curl_init($url);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_BINARYTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">    $rawdata=curl_exec ($ch);</span><br><span class=\"line\">    curl_close ($ch);</span><br><span class=\"line\">    <span class=\"comment\">// 使用中文文件名需要转码</span></span><br><span class=\"line\">    $fp = fopen($file_path. $rename .<span class=\"string\">\".\"</span>.$ext,<span class=\"string\">'w'</span>);</span><br><span class=\"line\">    fwrite($fp, $rawdata);</span><br><span class=\"line\">    fclose($fp);</span><br><span class=\"line\">    <span class=\"comment\">// 返回路径</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $_SERVER[<span class=\"string\">'DOCUMENT_ROOT'</span>].$file_path.$rename.<span class=\"string\">\".\"</span>.$ext;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-按步骤执行方法\"><a href=\"#2-按步骤执行方法\" class=\"headerlink\" title=\"2 按步骤执行方法\"></a>2 按步骤执行方法</h4><p><strong>描述</strong><br>经常有需求：分页执行脚本，例如前1000条执行完后继续分页，此时就需要自动跳页执行<br><strong>代码</strong></p>\n<p>```php<br>&lt;?php<br>    /**<br>     * @param mixed …$args<br>     * @return bool<br>     * @throws Exception<br>     */<br>    private function stepRun(…$args)<br>    {<br>        $count = $args[0];<br>        $method = $args[1];<br>        $step = array_key_exists(2, $args) ? $args[2] : 10;<br>        $limit = array_key_exists(3, $args) ? $args[3] : 10;<br>        $param = array_key_exists(4, $args) ? $args[4] : ‘’;<br>        $stepCount = ceil($count / $step);<br>        for ($nowStep = 0; $nowStep &lt; $stepCount; $nowStep ++) {<br>            $this-&gt;$method($limit, $nowStep * $step, $param);<br>            sleep(1);<br>        }<br>        sleep(1);<br>        return true;<br>    }<br>    // 调用<br>    //     $this-&gt;stepRun($exportCount, ‘loopChildData’, 1000, $ageId);</p>\n<pre><code>// 执行方法\n/**\n    function loopChildData(int $limit = 1000, int $skip = 0, string $ageId = &apos;&apos;)\n    {\n        $data = $this-&gt;dao-&gt;conn-&gt;query([&apos;faceItems&apos; =&gt; [&apos;$in&apos; =&gt; [$ageId]], &apos;status&apos; =&gt; 2, &apos;apiCheckPass&apos; =&gt; true],\n            null, [&apos;limit&apos; =&gt; $limit, &apos;skip&apos; =&gt; $skip]);\n        foreach ($data as $v) {\n            $this-&gt;downloadChildFile(Url::createPrivateUrl($v[&apos;url&apos;]), $v[&apos;_id&apos;], &apos;jpg&apos;);\n        }\n    }\n**/</code></pre><p>?&gt;<br>``</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-下载数据\"><a href=\"#1-下载数据\" class=\"headerlink\" title=\"1 下载数据\"></a>1 下载数据</h4><p><strong>描述</strong><br>根据链接下载文件<br><strong>代码</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadOldFile</span><span class=\"params\">($url,$rename,$ext)</span></span>&#123;</span><br><span class=\"line\">    $file_path = <span class=\"string\">'public/images/age_60-120/'</span>;</span><br><span class=\"line\">    $ch = curl_init($url);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_BINARYTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">    $rawdata=curl_exec ($ch);</span><br><span class=\"line\">    curl_close ($ch);</span><br><span class=\"line\">    <span class=\"comment\">// 使用中文文件名需要转码</span></span><br><span class=\"line\">    $fp = fopen($file_path. $rename .<span class=\"string\">\".\"</span>.$ext,<span class=\"string\">'w'</span>);</span><br><span class=\"line\">    fwrite($fp, $rawdata);</span><br><span class=\"line\">    fclose($fp);</span><br><span class=\"line\">    <span class=\"comment\">// 返回路径</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $_SERVER[<span class=\"string\">'DOCUMENT_ROOT'</span>].$file_path.$rename.<span class=\"string\">\".\"</span>.$ext;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-按步骤执行方法\"><a href=\"#2-按步骤执行方法\" class=\"headerlink\" title=\"2 按步骤执行方法\"></a>2 按步骤执行方法</h4><p><strong>描述</strong><br>经常有需求：分页执行脚本，例如前1000条执行完后继续分页，此时就需要自动跳页执行<br><strong>代码</strong></p>\n<p>```php<br>&lt;?php<br>    /**<br>     * @param mixed …$args<br>     * @return bool<br>     * @throws Exception<br>     */<br>    private function stepRun(…$args)<br>    {<br>        $count = $args[0];<br>        $method = $args[1];<br>        $step = array_key_exists(2, $args) ? $args[2] : 10;<br>        $limit = array_key_exists(3, $args) ? $args[3] : 10;<br>        $param = array_key_exists(4, $args) ? $args[4] : ‘’;<br>        $stepCount = ceil($count / $step);<br>        for ($nowStep = 0; $nowStep &lt; $stepCount; $nowStep ++) {<br>            $this-&gt;$method($limit, $nowStep * $step, $param);<br>            sleep(1);<br>        }<br>        sleep(1);<br>        return true;<br>    }<br>    // 调用<br>    //     $this-&gt;stepRun($exportCount, ‘loopChildData’, 1000, $ageId);</p>\n<pre><code>// 执行方法\n/**\n    function loopChildData(int $limit = 1000, int $skip = 0, string $ageId = &apos;&apos;)\n    {\n        $data = $this-&gt;dao-&gt;conn-&gt;query([&apos;faceItems&apos; =&gt; [&apos;$in&apos; =&gt; [$ageId]], &apos;status&apos; =&gt; 2, &apos;apiCheckPass&apos; =&gt; true],\n            null, [&apos;limit&apos; =&gt; $limit, &apos;skip&apos; =&gt; $skip]);\n        foreach ($data as $v) {\n            $this-&gt;downloadChildFile(Url::createPrivateUrl($v[&apos;url&apos;]), $v[&apos;_id&apos;], &apos;jpg&apos;);\n        }\n    }\n**/</code></pre><p>?&gt;<br>``</p>\n"},{"title":"设计模式六大原则","date":"2019-10-07T09:40:10.000Z","_content":"##第一：单一职责原则（SPR）  \n一个类应该有且仅有一个原因导致该类的变更，即一个类应该只负责一项职责  \n##第二：里氏替换原则（LSP）\n\n##第三：依赖倒置原则（DIP）\n抽象不应该依赖细节，细节应该依赖于抽象。针对接口编程，不要针对实现编程\n##第四：接口隔离原则（ISP）\n##第五：迪米特法则（LoD）\n##第六：开放封闭原则\n开放-封闭原则是说软件实体（类、模块、函数等等）应该可以扩展，但是不可以修改\n\n","source":"_posts/codePrinceple.md","raw":"---\ntitle: 设计模式六大原则\ndate: 2019-10-07 17:40:10\ntags: \n- 学习\ncategories: \n- 学习\n- 设计模式\n---\n##第一：单一职责原则（SPR）  \n一个类应该有且仅有一个原因导致该类的变更，即一个类应该只负责一项职责  \n##第二：里氏替换原则（LSP）\n\n##第三：依赖倒置原则（DIP）\n抽象不应该依赖细节，细节应该依赖于抽象。针对接口编程，不要针对实现编程\n##第四：接口隔离原则（ISP）\n##第五：迪米特法则（LoD）\n##第六：开放封闭原则\n开放-封闭原则是说软件实体（类、模块、函数等等）应该可以扩展，但是不可以修改\n\n","slug":"codePrinceple","published":1,"updated":"2021-07-23T01:58:27.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdc001hl0xo6p71390z","content":"<p>##第一：单一职责原则（SPR）<br>一个类应该有且仅有一个原因导致该类的变更，即一个类应该只负责一项职责<br>##第二：里氏替换原则（LSP）</p>\n<p>##第三：依赖倒置原则（DIP）<br>抽象不应该依赖细节，细节应该依赖于抽象。针对接口编程，不要针对实现编程<br>##第四：接口隔离原则（ISP）<br>##第五：迪米特法则（LoD）<br>##第六：开放封闭原则<br>开放-封闭原则是说软件实体（类、模块、函数等等）应该可以扩展，但是不可以修改</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##第一：单一职责原则（SPR）<br>一个类应该有且仅有一个原因导致该类的变更，即一个类应该只负责一项职责<br>##第二：里氏替换原则（LSP）</p>\n<p>##第三：依赖倒置原则（DIP）<br>抽象不应该依赖细节，细节应该依赖于抽象。针对接口编程，不要针对实现编程<br>##第四：接口隔离原则（ISP）<br>##第五：迪米特法则（LoD）<br>##第六：开放封闭原则<br>开放-封闭原则是说软件实体（类、模块、函数等等）应该可以扩展，但是不可以修改</p>\n"},{"title":"代码大全","date":"2019-10-05T02:40:10.000Z","_content":"## 前期准备\n### 前期准备的重要性\n不要立即开始写代码，要做好必要的需求分析和架构设计，写好需求文档和技术文档，防止浪费时间和精力制造错误的东西\n### 需求核对表\n**针对功能需求：**\n\n1．是否详细定义了系统的全部输入，包括其来源、精度、取值范围、出现频率等？\n\n2．是否详细定义了系统的全部输出，包括其目的地、精度、取值范围、出现频率格式等？\n\n3．是否详细定义了所有的输出格式(如：web页面、报表等)？\n\n4．是否详细定义了所有硬件及软件的外部接口？\n\n5．是否详细定义了全部外部通信接口，包括握手协议、纠错协议、通信协议等？\n\n6．是否列出了用户所要做的全部事情？\n\n7．是否详细定义了每个任务所用数据，以及每个任务得到的数据\n\n**针对非功能需求（质量需求）**\n\n1.是否为全部必要的操作，从用户的角度，详细描述的期望的响应时间 ？\n\n2.是否详细描述了其他与计时有关的考虑，如处理时间、数据传输率、系统吞吐量等？\n\n3.是否详细定义了安全级别\n\n4.是否详细定义了可靠性，包括软件失灵的后果、发生故障时需要保护的至关重要的信息、错误检查与回复的策略等？\n\n5.是否详细定义了机器内存和剩余硬盘空间最小值？\n\n6.是否详细定义了系统的可维护性，包括适应特定功能的变更、操作环境的变更、与其他软件接口变更的能力？\n\n7.是否包含对“成功”的定义，“失败”的定义？\n\n**需求的质量**\n\n1. 需求是用户书写的吗？\n\n2. 每条需求都不与其他需求冲突吗？\n\n3. 是否详细定义了相互竞争的特性之间的权衡\n\n4. 是否避免在需求中规定设计(方案)\n\n5. 需求是否在详细程度上保持相当一致的水平？有些需求应当更详细的描述吗？有些需求应该更粗略的描述吗？\n\n6. 需求是否足够清晰，即使转交给一个独立的小组去构建，他们也能理解吗？开发者也这么想吗？\n\n7. 每个条款都与待解决的问题及解决方案相关吗？能从每个条款上溯到它的问题中的对应跟源吗？\n\n8. 是否每条需求都是可测试的？是否可应进行独立的测试，以检验满不满足各项需求\n\n9. 是否描述了所有可能对需求的改动，包括各项改动的可能性\n\n**需求的完备性**\n \n 1.对于在开始开发之前无法获得信息，是否详细描述了信息不完全的区域？\n \n 2.需求的完备度是否达到这种程度：如果产品满足所有需求，那么它就是可接受的？\n \n 3.你对全部需求都感觉舒服吗？你是否已经去掉了那些不可能完成的需求—那些只是为了安抚客户和老板的东西？\n### 花费在前期准备上的时间长度\n花费在问题定义，需求分析，软件架构上的时间依据项目的需要而变化，一般占据10%-20%的工作量和20%-30%的时间\n### 良好的类接口\n类的基础是抽象数据类型（我之前大部分时候没有使用抽象，只是把相关的方法和变量定义放在了一起，实际上是不符合面向对象变成原则的），抽象数据类型是指一些数据和\n对这些数据所进行操作的集合。定义抽象类有助于代码规范，提高\n### 创建类的原因\n（1）为显示世界中的对象建模    \n（2）为抽象的对象建模    \n（3）降低复杂度    \n（4）隔离复杂度    \n（5）隐藏实现细节    \n（6）让代码更易重用    \n（7）把相关的操作包装到一起\n### 应当避免的类\n（1）避免创建万能类    \n（2）消除无关紧要的类    \n（3）避免用动词命名的类\n## 防御式编程\n### 三种处理进入垃圾的情况\n（1）检查所有来源于外部的数据的值    \n（2）检查所有子程序输入参数的值    \n（3）决定如何处理错误的输入数据\n### 断言\n断言是指在开发期间使用的、让程序在运行时进行自检的代码\n### 异常\n用异常通知程序的其他部分发生了不可忽略的错误    \n只有真正例外的情况下才抛出异常    \n不能用异常来推卸责任    \n避免在构造函数和析构函数中抛出异常，除非在同一地方把他们捕获    \n在恰当的抽象层次抛出异常\n## 变量\n与《代码整洁之道》对变量的要求几乎一致\n## 代码改善\n### 软件质量的特性\n外在特性：    \n（1）正确性：指系统规范、设计和实现方面的错误的稀少程度        \n（2）可用性：指用户学习和使用一个系统的容易程度    \n（3）效率：指软件是否尽可能少地占用系统资源，包括内存和执行时间    \n（4）可靠性：指在制定的必须条件下，一个系统完成所需要功能的能力-应该有很长的平均无故障时间    \n（5）完整性：限制、验证    \n（6）适应性：适应不同执行环境    \n（7）精确性：输出结果的精确程度    \n（8）健壮性：系统在接受无效输入或处于压力环境下持续正常运行的能力    \n内在特性：\n（1）可维护性：指很容易能够对系统进行修改或新增功能，提高性能及修正缺陷    \n（2）灵活性：系统适用其他系统或者修改难易程度    \n（3）可移植性：运行环境的可移植性    \n（4）可重用性：指系统的某些部分可被应用到其他系统的难易程度    \n（5）可读性：指阅读或理解系统代码的难易程度，尤其是在细节语句的层次上    \n（6）可测试性：指的是可以进行何种程度的单元测试或者系统测试，以及在何种程度上验证系统是否符合需求    \n（7）可理解性：指在系统组织和细节语句的层次上理解整个系统的难易程度\n### 协同构建\n### 开发者测试\n### 调试\n### 重构\n### 软件工艺\n#### 布局与风格\n","source":"_posts/codeComplate_01.md","raw":"---\ntitle: 代码大全\ndate: 2019-10-05 10:40:10\ntags: \n- 学习\ncategories: \n- 学习\n- 代码大全\n---\n## 前期准备\n### 前期准备的重要性\n不要立即开始写代码，要做好必要的需求分析和架构设计，写好需求文档和技术文档，防止浪费时间和精力制造错误的东西\n### 需求核对表\n**针对功能需求：**\n\n1．是否详细定义了系统的全部输入，包括其来源、精度、取值范围、出现频率等？\n\n2．是否详细定义了系统的全部输出，包括其目的地、精度、取值范围、出现频率格式等？\n\n3．是否详细定义了所有的输出格式(如：web页面、报表等)？\n\n4．是否详细定义了所有硬件及软件的外部接口？\n\n5．是否详细定义了全部外部通信接口，包括握手协议、纠错协议、通信协议等？\n\n6．是否列出了用户所要做的全部事情？\n\n7．是否详细定义了每个任务所用数据，以及每个任务得到的数据\n\n**针对非功能需求（质量需求）**\n\n1.是否为全部必要的操作，从用户的角度，详细描述的期望的响应时间 ？\n\n2.是否详细描述了其他与计时有关的考虑，如处理时间、数据传输率、系统吞吐量等？\n\n3.是否详细定义了安全级别\n\n4.是否详细定义了可靠性，包括软件失灵的后果、发生故障时需要保护的至关重要的信息、错误检查与回复的策略等？\n\n5.是否详细定义了机器内存和剩余硬盘空间最小值？\n\n6.是否详细定义了系统的可维护性，包括适应特定功能的变更、操作环境的变更、与其他软件接口变更的能力？\n\n7.是否包含对“成功”的定义，“失败”的定义？\n\n**需求的质量**\n\n1. 需求是用户书写的吗？\n\n2. 每条需求都不与其他需求冲突吗？\n\n3. 是否详细定义了相互竞争的特性之间的权衡\n\n4. 是否避免在需求中规定设计(方案)\n\n5. 需求是否在详细程度上保持相当一致的水平？有些需求应当更详细的描述吗？有些需求应该更粗略的描述吗？\n\n6. 需求是否足够清晰，即使转交给一个独立的小组去构建，他们也能理解吗？开发者也这么想吗？\n\n7. 每个条款都与待解决的问题及解决方案相关吗？能从每个条款上溯到它的问题中的对应跟源吗？\n\n8. 是否每条需求都是可测试的？是否可应进行独立的测试，以检验满不满足各项需求\n\n9. 是否描述了所有可能对需求的改动，包括各项改动的可能性\n\n**需求的完备性**\n \n 1.对于在开始开发之前无法获得信息，是否详细描述了信息不完全的区域？\n \n 2.需求的完备度是否达到这种程度：如果产品满足所有需求，那么它就是可接受的？\n \n 3.你对全部需求都感觉舒服吗？你是否已经去掉了那些不可能完成的需求—那些只是为了安抚客户和老板的东西？\n### 花费在前期准备上的时间长度\n花费在问题定义，需求分析，软件架构上的时间依据项目的需要而变化，一般占据10%-20%的工作量和20%-30%的时间\n### 良好的类接口\n类的基础是抽象数据类型（我之前大部分时候没有使用抽象，只是把相关的方法和变量定义放在了一起，实际上是不符合面向对象变成原则的），抽象数据类型是指一些数据和\n对这些数据所进行操作的集合。定义抽象类有助于代码规范，提高\n### 创建类的原因\n（1）为显示世界中的对象建模    \n（2）为抽象的对象建模    \n（3）降低复杂度    \n（4）隔离复杂度    \n（5）隐藏实现细节    \n（6）让代码更易重用    \n（7）把相关的操作包装到一起\n### 应当避免的类\n（1）避免创建万能类    \n（2）消除无关紧要的类    \n（3）避免用动词命名的类\n## 防御式编程\n### 三种处理进入垃圾的情况\n（1）检查所有来源于外部的数据的值    \n（2）检查所有子程序输入参数的值    \n（3）决定如何处理错误的输入数据\n### 断言\n断言是指在开发期间使用的、让程序在运行时进行自检的代码\n### 异常\n用异常通知程序的其他部分发生了不可忽略的错误    \n只有真正例外的情况下才抛出异常    \n不能用异常来推卸责任    \n避免在构造函数和析构函数中抛出异常，除非在同一地方把他们捕获    \n在恰当的抽象层次抛出异常\n## 变量\n与《代码整洁之道》对变量的要求几乎一致\n## 代码改善\n### 软件质量的特性\n外在特性：    \n（1）正确性：指系统规范、设计和实现方面的错误的稀少程度        \n（2）可用性：指用户学习和使用一个系统的容易程度    \n（3）效率：指软件是否尽可能少地占用系统资源，包括内存和执行时间    \n（4）可靠性：指在制定的必须条件下，一个系统完成所需要功能的能力-应该有很长的平均无故障时间    \n（5）完整性：限制、验证    \n（6）适应性：适应不同执行环境    \n（7）精确性：输出结果的精确程度    \n（8）健壮性：系统在接受无效输入或处于压力环境下持续正常运行的能力    \n内在特性：\n（1）可维护性：指很容易能够对系统进行修改或新增功能，提高性能及修正缺陷    \n（2）灵活性：系统适用其他系统或者修改难易程度    \n（3）可移植性：运行环境的可移植性    \n（4）可重用性：指系统的某些部分可被应用到其他系统的难易程度    \n（5）可读性：指阅读或理解系统代码的难易程度，尤其是在细节语句的层次上    \n（6）可测试性：指的是可以进行何种程度的单元测试或者系统测试，以及在何种程度上验证系统是否符合需求    \n（7）可理解性：指在系统组织和细节语句的层次上理解整个系统的难易程度\n### 协同构建\n### 开发者测试\n### 调试\n### 重构\n### 软件工艺\n#### 布局与风格\n","slug":"codeComplate_01","published":1,"updated":"2021-07-23T01:58:27.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdd001ll0xo7cw5a70q","content":"<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"前期准备的重要性\"><a href=\"#前期准备的重要性\" class=\"headerlink\" title=\"前期准备的重要性\"></a>前期准备的重要性</h3><p>不要立即开始写代码，要做好必要的需求分析和架构设计，写好需求文档和技术文档，防止浪费时间和精力制造错误的东西</p>\n<h3 id=\"需求核对表\"><a href=\"#需求核对表\" class=\"headerlink\" title=\"需求核对表\"></a>需求核对表</h3><p><strong>针对功能需求：</strong></p>\n<p>1．是否详细定义了系统的全部输入，包括其来源、精度、取值范围、出现频率等？</p>\n<p>2．是否详细定义了系统的全部输出，包括其目的地、精度、取值范围、出现频率格式等？</p>\n<p>3．是否详细定义了所有的输出格式(如：web页面、报表等)？</p>\n<p>4．是否详细定义了所有硬件及软件的外部接口？</p>\n<p>5．是否详细定义了全部外部通信接口，包括握手协议、纠错协议、通信协议等？</p>\n<p>6．是否列出了用户所要做的全部事情？</p>\n<p>7．是否详细定义了每个任务所用数据，以及每个任务得到的数据</p>\n<p><strong>针对非功能需求（质量需求）</strong></p>\n<p>1.是否为全部必要的操作，从用户的角度，详细描述的期望的响应时间 ？</p>\n<p>2.是否详细描述了其他与计时有关的考虑，如处理时间、数据传输率、系统吞吐量等？</p>\n<p>3.是否详细定义了安全级别</p>\n<p>4.是否详细定义了可靠性，包括软件失灵的后果、发生故障时需要保护的至关重要的信息、错误检查与回复的策略等？</p>\n<p>5.是否详细定义了机器内存和剩余硬盘空间最小值？</p>\n<p>6.是否详细定义了系统的可维护性，包括适应特定功能的变更、操作环境的变更、与其他软件接口变更的能力？</p>\n<p>7.是否包含对“成功”的定义，“失败”的定义？</p>\n<p><strong>需求的质量</strong></p>\n<ol>\n<li><p>需求是用户书写的吗？</p>\n</li>\n<li><p>每条需求都不与其他需求冲突吗？</p>\n</li>\n<li><p>是否详细定义了相互竞争的特性之间的权衡</p>\n</li>\n<li><p>是否避免在需求中规定设计(方案)</p>\n</li>\n<li><p>需求是否在详细程度上保持相当一致的水平？有些需求应当更详细的描述吗？有些需求应该更粗略的描述吗？</p>\n</li>\n<li><p>需求是否足够清晰，即使转交给一个独立的小组去构建，他们也能理解吗？开发者也这么想吗？</p>\n</li>\n<li><p>每个条款都与待解决的问题及解决方案相关吗？能从每个条款上溯到它的问题中的对应跟源吗？</p>\n</li>\n<li><p>是否每条需求都是可测试的？是否可应进行独立的测试，以检验满不满足各项需求</p>\n</li>\n<li><p>是否描述了所有可能对需求的改动，包括各项改动的可能性</p>\n</li>\n</ol>\n<p><strong>需求的完备性</strong></p>\n<p> 1.对于在开始开发之前无法获得信息，是否详细描述了信息不完全的区域？</p>\n<p> 2.需求的完备度是否达到这种程度：如果产品满足所有需求，那么它就是可接受的？</p>\n<p> 3.你对全部需求都感觉舒服吗？你是否已经去掉了那些不可能完成的需求—那些只是为了安抚客户和老板的东西？</p>\n<h3 id=\"花费在前期准备上的时间长度\"><a href=\"#花费在前期准备上的时间长度\" class=\"headerlink\" title=\"花费在前期准备上的时间长度\"></a>花费在前期准备上的时间长度</h3><p>花费在问题定义，需求分析，软件架构上的时间依据项目的需要而变化，一般占据10%-20%的工作量和20%-30%的时间</p>\n<h3 id=\"良好的类接口\"><a href=\"#良好的类接口\" class=\"headerlink\" title=\"良好的类接口\"></a>良好的类接口</h3><p>类的基础是抽象数据类型（我之前大部分时候没有使用抽象，只是把相关的方法和变量定义放在了一起，实际上是不符合面向对象变成原则的），抽象数据类型是指一些数据和<br>对这些数据所进行操作的集合。定义抽象类有助于代码规范，提高</p>\n<h3 id=\"创建类的原因\"><a href=\"#创建类的原因\" class=\"headerlink\" title=\"创建类的原因\"></a>创建类的原因</h3><p>（1）为显示世界中的对象建模<br>（2）为抽象的对象建模<br>（3）降低复杂度<br>（4）隔离复杂度<br>（5）隐藏实现细节<br>（6）让代码更易重用<br>（7）把相关的操作包装到一起</p>\n<h3 id=\"应当避免的类\"><a href=\"#应当避免的类\" class=\"headerlink\" title=\"应当避免的类\"></a>应当避免的类</h3><p>（1）避免创建万能类<br>（2）消除无关紧要的类<br>（3）避免用动词命名的类</p>\n<h2 id=\"防御式编程\"><a href=\"#防御式编程\" class=\"headerlink\" title=\"防御式编程\"></a>防御式编程</h2><h3 id=\"三种处理进入垃圾的情况\"><a href=\"#三种处理进入垃圾的情况\" class=\"headerlink\" title=\"三种处理进入垃圾的情况\"></a>三种处理进入垃圾的情况</h3><p>（1）检查所有来源于外部的数据的值<br>（2）检查所有子程序输入参数的值<br>（3）决定如何处理错误的输入数据</p>\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><p>断言是指在开发期间使用的、让程序在运行时进行自检的代码</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>用异常通知程序的其他部分发生了不可忽略的错误<br>只有真正例外的情况下才抛出异常<br>不能用异常来推卸责任<br>避免在构造函数和析构函数中抛出异常，除非在同一地方把他们捕获<br>在恰当的抽象层次抛出异常</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>与《代码整洁之道》对变量的要求几乎一致</p>\n<h2 id=\"代码改善\"><a href=\"#代码改善\" class=\"headerlink\" title=\"代码改善\"></a>代码改善</h2><h3 id=\"软件质量的特性\"><a href=\"#软件质量的特性\" class=\"headerlink\" title=\"软件质量的特性\"></a>软件质量的特性</h3><p>外在特性：<br>（1）正确性：指系统规范、设计和实现方面的错误的稀少程度<br>（2）可用性：指用户学习和使用一个系统的容易程度<br>（3）效率：指软件是否尽可能少地占用系统资源，包括内存和执行时间<br>（4）可靠性：指在制定的必须条件下，一个系统完成所需要功能的能力-应该有很长的平均无故障时间<br>（5）完整性：限制、验证<br>（6）适应性：适应不同执行环境<br>（7）精确性：输出结果的精确程度<br>（8）健壮性：系统在接受无效输入或处于压力环境下持续正常运行的能力<br>内在特性：<br>（1）可维护性：指很容易能够对系统进行修改或新增功能，提高性能及修正缺陷<br>（2）灵活性：系统适用其他系统或者修改难易程度<br>（3）可移植性：运行环境的可移植性<br>（4）可重用性：指系统的某些部分可被应用到其他系统的难易程度<br>（5）可读性：指阅读或理解系统代码的难易程度，尤其是在细节语句的层次上<br>（6）可测试性：指的是可以进行何种程度的单元测试或者系统测试，以及在何种程度上验证系统是否符合需求<br>（7）可理解性：指在系统组织和细节语句的层次上理解整个系统的难易程度</p>\n<h3 id=\"协同构建\"><a href=\"#协同构建\" class=\"headerlink\" title=\"协同构建\"></a>协同构建</h3><h3 id=\"开发者测试\"><a href=\"#开发者测试\" class=\"headerlink\" title=\"开发者测试\"></a>开发者测试</h3><h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><h3 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h3><h3 id=\"软件工艺\"><a href=\"#软件工艺\" class=\"headerlink\" title=\"软件工艺\"></a>软件工艺</h3><h4 id=\"布局与风格\"><a href=\"#布局与风格\" class=\"headerlink\" title=\"布局与风格\"></a>布局与风格</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"前期准备的重要性\"><a href=\"#前期准备的重要性\" class=\"headerlink\" title=\"前期准备的重要性\"></a>前期准备的重要性</h3><p>不要立即开始写代码，要做好必要的需求分析和架构设计，写好需求文档和技术文档，防止浪费时间和精力制造错误的东西</p>\n<h3 id=\"需求核对表\"><a href=\"#需求核对表\" class=\"headerlink\" title=\"需求核对表\"></a>需求核对表</h3><p><strong>针对功能需求：</strong></p>\n<p>1．是否详细定义了系统的全部输入，包括其来源、精度、取值范围、出现频率等？</p>\n<p>2．是否详细定义了系统的全部输出，包括其目的地、精度、取值范围、出现频率格式等？</p>\n<p>3．是否详细定义了所有的输出格式(如：web页面、报表等)？</p>\n<p>4．是否详细定义了所有硬件及软件的外部接口？</p>\n<p>5．是否详细定义了全部外部通信接口，包括握手协议、纠错协议、通信协议等？</p>\n<p>6．是否列出了用户所要做的全部事情？</p>\n<p>7．是否详细定义了每个任务所用数据，以及每个任务得到的数据</p>\n<p><strong>针对非功能需求（质量需求）</strong></p>\n<p>1.是否为全部必要的操作，从用户的角度，详细描述的期望的响应时间 ？</p>\n<p>2.是否详细描述了其他与计时有关的考虑，如处理时间、数据传输率、系统吞吐量等？</p>\n<p>3.是否详细定义了安全级别</p>\n<p>4.是否详细定义了可靠性，包括软件失灵的后果、发生故障时需要保护的至关重要的信息、错误检查与回复的策略等？</p>\n<p>5.是否详细定义了机器内存和剩余硬盘空间最小值？</p>\n<p>6.是否详细定义了系统的可维护性，包括适应特定功能的变更、操作环境的变更、与其他软件接口变更的能力？</p>\n<p>7.是否包含对“成功”的定义，“失败”的定义？</p>\n<p><strong>需求的质量</strong></p>\n<ol>\n<li><p>需求是用户书写的吗？</p>\n</li>\n<li><p>每条需求都不与其他需求冲突吗？</p>\n</li>\n<li><p>是否详细定义了相互竞争的特性之间的权衡</p>\n</li>\n<li><p>是否避免在需求中规定设计(方案)</p>\n</li>\n<li><p>需求是否在详细程度上保持相当一致的水平？有些需求应当更详细的描述吗？有些需求应该更粗略的描述吗？</p>\n</li>\n<li><p>需求是否足够清晰，即使转交给一个独立的小组去构建，他们也能理解吗？开发者也这么想吗？</p>\n</li>\n<li><p>每个条款都与待解决的问题及解决方案相关吗？能从每个条款上溯到它的问题中的对应跟源吗？</p>\n</li>\n<li><p>是否每条需求都是可测试的？是否可应进行独立的测试，以检验满不满足各项需求</p>\n</li>\n<li><p>是否描述了所有可能对需求的改动，包括各项改动的可能性</p>\n</li>\n</ol>\n<p><strong>需求的完备性</strong></p>\n<p> 1.对于在开始开发之前无法获得信息，是否详细描述了信息不完全的区域？</p>\n<p> 2.需求的完备度是否达到这种程度：如果产品满足所有需求，那么它就是可接受的？</p>\n<p> 3.你对全部需求都感觉舒服吗？你是否已经去掉了那些不可能完成的需求—那些只是为了安抚客户和老板的东西？</p>\n<h3 id=\"花费在前期准备上的时间长度\"><a href=\"#花费在前期准备上的时间长度\" class=\"headerlink\" title=\"花费在前期准备上的时间长度\"></a>花费在前期准备上的时间长度</h3><p>花费在问题定义，需求分析，软件架构上的时间依据项目的需要而变化，一般占据10%-20%的工作量和20%-30%的时间</p>\n<h3 id=\"良好的类接口\"><a href=\"#良好的类接口\" class=\"headerlink\" title=\"良好的类接口\"></a>良好的类接口</h3><p>类的基础是抽象数据类型（我之前大部分时候没有使用抽象，只是把相关的方法和变量定义放在了一起，实际上是不符合面向对象变成原则的），抽象数据类型是指一些数据和<br>对这些数据所进行操作的集合。定义抽象类有助于代码规范，提高</p>\n<h3 id=\"创建类的原因\"><a href=\"#创建类的原因\" class=\"headerlink\" title=\"创建类的原因\"></a>创建类的原因</h3><p>（1）为显示世界中的对象建模<br>（2）为抽象的对象建模<br>（3）降低复杂度<br>（4）隔离复杂度<br>（5）隐藏实现细节<br>（6）让代码更易重用<br>（7）把相关的操作包装到一起</p>\n<h3 id=\"应当避免的类\"><a href=\"#应当避免的类\" class=\"headerlink\" title=\"应当避免的类\"></a>应当避免的类</h3><p>（1）避免创建万能类<br>（2）消除无关紧要的类<br>（3）避免用动词命名的类</p>\n<h2 id=\"防御式编程\"><a href=\"#防御式编程\" class=\"headerlink\" title=\"防御式编程\"></a>防御式编程</h2><h3 id=\"三种处理进入垃圾的情况\"><a href=\"#三种处理进入垃圾的情况\" class=\"headerlink\" title=\"三种处理进入垃圾的情况\"></a>三种处理进入垃圾的情况</h3><p>（1）检查所有来源于外部的数据的值<br>（2）检查所有子程序输入参数的值<br>（3）决定如何处理错误的输入数据</p>\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><p>断言是指在开发期间使用的、让程序在运行时进行自检的代码</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>用异常通知程序的其他部分发生了不可忽略的错误<br>只有真正例外的情况下才抛出异常<br>不能用异常来推卸责任<br>避免在构造函数和析构函数中抛出异常，除非在同一地方把他们捕获<br>在恰当的抽象层次抛出异常</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>与《代码整洁之道》对变量的要求几乎一致</p>\n<h2 id=\"代码改善\"><a href=\"#代码改善\" class=\"headerlink\" title=\"代码改善\"></a>代码改善</h2><h3 id=\"软件质量的特性\"><a href=\"#软件质量的特性\" class=\"headerlink\" title=\"软件质量的特性\"></a>软件质量的特性</h3><p>外在特性：<br>（1）正确性：指系统规范、设计和实现方面的错误的稀少程度<br>（2）可用性：指用户学习和使用一个系统的容易程度<br>（3）效率：指软件是否尽可能少地占用系统资源，包括内存和执行时间<br>（4）可靠性：指在制定的必须条件下，一个系统完成所需要功能的能力-应该有很长的平均无故障时间<br>（5）完整性：限制、验证<br>（6）适应性：适应不同执行环境<br>（7）精确性：输出结果的精确程度<br>（8）健壮性：系统在接受无效输入或处于压力环境下持续正常运行的能力<br>内在特性：<br>（1）可维护性：指很容易能够对系统进行修改或新增功能，提高性能及修正缺陷<br>（2）灵活性：系统适用其他系统或者修改难易程度<br>（3）可移植性：运行环境的可移植性<br>（4）可重用性：指系统的某些部分可被应用到其他系统的难易程度<br>（5）可读性：指阅读或理解系统代码的难易程度，尤其是在细节语句的层次上<br>（6）可测试性：指的是可以进行何种程度的单元测试或者系统测试，以及在何种程度上验证系统是否符合需求<br>（7）可理解性：指在系统组织和细节语句的层次上理解整个系统的难易程度</p>\n<h3 id=\"协同构建\"><a href=\"#协同构建\" class=\"headerlink\" title=\"协同构建\"></a>协同构建</h3><h3 id=\"开发者测试\"><a href=\"#开发者测试\" class=\"headerlink\" title=\"开发者测试\"></a>开发者测试</h3><h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><h3 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h3><h3 id=\"软件工艺\"><a href=\"#软件工艺\" class=\"headerlink\" title=\"软件工艺\"></a>软件工艺</h3><h4 id=\"布局与风格\"><a href=\"#布局与风格\" class=\"headerlink\" title=\"布局与风格\"></a>布局与风格</h4>"},{"title":"命令模式","date":"2019-10-04T09:40:10.000Z","_content":"# 基础概念\n## 基础介绍\n（1）概念介绍：    \n命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。    \n（2）概念解析：    \n命令模式将一个请求封装成一个对象，从而可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。    \n## 使用场景\n在某些场合下，需要对行为进行\"记录、撤销/重做、事务\"等处理，需要将\"行为请求者\"与\"行为实现者\"解耦，将一组行为抽象为对象，可以实现二者之间的松耦合。认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。    \n## 关键术语\n（1）received：真正的命令执行对象    \n（2）Command：命令    \n（3）invoker：使用命令对象的入口\n## 实现步骤\n以下以后台k8s删除node节点命令为例\n### a.创建一个命令接口：    \n接口定义接口名称，需要实现的操作名称，命令模式需要的操作为执行命令，后续可根据不同的命令来实现这个接口和执行命令方法。\n```php\n<?php\nabstract class Nodes {\n   public function execute(){}\n}\n?>\n```\n### b.创建一个请求类\n定义拥有的请求方法        \n本例中操作有：    \n（1）列出所有nodes:  kubectl get node    \n（2）删除节点：kubectl delete node $nodeName \n（3）查看对应node上的pods信息: kubectl get pods -o wide | grep $nodeName    \n（4）在删除的node3对应的服务器上执行：kubeadm reset\n```php\n<?php\nclass K8s {\n    public function getNodes()\n    {\n        return 'kubectl get node';\n    }\n    public function delNodes($nodeName)\n    {\n        return \"kubectl delete node $nodeName \";\n    }\n}\n?>\n```\n### c.创建实现接口的实体类\n针对不同的方法实现命令接口。即实现a步骤（创建一个命令接口）所创建的接口，b中的每个请求方法都需要实现对应的实体类。    \n```php\n<?php\nclass GetNodes implements Nodes {\n   private $nodes = new K8s(); \n   public function getK8s():K8s\n   {\n       if (empty($this->nodes)) {\n           $this->nodes = new K8s();\n       }\n       return $this->nodes;\n   }\n   public function execute()\n   {\n       $this->getK8s()->getNodes();\n   }\n}\nclass DelNodes implements Nodes {\n   private $nodes = new K8s(); \n   public function getK8s():K8s\n   {\n       if (empty($this->nodes)) {\n           $this->nodes = new K8s();\n       }\n       return $this->nodes;\n   }\n   public function execute()\n   {\n       $this->getK8s()->delNodes();\n   }\n}\n?>\n```\n### 创建命令调用类\nbroker,用来调用命令\n```php\n<?php\nclass Broker{\n    private $commandList = [];\n    public function addList($k8s)\n    {\n        array_push($this->commandList, $k8s);\n    }\n    public function executeList()\n    {\n        foreach ($this->commandList as $command) {\n            $command->execute();\n        }\n    }\n}\n?>\n```\n### 使用broker类来接受并执行命令\n调用broker类，根据需要（顺序，需要使用的方法等）添加一个执行队列（数组），之后再执行\n```php\n<?php\nclass CommandUse\n{\n    public function executeCommand()\n    {\n        $getNodes = new GetNodes();\n        $delNodes = new DeleNodes();\n        \n        $broker = new Broker();\n        $broker->addList($getNodes);\n        $broker->addList($delNodes);\n        \n        $broker->executeList();\n    }\n}\n?>\n```\n### 执行程序输出结果\n## 命令模式的优点\n（1）比较容易设计出一个命令队列    \n（2）在需要的情况下，可以比较容易的将命令记入日志    \n（3）允许接收请求的一方决定是否要否决请求    \n（4）可以容易地实现对请求的撤销和重做    \n（5）由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易    \n（6）命令模式把请求一个操作的对象和知道怎么执行一个操作的对象分割开    ","source":"_posts/commandMode.md","raw":"---\ntitle: 命令模式\ndate: 2019-10-04 17:40:10\ntags: \n- 概念介绍\ncategories: \n- 学习\n- 设计模式\n---\n# 基础概念\n## 基础介绍\n（1）概念介绍：    \n命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。    \n（2）概念解析：    \n命令模式将一个请求封装成一个对象，从而可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。    \n## 使用场景\n在某些场合下，需要对行为进行\"记录、撤销/重做、事务\"等处理，需要将\"行为请求者\"与\"行为实现者\"解耦，将一组行为抽象为对象，可以实现二者之间的松耦合。认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。    \n## 关键术语\n（1）received：真正的命令执行对象    \n（2）Command：命令    \n（3）invoker：使用命令对象的入口\n## 实现步骤\n以下以后台k8s删除node节点命令为例\n### a.创建一个命令接口：    \n接口定义接口名称，需要实现的操作名称，命令模式需要的操作为执行命令，后续可根据不同的命令来实现这个接口和执行命令方法。\n```php\n<?php\nabstract class Nodes {\n   public function execute(){}\n}\n?>\n```\n### b.创建一个请求类\n定义拥有的请求方法        \n本例中操作有：    \n（1）列出所有nodes:  kubectl get node    \n（2）删除节点：kubectl delete node $nodeName \n（3）查看对应node上的pods信息: kubectl get pods -o wide | grep $nodeName    \n（4）在删除的node3对应的服务器上执行：kubeadm reset\n```php\n<?php\nclass K8s {\n    public function getNodes()\n    {\n        return 'kubectl get node';\n    }\n    public function delNodes($nodeName)\n    {\n        return \"kubectl delete node $nodeName \";\n    }\n}\n?>\n```\n### c.创建实现接口的实体类\n针对不同的方法实现命令接口。即实现a步骤（创建一个命令接口）所创建的接口，b中的每个请求方法都需要实现对应的实体类。    \n```php\n<?php\nclass GetNodes implements Nodes {\n   private $nodes = new K8s(); \n   public function getK8s():K8s\n   {\n       if (empty($this->nodes)) {\n           $this->nodes = new K8s();\n       }\n       return $this->nodes;\n   }\n   public function execute()\n   {\n       $this->getK8s()->getNodes();\n   }\n}\nclass DelNodes implements Nodes {\n   private $nodes = new K8s(); \n   public function getK8s():K8s\n   {\n       if (empty($this->nodes)) {\n           $this->nodes = new K8s();\n       }\n       return $this->nodes;\n   }\n   public function execute()\n   {\n       $this->getK8s()->delNodes();\n   }\n}\n?>\n```\n### 创建命令调用类\nbroker,用来调用命令\n```php\n<?php\nclass Broker{\n    private $commandList = [];\n    public function addList($k8s)\n    {\n        array_push($this->commandList, $k8s);\n    }\n    public function executeList()\n    {\n        foreach ($this->commandList as $command) {\n            $command->execute();\n        }\n    }\n}\n?>\n```\n### 使用broker类来接受并执行命令\n调用broker类，根据需要（顺序，需要使用的方法等）添加一个执行队列（数组），之后再执行\n```php\n<?php\nclass CommandUse\n{\n    public function executeCommand()\n    {\n        $getNodes = new GetNodes();\n        $delNodes = new DeleNodes();\n        \n        $broker = new Broker();\n        $broker->addList($getNodes);\n        $broker->addList($delNodes);\n        \n        $broker->executeList();\n    }\n}\n?>\n```\n### 执行程序输出结果\n## 命令模式的优点\n（1）比较容易设计出一个命令队列    \n（2）在需要的情况下，可以比较容易的将命令记入日志    \n（3）允许接收请求的一方决定是否要否决请求    \n（4）可以容易地实现对请求的撤销和重做    \n（5）由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易    \n（6）命令模式把请求一个操作的对象和知道怎么执行一个操作的对象分割开    ","slug":"commandMode","published":1,"updated":"2021-07-23T01:58:27.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kde001nl0xoe2sjg4bm","content":"<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><h2 id=\"基础介绍\"><a href=\"#基础介绍\" class=\"headerlink\" title=\"基础介绍\"></a>基础介绍</h2><p>（1）概念介绍：<br>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。<br>（2）概念解析：<br>命令模式将一个请求封装成一个对象，从而可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。    </p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>在某些场合下，需要对行为进行”记录、撤销/重做、事务”等处理，需要将”行为请求者”与”行为实现者”解耦，将一组行为抽象为对象，可以实现二者之间的松耦合。认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。    </p>\n<h2 id=\"关键术语\"><a href=\"#关键术语\" class=\"headerlink\" title=\"关键术语\"></a>关键术语</h2><p>（1）received：真正的命令执行对象<br>（2）Command：命令<br>（3）invoker：使用命令对象的入口</p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p>以下以后台k8s删除node节点命令为例</p>\n<h3 id=\"a-创建一个命令接口：\"><a href=\"#a-创建一个命令接口：\" class=\"headerlink\" title=\"a.创建一个命令接口：\"></a>a.创建一个命令接口：</h3><p>接口定义接口名称，需要实现的操作名称，命令模式需要的操作为执行命令，后续可根据不同的命令来实现这个接口和执行命令方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nodes</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"b-创建一个请求类\"><a href=\"#b-创建一个请求类\" class=\"headerlink\" title=\"b.创建一个请求类\"></a>b.创建一个请求类</h3><p>定义拥有的请求方法<br>本例中操作有：<br>（1）列出所有nodes:  kubectl get node<br>（2）删除节点：kubectl delete node $nodeName<br>（3）查看对应node上的pods信息: kubectl get pods -o wide | grep $nodeName<br>（4）在删除的node3对应的服务器上执行：kubeadm reset</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">K8s</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNodes</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'kubectl get node'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delNodes</span><span class=\"params\">($nodeName)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"kubectl delete node $nodeName \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"c-创建实现接口的实体类\"><a href=\"#c-创建实现接口的实体类\" class=\"headerlink\" title=\"c.创建实现接口的实体类\"></a>c.创建实现接口的实体类</h3><p>针对不同的方法实现命令接口。即实现a步骤（创建一个命令接口）所创建的接口，b中的每个请求方法都需要实现对应的实体类。    </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetNodes</span> <span class=\"keyword\">implements</span> <span class=\"title\">Nodes</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> $nodes = <span class=\"keyword\">new</span> K8s(); </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getK8s</span><span class=\"params\">()</span>:<span class=\"title\">K8s</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;nodes)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;nodes = <span class=\"keyword\">new</span> K8s();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;nodes;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;getK8s()-&gt;getNodes();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelNodes</span> <span class=\"keyword\">implements</span> <span class=\"title\">Nodes</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> $nodes = <span class=\"keyword\">new</span> K8s(); </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getK8s</span><span class=\"params\">()</span>:<span class=\"title\">K8s</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;nodes)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;nodes = <span class=\"keyword\">new</span> K8s();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;nodes;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;getK8s()-&gt;delNodes();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建命令调用类\"><a href=\"#创建命令调用类\" class=\"headerlink\" title=\"创建命令调用类\"></a>创建命令调用类</h3><p>broker,用来调用命令</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Broker</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $commandList = [];</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addList</span><span class=\"params\">($k8s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        array_push(<span class=\"keyword\">$this</span>-&gt;commandList, $k8s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;commandList <span class=\"keyword\">as</span> $command) &#123;</span><br><span class=\"line\">            $command-&gt;execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用broker类来接受并执行命令\"><a href=\"#使用broker类来接受并执行命令\" class=\"headerlink\" title=\"使用broker类来接受并执行命令\"></a>使用broker类来接受并执行命令</h3><p>调用broker类，根据需要（顺序，需要使用的方法等）添加一个执行队列（数组），之后再执行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandUse</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeCommand</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $getNodes = <span class=\"keyword\">new</span> GetNodes();</span><br><span class=\"line\">        $delNodes = <span class=\"keyword\">new</span> DeleNodes();</span><br><span class=\"line\">        </span><br><span class=\"line\">        $broker = <span class=\"keyword\">new</span> Broker();</span><br><span class=\"line\">        $broker-&gt;addList($getNodes);</span><br><span class=\"line\">        $broker-&gt;addList($delNodes);</span><br><span class=\"line\">        </span><br><span class=\"line\">        $broker-&gt;executeList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"执行程序输出结果\"><a href=\"#执行程序输出结果\" class=\"headerlink\" title=\"执行程序输出结果\"></a>执行程序输出结果</h3><h2 id=\"命令模式的优点\"><a href=\"#命令模式的优点\" class=\"headerlink\" title=\"命令模式的优点\"></a>命令模式的优点</h2><p>（1）比较容易设计出一个命令队列<br>（2）在需要的情况下，可以比较容易的将命令记入日志<br>（3）允许接收请求的一方决定是否要否决请求<br>（4）可以容易地实现对请求的撤销和重做<br>（5）由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易<br>（6）命令模式把请求一个操作的对象和知道怎么执行一个操作的对象分割开    </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><h2 id=\"基础介绍\"><a href=\"#基础介绍\" class=\"headerlink\" title=\"基础介绍\"></a>基础介绍</h2><p>（1）概念介绍：<br>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。<br>（2）概念解析：<br>命令模式将一个请求封装成一个对象，从而可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。    </p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>在某些场合下，需要对行为进行”记录、撤销/重做、事务”等处理，需要将”行为请求者”与”行为实现者”解耦，将一组行为抽象为对象，可以实现二者之间的松耦合。认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。    </p>\n<h2 id=\"关键术语\"><a href=\"#关键术语\" class=\"headerlink\" title=\"关键术语\"></a>关键术语</h2><p>（1）received：真正的命令执行对象<br>（2）Command：命令<br>（3）invoker：使用命令对象的入口</p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p>以下以后台k8s删除node节点命令为例</p>\n<h3 id=\"a-创建一个命令接口：\"><a href=\"#a-创建一个命令接口：\" class=\"headerlink\" title=\"a.创建一个命令接口：\"></a>a.创建一个命令接口：</h3><p>接口定义接口名称，需要实现的操作名称，命令模式需要的操作为执行命令，后续可根据不同的命令来实现这个接口和执行命令方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Nodes</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"b-创建一个请求类\"><a href=\"#b-创建一个请求类\" class=\"headerlink\" title=\"b.创建一个请求类\"></a>b.创建一个请求类</h3><p>定义拥有的请求方法<br>本例中操作有：<br>（1）列出所有nodes:  kubectl get node<br>（2）删除节点：kubectl delete node $nodeName<br>（3）查看对应node上的pods信息: kubectl get pods -o wide | grep $nodeName<br>（4）在删除的node3对应的服务器上执行：kubeadm reset</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">K8s</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNodes</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'kubectl get node'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delNodes</span><span class=\"params\">($nodeName)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"kubectl delete node $nodeName \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"c-创建实现接口的实体类\"><a href=\"#c-创建实现接口的实体类\" class=\"headerlink\" title=\"c.创建实现接口的实体类\"></a>c.创建实现接口的实体类</h3><p>针对不同的方法实现命令接口。即实现a步骤（创建一个命令接口）所创建的接口，b中的每个请求方法都需要实现对应的实体类。    </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetNodes</span> <span class=\"keyword\">implements</span> <span class=\"title\">Nodes</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> $nodes = <span class=\"keyword\">new</span> K8s(); </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getK8s</span><span class=\"params\">()</span>:<span class=\"title\">K8s</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;nodes)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;nodes = <span class=\"keyword\">new</span> K8s();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;nodes;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;getK8s()-&gt;getNodes();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelNodes</span> <span class=\"keyword\">implements</span> <span class=\"title\">Nodes</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> $nodes = <span class=\"keyword\">new</span> K8s(); </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getK8s</span><span class=\"params\">()</span>:<span class=\"title\">K8s</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;nodes)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;nodes = <span class=\"keyword\">new</span> K8s();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;nodes;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;getK8s()-&gt;delNodes();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建命令调用类\"><a href=\"#创建命令调用类\" class=\"headerlink\" title=\"创建命令调用类\"></a>创建命令调用类</h3><p>broker,用来调用命令</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Broker</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $commandList = [];</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addList</span><span class=\"params\">($k8s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        array_push(<span class=\"keyword\">$this</span>-&gt;commandList, $k8s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;commandList <span class=\"keyword\">as</span> $command) &#123;</span><br><span class=\"line\">            $command-&gt;execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用broker类来接受并执行命令\"><a href=\"#使用broker类来接受并执行命令\" class=\"headerlink\" title=\"使用broker类来接受并执行命令\"></a>使用broker类来接受并执行命令</h3><p>调用broker类，根据需要（顺序，需要使用的方法等）添加一个执行队列（数组），之后再执行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandUse</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeCommand</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $getNodes = <span class=\"keyword\">new</span> GetNodes();</span><br><span class=\"line\">        $delNodes = <span class=\"keyword\">new</span> DeleNodes();</span><br><span class=\"line\">        </span><br><span class=\"line\">        $broker = <span class=\"keyword\">new</span> Broker();</span><br><span class=\"line\">        $broker-&gt;addList($getNodes);</span><br><span class=\"line\">        $broker-&gt;addList($delNodes);</span><br><span class=\"line\">        </span><br><span class=\"line\">        $broker-&gt;executeList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"执行程序输出结果\"><a href=\"#执行程序输出结果\" class=\"headerlink\" title=\"执行程序输出结果\"></a>执行程序输出结果</h3><h2 id=\"命令模式的优点\"><a href=\"#命令模式的优点\" class=\"headerlink\" title=\"命令模式的优点\"></a>命令模式的优点</h2><p>（1）比较容易设计出一个命令队列<br>（2）在需要的情况下，可以比较容易的将命令记入日志<br>（3）允许接收请求的一方决定是否要否决请求<br>（4）可以容易地实现对请求的撤销和重做<br>（5）由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易<br>（6）命令模式把请求一个操作的对象和知道怎么执行一个操作的对象分割开    </p>\n"},{"title":"crontab基本使用","date":"2019-04-10T10:27:44.000Z","_content":"## 1 简介\ncrond 是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务 工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。\n## 2 格式\nminute hour day month week command\n## 3 操作\ncrontab -l:列出所有任务\n\n## laravel 定时任务\n**原文路径**\n```https://learnku.com/docs/laravel/5.4/scheduling/1257```\n## 其他解决方式\n1 supervisor\n**举例**\n```\n[program:finance_svcs_autoreconciliation]\ncommand=php /opt/app/nginx/html/qa6/financesvcs/artisan queue:work beanstalkd --queue=autoreconciliation_broadcast --daemon\ndirectory=/opt/app/nginx/html/qa6/financesvcs\nautostart=true\nautorestart=true\nuser=apache\nnumprocs=1\nredirect_stderr=true\nstdout_logfile=/var/log/supervisor/qa1/%(program_name)s-stdout.log\nstdout_logfile_maxbytes=10MB\nstdout_logfile_backups=10\n```\n```\n\n```\n","source":"_posts/crontab.md","raw":"---\ntitle: crontab基本使用\ndate: 2019-04-10 18:27:44\ncategories: \n- linux\n- crontab\n---\n## 1 简介\ncrond 是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务 工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。\n## 2 格式\nminute hour day month week command\n## 3 操作\ncrontab -l:列出所有任务\n\n## laravel 定时任务\n**原文路径**\n```https://learnku.com/docs/laravel/5.4/scheduling/1257```\n## 其他解决方式\n1 supervisor\n**举例**\n```\n[program:finance_svcs_autoreconciliation]\ncommand=php /opt/app/nginx/html/qa6/financesvcs/artisan queue:work beanstalkd --queue=autoreconciliation_broadcast --daemon\ndirectory=/opt/app/nginx/html/qa6/financesvcs\nautostart=true\nautorestart=true\nuser=apache\nnumprocs=1\nredirect_stderr=true\nstdout_logfile=/var/log/supervisor/qa1/%(program_name)s-stdout.log\nstdout_logfile_maxbytes=10MB\nstdout_logfile_backups=10\n```\n```\n\n```\n","slug":"crontab","published":1,"updated":"2021-07-23T01:58:27.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdf001rl0xoepbmg6j2","content":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1 简介\"></a>1 简介</h2><p>crond 是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务 工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p>\n<h2 id=\"2-格式\"><a href=\"#2-格式\" class=\"headerlink\" title=\"2 格式\"></a>2 格式</h2><p>minute hour day month week command</p>\n<h2 id=\"3-操作\"><a href=\"#3-操作\" class=\"headerlink\" title=\"3 操作\"></a>3 操作</h2><p>crontab -l:列出所有任务</p>\n<h2 id=\"laravel-定时任务\"><a href=\"#laravel-定时任务\" class=\"headerlink\" title=\"laravel 定时任务\"></a>laravel 定时任务</h2><p><strong>原文路径</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 其他解决方式</span><br><span class=\"line\">1 supervisor</span><br><span class=\"line\">**举例**</span><br></pre></td></tr></table></figure>\n<p>[program:finance_svcs_autoreconciliation]<br>command=php /opt/app/nginx/html/qa6/financesvcs/artisan queue:work beanstalkd –queue=autoreconciliation_broadcast –daemon<br>directory=/opt/app/nginx/html/qa6/financesvcs<br>autostart=true<br>autorestart=true<br>user=apache<br>numprocs=1<br>redirect_stderr=true<br>stdout_logfile=/var/log/supervisor/qa1/%(program_name)s-stdout.log<br>stdout_logfile_maxbytes=10MB<br>stdout_logfile_backups=10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1 简介\"></a>1 简介</h2><p>crond 是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务 工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p>\n<h2 id=\"2-格式\"><a href=\"#2-格式\" class=\"headerlink\" title=\"2 格式\"></a>2 格式</h2><p>minute hour day month week command</p>\n<h2 id=\"3-操作\"><a href=\"#3-操作\" class=\"headerlink\" title=\"3 操作\"></a>3 操作</h2><p>crontab -l:列出所有任务</p>\n<h2 id=\"laravel-定时任务\"><a href=\"#laravel-定时任务\" class=\"headerlink\" title=\"laravel 定时任务\"></a>laravel 定时任务</h2><p><strong>原文路径</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 其他解决方式</span><br><span class=\"line\">1 supervisor</span><br><span class=\"line\">**举例**</span><br></pre></td></tr></table></figure>\n<p>[program:finance_svcs_autoreconciliation]<br>command=php /opt/app/nginx/html/qa6/financesvcs/artisan queue:work beanstalkd –queue=autoreconciliation_broadcast –daemon<br>directory=/opt/app/nginx/html/qa6/financesvcs<br>autostart=true<br>autorestart=true<br>user=apache<br>numprocs=1<br>redirect_stderr=true<br>stdout_logfile=/var/log/supervisor/qa1/%(program_name)s-stdout.log<br>stdout_logfile_maxbytes=10MB<br>stdout_logfile_backups=10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>\n"},{"title":"数据结构学习笔记-1","date":"2021-07-20T08:34:10.000Z","_content":"数据结构学习系列都来自于中国大学MOOC上的浙江大学数据结构学习课程。原课程代码全部采用C语言实现，由于本菜平时最擅长（zhihuiyong）使用php，因此所有算法全部翻译成了php实现。课程链接：[数据结构](https://www.icourse163.org/learn/ZJU-93001?tid=1464647442#/learn/announce)    \n全文已同步发布到[CSDN](https://blog.csdn.net/qq_28391061/article/details/118090942)\n## 定义\n（1）数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义和相关的函数来给出    \n（2）数据结构是ADT(abstruct data type)的物理实现    \n（3）数据结构是计算机存储，组织数据的方式，通常情况下，精心选择的数据结构可以带来最有效率的算法\n## 示例\n### 写程序实现一个函数printN，打印从1-N之间的所有正整数\n。以下是两种实现方式的php实现代码：\n```php\n<?php\nfunction printN($n)\n{\n    $i = 0;\n    for($i = 0; $i < $n; $i++)\n        {\n        echo $i. \"\\n\\r\";\n}\n}\n$begin1 = microtime();\nprintN(10000);\n$end1 = microtime();\n$time1 = $end1 - $begin1;\n\n\nfunction printM($m)\n{\n    if ($m) {\n        printM($m - 1);\n        echo $m. \"\\n\\r\";\n}\n}\n$begin2 = microtime();\nprintM(10000);\n$end2 = microtime();\n$time2 = $end2 - $begin2;\n\necho $time2 - $time1;\n```\n递归和直接循环打印都可以实现，但是递归当数字大于1w左右就失败了，因为递归对空间的占用十分恐怖。解决问题方法的效率，也与空间的占用效率是有关的。\n### 写程序计算给定多项式在给定点x处的值\n多项式：f(x) = a₀ + a₁x + a₂x² ... + aₙ₋₁xⁿ⁻¹ + aₙxⁿ    \n使用php的两种实现方式：\n```php\n<?php\n\nfunction getPoly(int $n, array $a, float $x)\n{\n    $res = $a[0];\n    for ($i = 1; $i <= $n; $i++) {\n        $res += $a[$i] * pow($x, $i);\n    }\n    return $res;\n}\n$poliArr = [1, 2, 3, 4, 5];\n$n = count($poliArr) - 1;\n$x = 0.5;\n\nfunction getPoly2(int $n, array $a, float $x)\n{\n    $p = $a[$n];\n    for ($i = $n; $i > 0; $i--)\n    {\n        $p = $a[$i - 1] + $x * $p;\n    }\n    return $p;\n}\necho getPoly($n, $poliArr, $x);\necho \"\\n\\r\";\necho getPoly2($n, $poliArr, $x);\n```\ngetPoly比getPoly2的运行速度差了接近一个数量级，说明解决问题方法的效率，跟算法的精妙程度有关。\n## 总结\n数据结构：数据在计算机中的组织方式    \n数据对象必定与一系列加在其上的操作相关联，完成这些操作所用的方法叫算法    \n### 抽象数据类型(Abstract Data Type)\n#### 数据类型\n数据对象集、数据集合相关联的操作集\n#### 抽象\n描述数据类型的方法不依赖于具体实现，与存放数据的机器无关，与数据存储的物理结构无关，跟实现操作的算法和编程语言均无关，只描述数据类型是什么，不涉及如何做到的问题\n### 算法\n（1）一个有限指令集    \n（2）接受一些输入（有时不需要输入）    \n（3）产生输出    \n（4）一定在有限步骤之后终止    \n（5）每一条指令必须    \na 有充分明确的目标，不可以有歧义     \nb 要在计算机能处理的范围之内      \nc 描述应不依赖于任何一种计算机的语言以及具体的实现方式\n#### 什么是好的算法\n使用空间复杂度S(n)和时间复杂度T(n)来衡量     \n在分析一般算法的效率时，通常关心两个复杂度：最坏情况复杂度，平均复杂度\n","source":"_posts/dataStruct_01.md","raw":"---\ntitle: 数据结构学习笔记-1\ndate: 2021-07-20 16:34:10\ntags: \n- 学习\ncategories: \n- 学习\n- 数据结构\n---\n数据结构学习系列都来自于中国大学MOOC上的浙江大学数据结构学习课程。原课程代码全部采用C语言实现，由于本菜平时最擅长（zhihuiyong）使用php，因此所有算法全部翻译成了php实现。课程链接：[数据结构](https://www.icourse163.org/learn/ZJU-93001?tid=1464647442#/learn/announce)    \n全文已同步发布到[CSDN](https://blog.csdn.net/qq_28391061/article/details/118090942)\n## 定义\n（1）数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义和相关的函数来给出    \n（2）数据结构是ADT(abstruct data type)的物理实现    \n（3）数据结构是计算机存储，组织数据的方式，通常情况下，精心选择的数据结构可以带来最有效率的算法\n## 示例\n### 写程序实现一个函数printN，打印从1-N之间的所有正整数\n。以下是两种实现方式的php实现代码：\n```php\n<?php\nfunction printN($n)\n{\n    $i = 0;\n    for($i = 0; $i < $n; $i++)\n        {\n        echo $i. \"\\n\\r\";\n}\n}\n$begin1 = microtime();\nprintN(10000);\n$end1 = microtime();\n$time1 = $end1 - $begin1;\n\n\nfunction printM($m)\n{\n    if ($m) {\n        printM($m - 1);\n        echo $m. \"\\n\\r\";\n}\n}\n$begin2 = microtime();\nprintM(10000);\n$end2 = microtime();\n$time2 = $end2 - $begin2;\n\necho $time2 - $time1;\n```\n递归和直接循环打印都可以实现，但是递归当数字大于1w左右就失败了，因为递归对空间的占用十分恐怖。解决问题方法的效率，也与空间的占用效率是有关的。\n### 写程序计算给定多项式在给定点x处的值\n多项式：f(x) = a₀ + a₁x + a₂x² ... + aₙ₋₁xⁿ⁻¹ + aₙxⁿ    \n使用php的两种实现方式：\n```php\n<?php\n\nfunction getPoly(int $n, array $a, float $x)\n{\n    $res = $a[0];\n    for ($i = 1; $i <= $n; $i++) {\n        $res += $a[$i] * pow($x, $i);\n    }\n    return $res;\n}\n$poliArr = [1, 2, 3, 4, 5];\n$n = count($poliArr) - 1;\n$x = 0.5;\n\nfunction getPoly2(int $n, array $a, float $x)\n{\n    $p = $a[$n];\n    for ($i = $n; $i > 0; $i--)\n    {\n        $p = $a[$i - 1] + $x * $p;\n    }\n    return $p;\n}\necho getPoly($n, $poliArr, $x);\necho \"\\n\\r\";\necho getPoly2($n, $poliArr, $x);\n```\ngetPoly比getPoly2的运行速度差了接近一个数量级，说明解决问题方法的效率，跟算法的精妙程度有关。\n## 总结\n数据结构：数据在计算机中的组织方式    \n数据对象必定与一系列加在其上的操作相关联，完成这些操作所用的方法叫算法    \n### 抽象数据类型(Abstract Data Type)\n#### 数据类型\n数据对象集、数据集合相关联的操作集\n#### 抽象\n描述数据类型的方法不依赖于具体实现，与存放数据的机器无关，与数据存储的物理结构无关，跟实现操作的算法和编程语言均无关，只描述数据类型是什么，不涉及如何做到的问题\n### 算法\n（1）一个有限指令集    \n（2）接受一些输入（有时不需要输入）    \n（3）产生输出    \n（4）一定在有限步骤之后终止    \n（5）每一条指令必须    \na 有充分明确的目标，不可以有歧义     \nb 要在计算机能处理的范围之内      \nc 描述应不依赖于任何一种计算机的语言以及具体的实现方式\n#### 什么是好的算法\n使用空间复杂度S(n)和时间复杂度T(n)来衡量     \n在分析一般算法的效率时，通常关心两个复杂度：最坏情况复杂度，平均复杂度\n","slug":"dataStruct_01","published":1,"updated":"2021-07-23T02:09:58.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdg001ul0xo7ozj4l99","content":"<p>数据结构学习系列都来自于中国大学MOOC上的浙江大学数据结构学习课程。原课程代码全部采用C语言实现，由于本菜平时最擅长（zhihuiyong）使用php，因此所有算法全部翻译成了php实现。课程链接：<a href=\"https://www.icourse163.org/learn/ZJU-93001?tid=1464647442#/learn/announce\" target=\"_blank\" rel=\"noopener\">数据结构</a><br>全文已同步发布到<a href=\"https://blog.csdn.net/qq_28391061/article/details/118090942\" target=\"_blank\" rel=\"noopener\">CSDN</a></p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>（1）数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义和相关的函数来给出<br>（2）数据结构是ADT(abstruct data type)的物理实现<br>（3）数据结构是计算机存储，组织数据的方式，通常情况下，精心选择的数据结构可以带来最有效率的算法</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"写程序实现一个函数printN，打印从1-N之间的所有正整数\"><a href=\"#写程序实现一个函数printN，打印从1-N之间的所有正整数\" class=\"headerlink\" title=\"写程序实现一个函数printN，打印从1-N之间的所有正整数\"></a>写程序实现一个函数printN，打印从1-N之间的所有正整数</h3><p>。以下是两种实现方式的php实现代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printN</span><span class=\"params\">($n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; $n; $i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $i. <span class=\"string\">\"\\n\\r\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$begin1 = microtime();</span><br><span class=\"line\">printN(<span class=\"number\">10000</span>);</span><br><span class=\"line\">$end1 = microtime();</span><br><span class=\"line\">$time1 = $end1 - $begin1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printM</span><span class=\"params\">($m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($m) &#123;</span><br><span class=\"line\">        printM($m - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $m. <span class=\"string\">\"\\n\\r\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$begin2 = microtime();</span><br><span class=\"line\">printM(<span class=\"number\">10000</span>);</span><br><span class=\"line\">$end2 = microtime();</span><br><span class=\"line\">$time2 = $end2 - $begin2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $time2 - $time1;</span><br></pre></td></tr></table></figure>\n<p>递归和直接循环打印都可以实现，但是递归当数字大于1w左右就失败了，因为递归对空间的占用十分恐怖。解决问题方法的效率，也与空间的占用效率是有关的。</p>\n<h3 id=\"写程序计算给定多项式在给定点x处的值\"><a href=\"#写程序计算给定多项式在给定点x处的值\" class=\"headerlink\" title=\"写程序计算给定多项式在给定点x处的值\"></a>写程序计算给定多项式在给定点x处的值</h3><p>多项式：f(x) = a₀ + a₁x + a₂x² … + aₙ₋₁xⁿ⁻¹ + aₙxⁿ<br>使用php的两种实现方式：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPoly</span><span class=\"params\">(int $n, array $a, float $x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $res = $a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt;= $n; $i++) &#123;</span><br><span class=\"line\">        $res += $a[$i] * pow($x, $i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$poliArr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">$n = count($poliArr) - <span class=\"number\">1</span>;</span><br><span class=\"line\">$x = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPoly2</span><span class=\"params\">(int $n, array $a, float $x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $p = $a[$n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = $n; $i &gt; <span class=\"number\">0</span>; $i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $p = $a[$i - <span class=\"number\">1</span>] + $x * $p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> getPoly($n, $poliArr, $x);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\\r\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> getPoly2($n, $poliArr, $x);</span><br></pre></td></tr></table></figure>\n<p>getPoly比getPoly2的运行速度差了接近一个数量级，说明解决问题方法的效率，跟算法的精妙程度有关。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>数据结构：数据在计算机中的组织方式<br>数据对象必定与一系列加在其上的操作相关联，完成这些操作所用的方法叫算法    </p>\n<h3 id=\"抽象数据类型-Abstract-Data-Type\"><a href=\"#抽象数据类型-Abstract-Data-Type\" class=\"headerlink\" title=\"抽象数据类型(Abstract Data Type)\"></a>抽象数据类型(Abstract Data Type)</h3><h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>数据对象集、数据集合相关联的操作集</p>\n<h4 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h4><p>描述数据类型的方法不依赖于具体实现，与存放数据的机器无关，与数据存储的物理结构无关，跟实现操作的算法和编程语言均无关，只描述数据类型是什么，不涉及如何做到的问题</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>（1）一个有限指令集<br>（2）接受一些输入（有时不需要输入）<br>（3）产生输出<br>（4）一定在有限步骤之后终止<br>（5）每一条指令必须<br>a 有充分明确的目标，不可以有歧义<br>b 要在计算机能处理的范围之内<br>c 描述应不依赖于任何一种计算机的语言以及具体的实现方式</p>\n<h4 id=\"什么是好的算法\"><a href=\"#什么是好的算法\" class=\"headerlink\" title=\"什么是好的算法\"></a>什么是好的算法</h4><p>使用空间复杂度S(n)和时间复杂度T(n)来衡量<br>在分析一般算法的效率时，通常关心两个复杂度：最坏情况复杂度，平均复杂度</p>\n","site":{"data":{}},"excerpt":"","more":"<p>数据结构学习系列都来自于中国大学MOOC上的浙江大学数据结构学习课程。原课程代码全部采用C语言实现，由于本菜平时最擅长（zhihuiyong）使用php，因此所有算法全部翻译成了php实现。课程链接：<a href=\"https://www.icourse163.org/learn/ZJU-93001?tid=1464647442#/learn/announce\" target=\"_blank\" rel=\"noopener\">数据结构</a><br>全文已同步发布到<a href=\"https://blog.csdn.net/qq_28391061/article/details/118090942\" target=\"_blank\" rel=\"noopener\">CSDN</a></p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>（1）数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义和相关的函数来给出<br>（2）数据结构是ADT(abstruct data type)的物理实现<br>（3）数据结构是计算机存储，组织数据的方式，通常情况下，精心选择的数据结构可以带来最有效率的算法</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"写程序实现一个函数printN，打印从1-N之间的所有正整数\"><a href=\"#写程序实现一个函数printN，打印从1-N之间的所有正整数\" class=\"headerlink\" title=\"写程序实现一个函数printN，打印从1-N之间的所有正整数\"></a>写程序实现一个函数printN，打印从1-N之间的所有正整数</h3><p>。以下是两种实现方式的php实现代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printN</span><span class=\"params\">($n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; $n; $i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $i. <span class=\"string\">\"\\n\\r\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$begin1 = microtime();</span><br><span class=\"line\">printN(<span class=\"number\">10000</span>);</span><br><span class=\"line\">$end1 = microtime();</span><br><span class=\"line\">$time1 = $end1 - $begin1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printM</span><span class=\"params\">($m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($m) &#123;</span><br><span class=\"line\">        printM($m - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $m. <span class=\"string\">\"\\n\\r\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$begin2 = microtime();</span><br><span class=\"line\">printM(<span class=\"number\">10000</span>);</span><br><span class=\"line\">$end2 = microtime();</span><br><span class=\"line\">$time2 = $end2 - $begin2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $time2 - $time1;</span><br></pre></td></tr></table></figure>\n<p>递归和直接循环打印都可以实现，但是递归当数字大于1w左右就失败了，因为递归对空间的占用十分恐怖。解决问题方法的效率，也与空间的占用效率是有关的。</p>\n<h3 id=\"写程序计算给定多项式在给定点x处的值\"><a href=\"#写程序计算给定多项式在给定点x处的值\" class=\"headerlink\" title=\"写程序计算给定多项式在给定点x处的值\"></a>写程序计算给定多项式在给定点x处的值</h3><p>多项式：f(x) = a₀ + a₁x + a₂x² … + aₙ₋₁xⁿ⁻¹ + aₙxⁿ<br>使用php的两种实现方式：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPoly</span><span class=\"params\">(int $n, array $a, float $x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $res = $a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt;= $n; $i++) &#123;</span><br><span class=\"line\">        $res += $a[$i] * pow($x, $i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$poliArr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">$n = count($poliArr) - <span class=\"number\">1</span>;</span><br><span class=\"line\">$x = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPoly2</span><span class=\"params\">(int $n, array $a, float $x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $p = $a[$n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = $n; $i &gt; <span class=\"number\">0</span>; $i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $p = $a[$i - <span class=\"number\">1</span>] + $x * $p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> getPoly($n, $poliArr, $x);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"\\n\\r\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> getPoly2($n, $poliArr, $x);</span><br></pre></td></tr></table></figure>\n<p>getPoly比getPoly2的运行速度差了接近一个数量级，说明解决问题方法的效率，跟算法的精妙程度有关。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>数据结构：数据在计算机中的组织方式<br>数据对象必定与一系列加在其上的操作相关联，完成这些操作所用的方法叫算法    </p>\n<h3 id=\"抽象数据类型-Abstract-Data-Type\"><a href=\"#抽象数据类型-Abstract-Data-Type\" class=\"headerlink\" title=\"抽象数据类型(Abstract Data Type)\"></a>抽象数据类型(Abstract Data Type)</h3><h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>数据对象集、数据集合相关联的操作集</p>\n<h4 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h4><p>描述数据类型的方法不依赖于具体实现，与存放数据的机器无关，与数据存储的物理结构无关，跟实现操作的算法和编程语言均无关，只描述数据类型是什么，不涉及如何做到的问题</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>（1）一个有限指令集<br>（2）接受一些输入（有时不需要输入）<br>（3）产生输出<br>（4）一定在有限步骤之后终止<br>（5）每一条指令必须<br>a 有充分明确的目标，不可以有歧义<br>b 要在计算机能处理的范围之内<br>c 描述应不依赖于任何一种计算机的语言以及具体的实现方式</p>\n<h4 id=\"什么是好的算法\"><a href=\"#什么是好的算法\" class=\"headerlink\" title=\"什么是好的算法\"></a>什么是好的算法</h4><p>使用空间复杂度S(n)和时间复杂度T(n)来衡量<br>在分析一般算法的效率时，通常关心两个复杂度：最坏情况复杂度，平均复杂度</p>\n"},{"title":"基础介绍","date":"2019-07-22T02:03:10.000Z","_content":"#基础介绍\n## 设计具备的特性\n（1）应该对手头的问题有针对性，同时对将来的问题和需求也要有足够的通用性；    \n（2）避免重复设计或尽可能少做重复设计\n## 什么是设计模式\n### 模式四要素\n#### 模式名称\n助记名，使用一两个词来描述模式的问题、解决方案和效果    \n#### 问题\n描述了应该在何时使用设计模式\n#### 解决方案\n描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式\n#### 效果\n描述了模式应用的效果及使用模式应权衡的问题\n## 模式三种分类\n### 创建型\n与对象的创建有关，在软件工程中，创建型设计模式是处理对象创建机制的设计模式，试图以适当的方式来创建对象。对象创建的基本形式可能会带来设计问题，亦或增加了设计的复杂度。创建型设计模式通过控制这个对象的创建方式来解决此问题。\n### 结构型\n处理类或对象的组合，通过识别实体之间关系来简化设计的设计模式。\n### 行为型\n对类或对象怎样交互和怎样分配职责进行描述，识别对象之间的通用通信模式并实现这些模式的设计模式。 通过这样做，这些模式增加了执行此通信的灵活性。\n","source":"_posts/dePat.md","raw":"---\ntitle: 基础介绍\ndate: 2019-07-22 10:03:10\ntags: \n- 概念介绍\ncategories: \n- 学习\n- 设计模式\n---\n#基础介绍\n## 设计具备的特性\n（1）应该对手头的问题有针对性，同时对将来的问题和需求也要有足够的通用性；    \n（2）避免重复设计或尽可能少做重复设计\n## 什么是设计模式\n### 模式四要素\n#### 模式名称\n助记名，使用一两个词来描述模式的问题、解决方案和效果    \n#### 问题\n描述了应该在何时使用设计模式\n#### 解决方案\n描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式\n#### 效果\n描述了模式应用的效果及使用模式应权衡的问题\n## 模式三种分类\n### 创建型\n与对象的创建有关，在软件工程中，创建型设计模式是处理对象创建机制的设计模式，试图以适当的方式来创建对象。对象创建的基本形式可能会带来设计问题，亦或增加了设计的复杂度。创建型设计模式通过控制这个对象的创建方式来解决此问题。\n### 结构型\n处理类或对象的组合，通过识别实体之间关系来简化设计的设计模式。\n### 行为型\n对类或对象怎样交互和怎样分配职责进行描述，识别对象之间的通用通信模式并实现这些模式的设计模式。 通过这样做，这些模式增加了执行此通信的灵活性。\n","slug":"dePat","published":1,"updated":"2021-07-23T01:58:27.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdh001yl0xogk4t9x7z","content":"<p>#基础介绍</p>\n<h2 id=\"设计具备的特性\"><a href=\"#设计具备的特性\" class=\"headerlink\" title=\"设计具备的特性\"></a>设计具备的特性</h2><p>（1）应该对手头的问题有针对性，同时对将来的问题和需求也要有足够的通用性；<br>（2）避免重复设计或尽可能少做重复设计</p>\n<h2 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h2><h3 id=\"模式四要素\"><a href=\"#模式四要素\" class=\"headerlink\" title=\"模式四要素\"></a>模式四要素</h3><h4 id=\"模式名称\"><a href=\"#模式名称\" class=\"headerlink\" title=\"模式名称\"></a>模式名称</h4><p>助记名，使用一两个词来描述模式的问题、解决方案和效果    </p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>描述了应该在何时使用设计模式</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式</p>\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p>描述了模式应用的效果及使用模式应权衡的问题</p>\n<h2 id=\"模式三种分类\"><a href=\"#模式三种分类\" class=\"headerlink\" title=\"模式三种分类\"></a>模式三种分类</h2><h3 id=\"创建型\"><a href=\"#创建型\" class=\"headerlink\" title=\"创建型\"></a>创建型</h3><p>与对象的创建有关，在软件工程中，创建型设计模式是处理对象创建机制的设计模式，试图以适当的方式来创建对象。对象创建的基本形式可能会带来设计问题，亦或增加了设计的复杂度。创建型设计模式通过控制这个对象的创建方式来解决此问题。</p>\n<h3 id=\"结构型\"><a href=\"#结构型\" class=\"headerlink\" title=\"结构型\"></a>结构型</h3><p>处理类或对象的组合，通过识别实体之间关系来简化设计的设计模式。</p>\n<h3 id=\"行为型\"><a href=\"#行为型\" class=\"headerlink\" title=\"行为型\"></a>行为型</h3><p>对类或对象怎样交互和怎样分配职责进行描述，识别对象之间的通用通信模式并实现这些模式的设计模式。 通过这样做，这些模式增加了执行此通信的灵活性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#基础介绍</p>\n<h2 id=\"设计具备的特性\"><a href=\"#设计具备的特性\" class=\"headerlink\" title=\"设计具备的特性\"></a>设计具备的特性</h2><p>（1）应该对手头的问题有针对性，同时对将来的问题和需求也要有足够的通用性；<br>（2）避免重复设计或尽可能少做重复设计</p>\n<h2 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h2><h3 id=\"模式四要素\"><a href=\"#模式四要素\" class=\"headerlink\" title=\"模式四要素\"></a>模式四要素</h3><h4 id=\"模式名称\"><a href=\"#模式名称\" class=\"headerlink\" title=\"模式名称\"></a>模式名称</h4><p>助记名，使用一两个词来描述模式的问题、解决方案和效果    </p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>描述了应该在何时使用设计模式</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式</p>\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p>描述了模式应用的效果及使用模式应权衡的问题</p>\n<h2 id=\"模式三种分类\"><a href=\"#模式三种分类\" class=\"headerlink\" title=\"模式三种分类\"></a>模式三种分类</h2><h3 id=\"创建型\"><a href=\"#创建型\" class=\"headerlink\" title=\"创建型\"></a>创建型</h3><p>与对象的创建有关，在软件工程中，创建型设计模式是处理对象创建机制的设计模式，试图以适当的方式来创建对象。对象创建的基本形式可能会带来设计问题，亦或增加了设计的复杂度。创建型设计模式通过控制这个对象的创建方式来解决此问题。</p>\n<h3 id=\"结构型\"><a href=\"#结构型\" class=\"headerlink\" title=\"结构型\"></a>结构型</h3><p>处理类或对象的组合，通过识别实体之间关系来简化设计的设计模式。</p>\n<h3 id=\"行为型\"><a href=\"#行为型\" class=\"headerlink\" title=\"行为型\"></a>行为型</h3><p>对类或对象怎样交互和怎样分配职责进行描述，识别对象之间的通用通信模式并实现这些模式的设计模式。 通过这样做，这些模式增加了执行此通信的灵活性。</p>\n"},{"title":"demo实例","date":"2019-07-18T01:37:10.000Z","_content":"## js正则表达式\n```javascript\nlet patt = /[顺丰]/;\n      let reg = new RegExp(patt, 'i');\n      const company = (reg.test(record.remark) === true) ? 'shunfeng' : 'annengwuliu'\n      console.log('re test-=-----', company);\n      const num = record.remark.replace(/[^0-9]/ig, \"\")\n```\n## 递归读取层级json\n```javascript\ngetAllKey (obj: any, name: string, moduleName?: string): any[] {\n  const arr: any[] = []\n    if (Object.keys(obj)) {\n      let keys = Object.keys(obj);\n      let i = 0;\n      return keys.map((items) => {\n        i++;\n        if (obj[items] instanceof Object) {\n          // console.log(\"obj[items]:\", items);\n          let itemRes = items;\n          if (obj[items]['type']) {\n            // console.log('it is number:', obj[items]['type']);\n            itemRes = obj[items]['type'];\n          }\n          const names = name + '-' + itemRes\n          return this.getAllKey(obj[items], names, moduleName);\n        } else {\n          // console.log('items:', name + '-' + items);\n          const resItems = name + '-' + items;\n          // console.log('split array:', resItems.split('-'));\n          if (resItems == moduleName) {\n            return this.handleRender(resItems, treeRule.modules, moduleName, i);\n          }\n        }\n      });\n    }\nconsole.log('arr', arr)\n    return arr\n}\n```\n","source":"_posts/demo_01.md","raw":"---\ntitle: demo实例\ndate: 2019-07-18 09:37:10\ntags: \n- demo\n---\n## js正则表达式\n```javascript\nlet patt = /[顺丰]/;\n      let reg = new RegExp(patt, 'i');\n      const company = (reg.test(record.remark) === true) ? 'shunfeng' : 'annengwuliu'\n      console.log('re test-=-----', company);\n      const num = record.remark.replace(/[^0-9]/ig, \"\")\n```\n## 递归读取层级json\n```javascript\ngetAllKey (obj: any, name: string, moduleName?: string): any[] {\n  const arr: any[] = []\n    if (Object.keys(obj)) {\n      let keys = Object.keys(obj);\n      let i = 0;\n      return keys.map((items) => {\n        i++;\n        if (obj[items] instanceof Object) {\n          // console.log(\"obj[items]:\", items);\n          let itemRes = items;\n          if (obj[items]['type']) {\n            // console.log('it is number:', obj[items]['type']);\n            itemRes = obj[items]['type'];\n          }\n          const names = name + '-' + itemRes\n          return this.getAllKey(obj[items], names, moduleName);\n        } else {\n          // console.log('items:', name + '-' + items);\n          const resItems = name + '-' + items;\n          // console.log('split array:', resItems.split('-'));\n          if (resItems == moduleName) {\n            return this.handleRender(resItems, treeRule.modules, moduleName, i);\n          }\n        }\n      });\n    }\nconsole.log('arr', arr)\n    return arr\n}\n```\n","slug":"demo_01","published":1,"updated":"2021-07-23T01:58:27.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdi0020l0xo8q4t0atf","content":"<h2 id=\"js正则表达式\"><a href=\"#js正则表达式\" class=\"headerlink\" title=\"js正则表达式\"></a>js正则表达式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> patt = <span class=\"regexp\">/[顺丰]/</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(patt, <span class=\"string\">'i'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> company = (reg.test(record.remark) === <span class=\"literal\">true</span>) ? <span class=\"string\">'shunfeng'</span> : <span class=\"string\">'annengwuliu'</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'re test-=-----'</span>, company);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> num = record.remark.replace(<span class=\"regexp\">/[^0-9]/ig</span>, <span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归读取层级json\"><a href=\"#递归读取层级json\" class=\"headerlink\" title=\"递归读取层级json\"></a>递归读取层级json</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getAllKey (obj: any, <span class=\"attr\">name</span>: string, moduleName?: string): any[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr: any[] = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(obj)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> keys.map(<span class=\"function\">(<span class=\"params\">items</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj[items] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log(\"obj[items]:\", items);</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> itemRes = items;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (obj[items][<span class=\"string\">'type'</span>]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log('it is number:', obj[items]['type']);</span></span><br><span class=\"line\">            itemRes = obj[items][<span class=\"string\">'type'</span>];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> names = name + <span class=\"string\">'-'</span> + itemRes</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAllKey(obj[items], names, moduleName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log('items:', name + '-' + items);</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> resItems = name + <span class=\"string\">'-'</span> + items;</span><br><span class=\"line\">          <span class=\"comment\">// console.log('split array:', resItems.split('-'));</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resItems == moduleName) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.handleRender(resItems, treeRule.modules, moduleName, i);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'arr'</span>, arr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"js正则表达式\"><a href=\"#js正则表达式\" class=\"headerlink\" title=\"js正则表达式\"></a>js正则表达式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> patt = <span class=\"regexp\">/[顺丰]/</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(patt, <span class=\"string\">'i'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> company = (reg.test(record.remark) === <span class=\"literal\">true</span>) ? <span class=\"string\">'shunfeng'</span> : <span class=\"string\">'annengwuliu'</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'re test-=-----'</span>, company);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> num = record.remark.replace(<span class=\"regexp\">/[^0-9]/ig</span>, <span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归读取层级json\"><a href=\"#递归读取层级json\" class=\"headerlink\" title=\"递归读取层级json\"></a>递归读取层级json</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getAllKey (obj: any, <span class=\"attr\">name</span>: string, moduleName?: string): any[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr: any[] = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(obj)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> keys.map(<span class=\"function\">(<span class=\"params\">items</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj[items] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log(\"obj[items]:\", items);</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> itemRes = items;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (obj[items][<span class=\"string\">'type'</span>]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log('it is number:', obj[items]['type']);</span></span><br><span class=\"line\">            itemRes = obj[items][<span class=\"string\">'type'</span>];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> names = name + <span class=\"string\">'-'</span> + itemRes</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAllKey(obj[items], names, moduleName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log('items:', name + '-' + items);</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> resItems = name + <span class=\"string\">'-'</span> + items;</span><br><span class=\"line\">          <span class=\"comment\">// console.log('split array:', resItems.split('-'));</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resItems == moduleName) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.handleRender(resItems, treeRule.modules, moduleName, i);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'arr'</span>, arr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"设计模式从头学习-面向对象设计原则概述","date":"2020-05-07T12:20:10.000Z","_content":"","source":"_posts/design_pattern02.md","raw":"---\ntitle: 设计模式从头学习-面向对象设计原则概述\ndate: 2020-05-07 20:20:10\ntags: \n- 学习\ncategories:\n- 学习\n- 设计模式\n- 面向对象设计原则\n---\n","slug":"design_pattern02","published":1,"updated":"2021-07-23T01:58:27.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdj0023l0xo1l5vae6v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"设计模式从头学习-前言","date":"2020-05-07T12:13:10.000Z","_content":"**注意**\n本文参考了书籍《大话设计模式》和文章[从招式与内功谈起——设计模式概述](https://blog.csdn.net/lovelion/article/details/7420866)\n#写作初衷\n我有空的时候就会学习一下设计模式，零零散散半年过去了，真正能够静下心来学习\n设计模式的事件少之又少，而且很多模式例如单例模式，命令模式等我学过后就忘了，让我现在再\n复述或者使用我又需要重新去学一下，因此我抛弃以前学习的零零散散的与设计模式相关的东西，\n尝试从头再学一次，边学边使用，并做好详细的笔记，以后可以直接翻阅。\n#设计模式的作用\n(1)设计模式经过多年的使用和实践，包含了大量成功的，可维护可复用的设计方案，在很多情况下，设计模式可以提高开发效率，节约时间    \n(2)设计模式跨语言、跨平台、跨应用、跨国界，提供了通用的词汇和使用方式，节约交流时间    \n(3)大部分设计模式都兼顾了系统的可重用性和扩展性，这使很多系统可以重用，减少代码重复    \n(4)合理使用设计模式有助于别人理解自己的代码    \n(5)有助于更为深刻地理解面对对象编程\n#如何掌握设计模式\na.这个设计模式的意图是什么    \nb.它要解决一个什么问题    \nc.什么时候可以使用它    \nd.它是如何解决问题的    \ne.掌握它的结构图    \nf.记住它的关键代码    \ng.能够想到至少两个它的应用实例，一个生活中的，一个软件中的    \nh.这个模式的优缺点是什么    \ni.在使用时要注意什么    \n#注意事项\n（1）最好的掌握设计模式的方法是使用它们    \n（2）千万不要滥用模式    \n","source":"_posts/design_patter01.md","raw":"---\ntitle: 设计模式从头学习-前言\ndate: 2020-05-07 20:13:10\ntags: \n- 学习\ncategories: \n- 学习\n- 设计模式\n---\n**注意**\n本文参考了书籍《大话设计模式》和文章[从招式与内功谈起——设计模式概述](https://blog.csdn.net/lovelion/article/details/7420866)\n#写作初衷\n我有空的时候就会学习一下设计模式，零零散散半年过去了，真正能够静下心来学习\n设计模式的事件少之又少，而且很多模式例如单例模式，命令模式等我学过后就忘了，让我现在再\n复述或者使用我又需要重新去学一下，因此我抛弃以前学习的零零散散的与设计模式相关的东西，\n尝试从头再学一次，边学边使用，并做好详细的笔记，以后可以直接翻阅。\n#设计模式的作用\n(1)设计模式经过多年的使用和实践，包含了大量成功的，可维护可复用的设计方案，在很多情况下，设计模式可以提高开发效率，节约时间    \n(2)设计模式跨语言、跨平台、跨应用、跨国界，提供了通用的词汇和使用方式，节约交流时间    \n(3)大部分设计模式都兼顾了系统的可重用性和扩展性，这使很多系统可以重用，减少代码重复    \n(4)合理使用设计模式有助于别人理解自己的代码    \n(5)有助于更为深刻地理解面对对象编程\n#如何掌握设计模式\na.这个设计模式的意图是什么    \nb.它要解决一个什么问题    \nc.什么时候可以使用它    \nd.它是如何解决问题的    \ne.掌握它的结构图    \nf.记住它的关键代码    \ng.能够想到至少两个它的应用实例，一个生活中的，一个软件中的    \nh.这个模式的优缺点是什么    \ni.在使用时要注意什么    \n#注意事项\n（1）最好的掌握设计模式的方法是使用它们    \n（2）千万不要滥用模式    \n","slug":"design_patter01","published":1,"updated":"2021-07-23T01:58:27.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdk0026l0xoe6jegmc0","content":"<p><strong>注意</strong><br>本文参考了书籍《大话设计模式》和文章<a href=\"https://blog.csdn.net/lovelion/article/details/7420866\" target=\"_blank\" rel=\"noopener\">从招式与内功谈起——设计模式概述</a><br>#写作初衷<br>我有空的时候就会学习一下设计模式，零零散散半年过去了，真正能够静下心来学习<br>设计模式的事件少之又少，而且很多模式例如单例模式，命令模式等我学过后就忘了，让我现在再<br>复述或者使用我又需要重新去学一下，因此我抛弃以前学习的零零散散的与设计模式相关的东西，<br>尝试从头再学一次，边学边使用，并做好详细的笔记，以后可以直接翻阅。<br>#设计模式的作用<br>(1)设计模式经过多年的使用和实践，包含了大量成功的，可维护可复用的设计方案，在很多情况下，设计模式可以提高开发效率，节约时间<br>(2)设计模式跨语言、跨平台、跨应用、跨国界，提供了通用的词汇和使用方式，节约交流时间<br>(3)大部分设计模式都兼顾了系统的可重用性和扩展性，这使很多系统可以重用，减少代码重复<br>(4)合理使用设计模式有助于别人理解自己的代码<br>(5)有助于更为深刻地理解面对对象编程<br>#如何掌握设计模式<br>a.这个设计模式的意图是什么<br>b.它要解决一个什么问题<br>c.什么时候可以使用它<br>d.它是如何解决问题的<br>e.掌握它的结构图<br>f.记住它的关键代码<br>g.能够想到至少两个它的应用实例，一个生活中的，一个软件中的<br>h.这个模式的优缺点是什么<br>i.在使用时要注意什么<br>#注意事项<br>（1）最好的掌握设计模式的方法是使用它们<br>（2）千万不要滥用模式    </p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>注意</strong><br>本文参考了书籍《大话设计模式》和文章<a href=\"https://blog.csdn.net/lovelion/article/details/7420866\" target=\"_blank\" rel=\"noopener\">从招式与内功谈起——设计模式概述</a><br>#写作初衷<br>我有空的时候就会学习一下设计模式，零零散散半年过去了，真正能够静下心来学习<br>设计模式的事件少之又少，而且很多模式例如单例模式，命令模式等我学过后就忘了，让我现在再<br>复述或者使用我又需要重新去学一下，因此我抛弃以前学习的零零散散的与设计模式相关的东西，<br>尝试从头再学一次，边学边使用，并做好详细的笔记，以后可以直接翻阅。<br>#设计模式的作用<br>(1)设计模式经过多年的使用和实践，包含了大量成功的，可维护可复用的设计方案，在很多情况下，设计模式可以提高开发效率，节约时间<br>(2)设计模式跨语言、跨平台、跨应用、跨国界，提供了通用的词汇和使用方式，节约交流时间<br>(3)大部分设计模式都兼顾了系统的可重用性和扩展性，这使很多系统可以重用，减少代码重复<br>(4)合理使用设计模式有助于别人理解自己的代码<br>(5)有助于更为深刻地理解面对对象编程<br>#如何掌握设计模式<br>a.这个设计模式的意图是什么<br>b.它要解决一个什么问题<br>c.什么时候可以使用它<br>d.它是如何解决问题的<br>e.掌握它的结构图<br>f.记住它的关键代码<br>g.能够想到至少两个它的应用实例，一个生活中的，一个软件中的<br>h.这个模式的优缺点是什么<br>i.在使用时要注意什么<br>#注意事项<br>（1）最好的掌握设计模式的方法是使用它们<br>（2）千万不要滥用模式    </p>\n"},{"title":"docker使用心得","date":"2019-04-24T13:03:10.000Z","_content":"## 准备工作\n#### 1 前提条件\nubuntu内核版本高于 3.10  ```uname -r ```\n\n#### 2 安装docker\n本文是基于ubuntu的，基于centos安装路径博客如下：\n[centos](http://www.runoob.com/docker/centos-docker-install.html \"centos\")\n[windows](http://www.runoob.com/docker/windows-docker-install.html \"windows\")\n```\nwget -qO- https://get.docker.com/ | sh\n```\n当要以非root用户可以直接运行docker时，需要执行 sudo usermod -aG docker runoob 命令，然后重新登陆\n启动docker服务\n```\nsudo service docker start\n```\n**测试运行hello world**\n```\ndocker run hello-world\n```\n**镜像加速**\n路径：``` /etc/docker/daemon.json```\n配置文件中加入(不存在则创建，我本地不存在此文件)：\n```\n{\n  \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"]\n}\n```\n## 基础知识\n**hello world**\n```\ndocker run ubuntu:15.10 /bin/echo \"Hello world\"\n```\n(验证,echo是可以直接echo的，不必写/bin/echo)\n**参数解析**\ndocker:docker的二进制执行文件\nrun:与前面docker组合来运行一个容器\nubuntu:15.10 : 指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。\n/bin/echo \"Hello world\": 在启动的容器里执行的命令\n**运行交互式的容器**\n通过docker的两个参数 -i -t，让docker运行的容器实现\"对话\"的能力\n```\ndocker run -i -t ubuntu:15.10 /bin/bash\n```\n-t:在新容器内指定一个伪终端或终端。\n-i:允许对容器内的标准输入进行交互\n**启动容器（后台模式）**\n```\ndocker run -d ubuntu:15.10 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n```\n输出一串长字符，是容器ID,对每个容器来说都是唯一的，我们可以通过容器ID来查看对应的容器发生了什么。\n```docker ps```可以查看有容器在运行\nCONTAINER ID:容器ID\nNAMES:自动分配的容器名称\n在容器内使用docker logs命令，查看容器内的标准输出\n```docker logs [CONTAINER ID|NAMES]```\n**停止容器**\n```docker stop [CONTAINER ID|NAMES]```\n(亲测不需要sudo就能停止docker,但是docker ps却需要sudo)\n##docker容器使用\n```docker```命令可以直接查看Docker客户端的所有选项\n```docker comman --help```更深入地了解指定地docker命令使用方法\n","source":"_posts/docker.md","raw":"---\ntitle: docker使用心得\ndate: 2019-04-24 21:03:10\ntags: \n- 使用心得\ncategories: \n- docker\n---\n## 准备工作\n#### 1 前提条件\nubuntu内核版本高于 3.10  ```uname -r ```\n\n#### 2 安装docker\n本文是基于ubuntu的，基于centos安装路径博客如下：\n[centos](http://www.runoob.com/docker/centos-docker-install.html \"centos\")\n[windows](http://www.runoob.com/docker/windows-docker-install.html \"windows\")\n```\nwget -qO- https://get.docker.com/ | sh\n```\n当要以非root用户可以直接运行docker时，需要执行 sudo usermod -aG docker runoob 命令，然后重新登陆\n启动docker服务\n```\nsudo service docker start\n```\n**测试运行hello world**\n```\ndocker run hello-world\n```\n**镜像加速**\n路径：``` /etc/docker/daemon.json```\n配置文件中加入(不存在则创建，我本地不存在此文件)：\n```\n{\n  \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"]\n}\n```\n## 基础知识\n**hello world**\n```\ndocker run ubuntu:15.10 /bin/echo \"Hello world\"\n```\n(验证,echo是可以直接echo的，不必写/bin/echo)\n**参数解析**\ndocker:docker的二进制执行文件\nrun:与前面docker组合来运行一个容器\nubuntu:15.10 : 指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。\n/bin/echo \"Hello world\": 在启动的容器里执行的命令\n**运行交互式的容器**\n通过docker的两个参数 -i -t，让docker运行的容器实现\"对话\"的能力\n```\ndocker run -i -t ubuntu:15.10 /bin/bash\n```\n-t:在新容器内指定一个伪终端或终端。\n-i:允许对容器内的标准输入进行交互\n**启动容器（后台模式）**\n```\ndocker run -d ubuntu:15.10 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n```\n输出一串长字符，是容器ID,对每个容器来说都是唯一的，我们可以通过容器ID来查看对应的容器发生了什么。\n```docker ps```可以查看有容器在运行\nCONTAINER ID:容器ID\nNAMES:自动分配的容器名称\n在容器内使用docker logs命令，查看容器内的标准输出\n```docker logs [CONTAINER ID|NAMES]```\n**停止容器**\n```docker stop [CONTAINER ID|NAMES]```\n(亲测不需要sudo就能停止docker,但是docker ps却需要sudo)\n##docker容器使用\n```docker```命令可以直接查看Docker客户端的所有选项\n```docker comman --help```更深入地了解指定地docker命令使用方法\n","slug":"docker","published":1,"updated":"2021-07-23T01:58:27.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdl002al0xo3xophloo","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h4 id=\"1-前提条件\"><a href=\"#1-前提条件\" class=\"headerlink\" title=\"1 前提条件\"></a>1 前提条件</h4><p>ubuntu内核版本高于 3.10  <code>uname -r</code></p>\n<h4 id=\"2-安装docker\"><a href=\"#2-安装docker\" class=\"headerlink\" title=\"2 安装docker\"></a>2 安装docker</h4><p>本文是基于ubuntu的，基于centos安装路径博客如下：<br><a href=\"http://www.runoob.com/docker/centos-docker-install.html\" target=\"_blank\" rel=\"noopener\" title=\"centos\">centos</a><br><a href=\"http://www.runoob.com/docker/windows-docker-install.html\" target=\"_blank\" rel=\"noopener\" title=\"windows\">windows</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure>\n<p>当要以非root用户可以直接运行docker时，需要执行 sudo usermod -aG docker runoob 命令，然后重新登陆<br>启动docker服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service docker start</span><br></pre></td></tr></table></figure>\n<p><strong>测试运行hello world</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n<p><strong>镜像加速</strong><br>路径：<code>/etc/docker/daemon.json</code><br>配置文件中加入(不存在则创建，我本地不存在此文件)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p><strong>hello world</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run ubuntu:15.10 &#x2F;bin&#x2F;echo &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>\n<p>(验证,echo是可以直接echo的，不必写/bin/echo)<br><strong>参数解析</strong><br>docker:docker的二进制执行文件<br>run:与前面docker组合来运行一个容器<br>ubuntu:15.10 : 指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。<br>/bin/echo “Hello world”: 在启动的容器里执行的命令<br><strong>运行交互式的容器</strong><br>通过docker的两个参数 -i -t，让docker运行的容器实现”对话”的能力</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu:15.10 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n<p>-t:在新容器内指定一个伪终端或终端。<br>-i:允许对容器内的标准输入进行交互<br><strong>启动容器（后台模式）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d ubuntu:15.10 &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure>\n<p>输出一串长字符，是容器ID,对每个容器来说都是唯一的，我们可以通过容器ID来查看对应的容器发生了什么。</p>\n<figure class=\"highlight docker\"><figcaption><span>ps```可以查看有容器在运行</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID:容器ID</span><br><span class=\"line\">NAMES:自动分配的容器名称</span><br><span class=\"line\">在容器内使用docker logs命令，查看容器内的标准输出</span><br><span class=\"line\">```docker logs [CONTAINER ID|NAMES]</span><br></pre></td></tr></table></figure>\n<p><strong>停止容器</strong><br><code>docker stop [CONTAINER ID|NAMES]</code><br>(亲测不需要sudo就能停止docker,但是docker ps却需要sudo)<br>##docker容器使用<br><code>docker</code>命令可以直接查看Docker客户端的所有选项<br><code>docker comman --help</code>更深入地了解指定地docker命令使用方法</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h4 id=\"1-前提条件\"><a href=\"#1-前提条件\" class=\"headerlink\" title=\"1 前提条件\"></a>1 前提条件</h4><p>ubuntu内核版本高于 3.10  <code>uname -r</code></p>\n<h4 id=\"2-安装docker\"><a href=\"#2-安装docker\" class=\"headerlink\" title=\"2 安装docker\"></a>2 安装docker</h4><p>本文是基于ubuntu的，基于centos安装路径博客如下：<br><a href=\"http://www.runoob.com/docker/centos-docker-install.html\" target=\"_blank\" rel=\"noopener\" title=\"centos\">centos</a><br><a href=\"http://www.runoob.com/docker/windows-docker-install.html\" target=\"_blank\" rel=\"noopener\" title=\"windows\">windows</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure>\n<p>当要以非root用户可以直接运行docker时，需要执行 sudo usermod -aG docker runoob 命令，然后重新登陆<br>启动docker服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service docker start</span><br></pre></td></tr></table></figure>\n<p><strong>测试运行hello world</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n<p><strong>镜像加速</strong><br>路径：<code>/etc/docker/daemon.json</code><br>配置文件中加入(不存在则创建，我本地不存在此文件)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p><strong>hello world</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run ubuntu:15.10 &#x2F;bin&#x2F;echo &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>\n<p>(验证,echo是可以直接echo的，不必写/bin/echo)<br><strong>参数解析</strong><br>docker:docker的二进制执行文件<br>run:与前面docker组合来运行一个容器<br>ubuntu:15.10 : 指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。<br>/bin/echo “Hello world”: 在启动的容器里执行的命令<br><strong>运行交互式的容器</strong><br>通过docker的两个参数 -i -t，让docker运行的容器实现”对话”的能力</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu:15.10 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n<p>-t:在新容器内指定一个伪终端或终端。<br>-i:允许对容器内的标准输入进行交互<br><strong>启动容器（后台模式）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d ubuntu:15.10 &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure>\n<p>输出一串长字符，是容器ID,对每个容器来说都是唯一的，我们可以通过容器ID来查看对应的容器发生了什么。</p>\n<figure class=\"highlight docker\"><figcaption><span>ps```可以查看有容器在运行</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID:容器ID</span><br><span class=\"line\">NAMES:自动分配的容器名称</span><br><span class=\"line\">在容器内使用docker logs命令，查看容器内的标准输出</span><br><span class=\"line\">```docker logs [CONTAINER ID|NAMES]</span><br></pre></td></tr></table></figure>\n<p><strong>停止容器</strong><br><code>docker stop [CONTAINER ID|NAMES]</code><br>(亲测不需要sudo就能停止docker,但是docker ps却需要sudo)<br>##docker容器使用<br><code>docker</code>命令可以直接查看Docker客户端的所有选项<br><code>docker comman --help</code>更深入地了解指定地docker命令使用方法</p>\n"},{"title":"单例模式","date":"2019-10-29T09:40:10.000Z","_content":"# 概念介绍\n## 情景介绍\n一个类只需要被实例化一次，但是不应该由调用方来判断是否被实例化过\n## 基础介绍\n所有类都有构造方法，不编码则系统默认生成空的构造方法，若有显示定义的构造方法，默认的构造方法就会失效。    \n类把构造方法设置为私有，使所有的方法都不能直接实例化这个类。然后类内部写一个公共方法来判断这个类是否被实例化过，调用方无需判断\n## 单例模式\n单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。    \n通常可以让一个全局变量使得一个对象被访问，但它不能防止实例化多个对象。一个最好的办法就是，让类自身负责保存它的唯一实例，这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。    \n","source":"_posts/design_singleton.md","raw":"---\ntitle: 单例模式\ndate: 2019-10-29 17:40:10\ntags: \n- 学习\ncategories: \n- 设计模式\n---\n# 概念介绍\n## 情景介绍\n一个类只需要被实例化一次，但是不应该由调用方来判断是否被实例化过\n## 基础介绍\n所有类都有构造方法，不编码则系统默认生成空的构造方法，若有显示定义的构造方法，默认的构造方法就会失效。    \n类把构造方法设置为私有，使所有的方法都不能直接实例化这个类。然后类内部写一个公共方法来判断这个类是否被实例化过，调用方无需判断\n## 单例模式\n单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。    \n通常可以让一个全局变量使得一个对象被访问，但它不能防止实例化多个对象。一个最好的办法就是，让类自身负责保存它的唯一实例，这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。    \n","slug":"design_singleton","published":1,"updated":"2021-07-23T01:58:27.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdm002dl0xohrk4643r","content":"<h1 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h1><h2 id=\"情景介绍\"><a href=\"#情景介绍\" class=\"headerlink\" title=\"情景介绍\"></a>情景介绍</h2><p>一个类只需要被实例化一次，但是不应该由调用方来判断是否被实例化过</p>\n<h2 id=\"基础介绍\"><a href=\"#基础介绍\" class=\"headerlink\" title=\"基础介绍\"></a>基础介绍</h2><p>所有类都有构造方法，不编码则系统默认生成空的构造方法，若有显示定义的构造方法，默认的构造方法就会失效。<br>类把构造方法设置为私有，使所有的方法都不能直接实例化这个类。然后类内部写一个公共方法来判断这个类是否被实例化过，调用方无需判断</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>通常可以让一个全局变量使得一个对象被访问，但它不能防止实例化多个对象。一个最好的办法就是，让类自身负责保存它的唯一实例，这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。    </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h1><h2 id=\"情景介绍\"><a href=\"#情景介绍\" class=\"headerlink\" title=\"情景介绍\"></a>情景介绍</h2><p>一个类只需要被实例化一次，但是不应该由调用方来判断是否被实例化过</p>\n<h2 id=\"基础介绍\"><a href=\"#基础介绍\" class=\"headerlink\" title=\"基础介绍\"></a>基础介绍</h2><p>所有类都有构造方法，不编码则系统默认生成空的构造方法，若有显示定义的构造方法，默认的构造方法就会失效。<br>类把构造方法设置为私有，使所有的方法都不能直接实例化这个类。然后类内部写一个公共方法来判断这个类是否被实例化过，调用方无需判断</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>通常可以让一个全局变量使得一个对象被访问，但它不能防止实例化多个对象。一个最好的办法就是，让类自身负责保存它的唯一实例，这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。    </p>\n"},{"title":"fast-json-patch","date":"2019-07-26T06:37:10.000Z","_content":"# fast-json-patch包使用\n网上关于json-patch的中文介绍太少了，官方文档没有翻译版，所以写一下自己的学习文档，以下只是自己根据英文文档的理解，不保证正确。\n## 基础操作\njson patch几大基础操作包括：add, replace, move, test, remove, copy\n## applyPatch\n给定文档和操作，执行操作\n```typescript\nimport {applyOperation, applyPatch} from 'fast-json-patch';\nlet document = document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [] } };\nlet patch = [\n  { op: \"replace\", path: \"/firstName\", value: \"Joachim\" },\n  { op: \"add\", path: \"/lastName\", value: \"Wester\" },\n  { op: \"add\", path: \"/contactDetails/phoneNumbers/0\", value: { number: \"555-123\" }  }\n];\nconst docu = applyPatch(document, patch)\n```\n## applyOperation\n执行单独的操作而不是连贯操作,举例如下：\n```typescript\nvar document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [] } };\nvar operation = { op: \"replace\", path: \"/firstName\", value: \"Joachim\" };\ndocument = jsonpatch.applyOperation(document, operation).newDocument;\n// document == { firstName: \"Joachim\", contactDetails: { phoneNumbers: [] }}\n```\n## applyReducer\n看了英文原文文档并不很确定，只能根据自己的理解来看。    \njavascript的reduce是一个累加器，使用applyReducer作为累加操作，当定义的操作是一组数组时，使用applyReducer执行操作，示例如下：\n```typescript\nvar document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [ ] } };\nvar patch = [\n  { op:\"replace\", path: \"/firstName\", value: \"Joachim\" },\n  { op:\"add\", path: \"/lastName\", value: \"Wester\" },\n  { op:\"add\", path: \"/contactDetails/phoneNumbers/0\", value: { number: \"555-123\" } }\n];\nvar updatedDocument = patch.reduce(applyReducer, document);\n// updatedDocument == { firstName:\"Joachim\", lastName:\"Wester\", contactDetails:{ phoneNumbers[ {number:\"555-123\"} ] } };\n```\n## Generating patches\n提供一个类似于观察者，先获取原始文档结构（observe），之后文档进行变化，最后执行操作，可以得到应有的操作流程。示例如下：\n```typescript\nvar document = { firstName: \"Joachim\", lastName: \"Wester\", contactDetails: { phoneNumbers: [ { number:\"555-123\" }] } };\nvar observer = jsonpatch.observe(document);\ndocument.firstName = \"Albert\";\ndocument.contactDetails.phoneNumbers[0].number = \"123\";\ndocument.contactDetails.phoneNumbers.push({ number:\"456\" });\nvar patch = jsonpatch.generate(observer);\n// patch  == [\n//   { op: \"replace\", path: \"/firstName\", value: \"Albert\"},\n//   { op: \"replace\", path: \"/contactDetails/phoneNumbers/0/number\", value: \"123\" },\n//   { op: \"add\", path: \"/contactDetails/phoneNumbers/1\", value: {number:\"456\"}}\n// ];\n```\n## 比较两个文档-compare\n直接比较两个文档，得出从文档A到文档B应有哪些操作（得到操作后可以尝试用这个操作来更新B文档）\n```typescript\nvar documentA = {user: {firstName: \"Albert\", lastName: \"Einstein\"}};\nvar documentB = {user: {firstName: \"Albert\", lastName: \"Collins\"}};\nvar diff = jsonpatch.compare(documentA, documentB);\n//diff == [{op: \"replace\", path: \"/user/lastName\", value: \"Collins\"}]\n```\n## 验证修补程序序列\n对patch做校验，验证这个补丁是否可以应用到指定的对象上（可能是这个意思）,如果出错可以打印出错误信息\n```typescript\nvar obj = {user: {firstName: \"Albert\"}};\nvar patches = [{op: \"replace\", path: \"/user/firstName\", value: \"Albert\"}, {op: \"replace\", path: \"/user/lastName\", value: \"Einstein\"}];\nvar errors = jsonpatch.validate(patches, obj);\nif (errors.length == 0) {\n //there are no errors!\n}\nelse {\n  for (var i=0; i < errors.length; i++) {\n    if (!errors[i]) {\n      console.log(\"Valid patch at index\", i, patches[i]);\n    }\n    else {\n      console.error(\"Invalid patch at index\", i, errors[i], patches[i]);\n    }\n  }\n}\n```\n# Json Patch API\n函数原型：\n```typescript\nfunction applyPatch<T>(document: T, patch: Operation[], validateOperation?: boolean | Validator<T>, mutateDocument: boolean = true, banPrototypeModifications: boolean = true): PatchResult<T>\n```\n对参数的释义：    \n* document：将要patch的文档；    \n* patch：一个json-patch数组，一组可执行的操作；    \n* validateOperation： boolean类型，是否使用默认校验器对每个操作进行校验或通过校验器回调；    \n...\n其余部分可以自行查文档\n","source":"_posts/fastJsonPatch.md","raw":"---\ntitle: fast-json-patch\ndate: 2019-07-26 14:37:10\ntags: \n- 小工具\ncategories: \n- 前端\n- react\n- json-patch\n---\n# fast-json-patch包使用\n网上关于json-patch的中文介绍太少了，官方文档没有翻译版，所以写一下自己的学习文档，以下只是自己根据英文文档的理解，不保证正确。\n## 基础操作\njson patch几大基础操作包括：add, replace, move, test, remove, copy\n## applyPatch\n给定文档和操作，执行操作\n```typescript\nimport {applyOperation, applyPatch} from 'fast-json-patch';\nlet document = document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [] } };\nlet patch = [\n  { op: \"replace\", path: \"/firstName\", value: \"Joachim\" },\n  { op: \"add\", path: \"/lastName\", value: \"Wester\" },\n  { op: \"add\", path: \"/contactDetails/phoneNumbers/0\", value: { number: \"555-123\" }  }\n];\nconst docu = applyPatch(document, patch)\n```\n## applyOperation\n执行单独的操作而不是连贯操作,举例如下：\n```typescript\nvar document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [] } };\nvar operation = { op: \"replace\", path: \"/firstName\", value: \"Joachim\" };\ndocument = jsonpatch.applyOperation(document, operation).newDocument;\n// document == { firstName: \"Joachim\", contactDetails: { phoneNumbers: [] }}\n```\n## applyReducer\n看了英文原文文档并不很确定，只能根据自己的理解来看。    \njavascript的reduce是一个累加器，使用applyReducer作为累加操作，当定义的操作是一组数组时，使用applyReducer执行操作，示例如下：\n```typescript\nvar document = { firstName: \"Albert\", contactDetails: { phoneNumbers: [ ] } };\nvar patch = [\n  { op:\"replace\", path: \"/firstName\", value: \"Joachim\" },\n  { op:\"add\", path: \"/lastName\", value: \"Wester\" },\n  { op:\"add\", path: \"/contactDetails/phoneNumbers/0\", value: { number: \"555-123\" } }\n];\nvar updatedDocument = patch.reduce(applyReducer, document);\n// updatedDocument == { firstName:\"Joachim\", lastName:\"Wester\", contactDetails:{ phoneNumbers[ {number:\"555-123\"} ] } };\n```\n## Generating patches\n提供一个类似于观察者，先获取原始文档结构（observe），之后文档进行变化，最后执行操作，可以得到应有的操作流程。示例如下：\n```typescript\nvar document = { firstName: \"Joachim\", lastName: \"Wester\", contactDetails: { phoneNumbers: [ { number:\"555-123\" }] } };\nvar observer = jsonpatch.observe(document);\ndocument.firstName = \"Albert\";\ndocument.contactDetails.phoneNumbers[0].number = \"123\";\ndocument.contactDetails.phoneNumbers.push({ number:\"456\" });\nvar patch = jsonpatch.generate(observer);\n// patch  == [\n//   { op: \"replace\", path: \"/firstName\", value: \"Albert\"},\n//   { op: \"replace\", path: \"/contactDetails/phoneNumbers/0/number\", value: \"123\" },\n//   { op: \"add\", path: \"/contactDetails/phoneNumbers/1\", value: {number:\"456\"}}\n// ];\n```\n## 比较两个文档-compare\n直接比较两个文档，得出从文档A到文档B应有哪些操作（得到操作后可以尝试用这个操作来更新B文档）\n```typescript\nvar documentA = {user: {firstName: \"Albert\", lastName: \"Einstein\"}};\nvar documentB = {user: {firstName: \"Albert\", lastName: \"Collins\"}};\nvar diff = jsonpatch.compare(documentA, documentB);\n//diff == [{op: \"replace\", path: \"/user/lastName\", value: \"Collins\"}]\n```\n## 验证修补程序序列\n对patch做校验，验证这个补丁是否可以应用到指定的对象上（可能是这个意思）,如果出错可以打印出错误信息\n```typescript\nvar obj = {user: {firstName: \"Albert\"}};\nvar patches = [{op: \"replace\", path: \"/user/firstName\", value: \"Albert\"}, {op: \"replace\", path: \"/user/lastName\", value: \"Einstein\"}];\nvar errors = jsonpatch.validate(patches, obj);\nif (errors.length == 0) {\n //there are no errors!\n}\nelse {\n  for (var i=0; i < errors.length; i++) {\n    if (!errors[i]) {\n      console.log(\"Valid patch at index\", i, patches[i]);\n    }\n    else {\n      console.error(\"Invalid patch at index\", i, errors[i], patches[i]);\n    }\n  }\n}\n```\n# Json Patch API\n函数原型：\n```typescript\nfunction applyPatch<T>(document: T, patch: Operation[], validateOperation?: boolean | Validator<T>, mutateDocument: boolean = true, banPrototypeModifications: boolean = true): PatchResult<T>\n```\n对参数的释义：    \n* document：将要patch的文档；    \n* patch：一个json-patch数组，一组可执行的操作；    \n* validateOperation： boolean类型，是否使用默认校验器对每个操作进行校验或通过校验器回调；    \n...\n其余部分可以自行查文档\n","slug":"fastJsonPatch","published":1,"updated":"2021-07-23T01:58:27.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdn002il0xo8w2tgxq6","content":"<h1 id=\"fast-json-patch包使用\"><a href=\"#fast-json-patch包使用\" class=\"headerlink\" title=\"fast-json-patch包使用\"></a>fast-json-patch包使用</h1><p>网上关于json-patch的中文介绍太少了，官方文档没有翻译版，所以写一下自己的学习文档，以下只是自己根据英文文档的理解，不保证正确。</p>\n<h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><p>json patch几大基础操作包括：add, replace, move, test, remove, copy</p>\n<h2 id=\"applyPatch\"><a href=\"#applyPatch\" class=\"headerlink\" title=\"applyPatch\"></a>applyPatch</h2><p>给定文档和操作，执行操作</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;applyOperation, applyPatch&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fast-json-patch'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">document</span> = <span class=\"built_in\">document</span> = &#123; firstName: <span class=\"string\">\"Albert\"</span>, contactDetails: &#123; phoneNumbers: [] &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> patch = [</span><br><span class=\"line\">  &#123; op: <span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/firstName\"</span>, value: <span class=\"string\">\"Joachim\"</span> &#125;,</span><br><span class=\"line\">  &#123; op: <span class=\"string\">\"add\"</span>, path: <span class=\"string\">\"/lastName\"</span>, value: <span class=\"string\">\"Wester\"</span> &#125;,</span><br><span class=\"line\">  &#123; op: <span class=\"string\">\"add\"</span>, path: <span class=\"string\">\"/contactDetails/phoneNumbers/0\"</span>, value: &#123; <span class=\"built_in\">number</span>: <span class=\"string\">\"555-123\"</span> &#125;  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> docu = applyPatch(<span class=\"built_in\">document</span>, patch)</span><br></pre></td></tr></table></figure>\n<h2 id=\"applyOperation\"><a href=\"#applyOperation\" class=\"headerlink\" title=\"applyOperation\"></a>applyOperation</h2><p>执行单独的操作而不是连贯操作,举例如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">document</span> = &#123; firstName: <span class=\"string\">\"Albert\"</span>, contactDetails: &#123; phoneNumbers: [] &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> operation = &#123; op: <span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/firstName\"</span>, value: <span class=\"string\">\"Joachim\"</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">document</span> = jsonpatch.applyOperation(<span class=\"built_in\">document</span>, operation).newDocument;</span><br><span class=\"line\"><span class=\"comment\">// document == &#123; firstName: \"Joachim\", contactDetails: &#123; phoneNumbers: [] &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"applyReducer\"><a href=\"#applyReducer\" class=\"headerlink\" title=\"applyReducer\"></a>applyReducer</h2><p>看了英文原文文档并不很确定，只能根据自己的理解来看。<br>javascript的reduce是一个累加器，使用applyReducer作为累加操作，当定义的操作是一组数组时，使用applyReducer执行操作，示例如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">document</span> = &#123; firstName: <span class=\"string\">\"Albert\"</span>, contactDetails: &#123; phoneNumbers: [ ] &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> patch = [</span><br><span class=\"line\">  &#123; op:<span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/firstName\"</span>, value: <span class=\"string\">\"Joachim\"</span> &#125;,</span><br><span class=\"line\">  &#123; op:<span class=\"string\">\"add\"</span>, path: <span class=\"string\">\"/lastName\"</span>, value: <span class=\"string\">\"Wester\"</span> &#125;,</span><br><span class=\"line\">  &#123; op:<span class=\"string\">\"add\"</span>, path: <span class=\"string\">\"/contactDetails/phoneNumbers/0\"</span>, value: &#123; <span class=\"built_in\">number</span>: <span class=\"string\">\"555-123\"</span> &#125; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> updatedDocument = patch.reduce(applyReducer, <span class=\"built_in\">document</span>);</span><br><span class=\"line\"><span class=\"comment\">// updatedDocument == &#123; firstName:\"Joachim\", lastName:\"Wester\", contactDetails:&#123; phoneNumbers[ &#123;number:\"555-123\"&#125; ] &#125; &#125;;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generating-patches\"><a href=\"#Generating-patches\" class=\"headerlink\" title=\"Generating patches\"></a>Generating patches</h2><p>提供一个类似于观察者，先获取原始文档结构（observe），之后文档进行变化，最后执行操作，可以得到应有的操作流程。示例如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">document</span> = &#123; firstName: <span class=\"string\">\"Joachim\"</span>, lastName: <span class=\"string\">\"Wester\"</span>, contactDetails: &#123; phoneNumbers: [ &#123; <span class=\"built_in\">number</span>:<span class=\"string\">\"555-123\"</span> &#125;] &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer = jsonpatch.observe(<span class=\"built_in\">document</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.firstName = <span class=\"string\">\"Albert\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.contactDetails.phoneNumbers[<span class=\"number\">0</span>].number = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.contactDetails.phoneNumbers.push(&#123; <span class=\"built_in\">number</span>:<span class=\"string\">\"456\"</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> patch = jsonpatch.generate(observer);</span><br><span class=\"line\"><span class=\"comment\">// patch  == [</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; op: \"replace\", path: \"/firstName\", value: \"Albert\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; op: \"replace\", path: \"/contactDetails/phoneNumbers/0/number\", value: \"123\" &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; op: \"add\", path: \"/contactDetails/phoneNumbers/1\", value: &#123;number:\"456\"&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// ];</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"比较两个文档-compare\"><a href=\"#比较两个文档-compare\" class=\"headerlink\" title=\"比较两个文档-compare\"></a>比较两个文档-compare</h2><p>直接比较两个文档，得出从文档A到文档B应有哪些操作（得到操作后可以尝试用这个操作来更新B文档）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> documentA = &#123;user: &#123;firstName: <span class=\"string\">\"Albert\"</span>, lastName: <span class=\"string\">\"Einstein\"</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> documentB = &#123;user: &#123;firstName: <span class=\"string\">\"Albert\"</span>, lastName: <span class=\"string\">\"Collins\"</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> diff = jsonpatch.compare(documentA, documentB);</span><br><span class=\"line\"><span class=\"comment\">//diff == [&#123;op: \"replace\", path: \"/user/lastName\", value: \"Collins\"&#125;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"验证修补程序序列\"><a href=\"#验证修补程序序列\" class=\"headerlink\" title=\"验证修补程序序列\"></a>验证修补程序序列</h2><p>对patch做校验，验证这个补丁是否可以应用到指定的对象上（可能是这个意思）,如果出错可以打印出错误信息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;user: &#123;firstName: <span class=\"string\">\"Albert\"</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> patches = [&#123;op: <span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/user/firstName\"</span>, value: <span class=\"string\">\"Albert\"</span>&#125;, &#123;op: <span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/user/lastName\"</span>, value: <span class=\"string\">\"Einstein\"</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> errors = jsonpatch.validate(patches, obj);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (errors.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"> <span class=\"comment\">//there are no errors!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; errors.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!errors[i]) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Valid patch at index\"</span>, i, patches[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">\"Invalid patch at index\"</span>, i, errors[i], patches[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Json-Patch-API\"><a href=\"#Json-Patch-API\" class=\"headerlink\" title=\"Json Patch API\"></a>Json Patch API</h1><p>函数原型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyPatch</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">document</span>: T, patch: Operation[], validateOperation?: <span class=\"built_in\">boolean</span> | Validator&lt;T&gt;, mutateDocument: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>, banPrototypeModifications: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span>): <span class=\"title\">PatchResult</span>&lt;<span class=\"title\">T</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对参数的释义：    </p>\n<ul>\n<li>document：将要patch的文档；    </li>\n<li>patch：一个json-patch数组，一组可执行的操作；    </li>\n<li>validateOperation： boolean类型，是否使用默认校验器对每个操作进行校验或通过校验器回调；<br>…<br>其余部分可以自行查文档</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"fast-json-patch包使用\"><a href=\"#fast-json-patch包使用\" class=\"headerlink\" title=\"fast-json-patch包使用\"></a>fast-json-patch包使用</h1><p>网上关于json-patch的中文介绍太少了，官方文档没有翻译版，所以写一下自己的学习文档，以下只是自己根据英文文档的理解，不保证正确。</p>\n<h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><p>json patch几大基础操作包括：add, replace, move, test, remove, copy</p>\n<h2 id=\"applyPatch\"><a href=\"#applyPatch\" class=\"headerlink\" title=\"applyPatch\"></a>applyPatch</h2><p>给定文档和操作，执行操作</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;applyOperation, applyPatch&#125; <span class=\"keyword\">from</span> <span class=\"string\">'fast-json-patch'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">document</span> = <span class=\"built_in\">document</span> = &#123; firstName: <span class=\"string\">\"Albert\"</span>, contactDetails: &#123; phoneNumbers: [] &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> patch = [</span><br><span class=\"line\">  &#123; op: <span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/firstName\"</span>, value: <span class=\"string\">\"Joachim\"</span> &#125;,</span><br><span class=\"line\">  &#123; op: <span class=\"string\">\"add\"</span>, path: <span class=\"string\">\"/lastName\"</span>, value: <span class=\"string\">\"Wester\"</span> &#125;,</span><br><span class=\"line\">  &#123; op: <span class=\"string\">\"add\"</span>, path: <span class=\"string\">\"/contactDetails/phoneNumbers/0\"</span>, value: &#123; <span class=\"built_in\">number</span>: <span class=\"string\">\"555-123\"</span> &#125;  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> docu = applyPatch(<span class=\"built_in\">document</span>, patch)</span><br></pre></td></tr></table></figure>\n<h2 id=\"applyOperation\"><a href=\"#applyOperation\" class=\"headerlink\" title=\"applyOperation\"></a>applyOperation</h2><p>执行单独的操作而不是连贯操作,举例如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">document</span> = &#123; firstName: <span class=\"string\">\"Albert\"</span>, contactDetails: &#123; phoneNumbers: [] &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> operation = &#123; op: <span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/firstName\"</span>, value: <span class=\"string\">\"Joachim\"</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">document</span> = jsonpatch.applyOperation(<span class=\"built_in\">document</span>, operation).newDocument;</span><br><span class=\"line\"><span class=\"comment\">// document == &#123; firstName: \"Joachim\", contactDetails: &#123; phoneNumbers: [] &#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"applyReducer\"><a href=\"#applyReducer\" class=\"headerlink\" title=\"applyReducer\"></a>applyReducer</h2><p>看了英文原文文档并不很确定，只能根据自己的理解来看。<br>javascript的reduce是一个累加器，使用applyReducer作为累加操作，当定义的操作是一组数组时，使用applyReducer执行操作，示例如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">document</span> = &#123; firstName: <span class=\"string\">\"Albert\"</span>, contactDetails: &#123; phoneNumbers: [ ] &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> patch = [</span><br><span class=\"line\">  &#123; op:<span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/firstName\"</span>, value: <span class=\"string\">\"Joachim\"</span> &#125;,</span><br><span class=\"line\">  &#123; op:<span class=\"string\">\"add\"</span>, path: <span class=\"string\">\"/lastName\"</span>, value: <span class=\"string\">\"Wester\"</span> &#125;,</span><br><span class=\"line\">  &#123; op:<span class=\"string\">\"add\"</span>, path: <span class=\"string\">\"/contactDetails/phoneNumbers/0\"</span>, value: &#123; <span class=\"built_in\">number</span>: <span class=\"string\">\"555-123\"</span> &#125; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> updatedDocument = patch.reduce(applyReducer, <span class=\"built_in\">document</span>);</span><br><span class=\"line\"><span class=\"comment\">// updatedDocument == &#123; firstName:\"Joachim\", lastName:\"Wester\", contactDetails:&#123; phoneNumbers[ &#123;number:\"555-123\"&#125; ] &#125; &#125;;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generating-patches\"><a href=\"#Generating-patches\" class=\"headerlink\" title=\"Generating patches\"></a>Generating patches</h2><p>提供一个类似于观察者，先获取原始文档结构（observe），之后文档进行变化，最后执行操作，可以得到应有的操作流程。示例如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">document</span> = &#123; firstName: <span class=\"string\">\"Joachim\"</span>, lastName: <span class=\"string\">\"Wester\"</span>, contactDetails: &#123; phoneNumbers: [ &#123; <span class=\"built_in\">number</span>:<span class=\"string\">\"555-123\"</span> &#125;] &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> observer = jsonpatch.observe(<span class=\"built_in\">document</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.firstName = <span class=\"string\">\"Albert\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.contactDetails.phoneNumbers[<span class=\"number\">0</span>].number = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.contactDetails.phoneNumbers.push(&#123; <span class=\"built_in\">number</span>:<span class=\"string\">\"456\"</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> patch = jsonpatch.generate(observer);</span><br><span class=\"line\"><span class=\"comment\">// patch  == [</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; op: \"replace\", path: \"/firstName\", value: \"Albert\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; op: \"replace\", path: \"/contactDetails/phoneNumbers/0/number\", value: \"123\" &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; op: \"add\", path: \"/contactDetails/phoneNumbers/1\", value: &#123;number:\"456\"&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// ];</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"比较两个文档-compare\"><a href=\"#比较两个文档-compare\" class=\"headerlink\" title=\"比较两个文档-compare\"></a>比较两个文档-compare</h2><p>直接比较两个文档，得出从文档A到文档B应有哪些操作（得到操作后可以尝试用这个操作来更新B文档）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> documentA = &#123;user: &#123;firstName: <span class=\"string\">\"Albert\"</span>, lastName: <span class=\"string\">\"Einstein\"</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> documentB = &#123;user: &#123;firstName: <span class=\"string\">\"Albert\"</span>, lastName: <span class=\"string\">\"Collins\"</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> diff = jsonpatch.compare(documentA, documentB);</span><br><span class=\"line\"><span class=\"comment\">//diff == [&#123;op: \"replace\", path: \"/user/lastName\", value: \"Collins\"&#125;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"验证修补程序序列\"><a href=\"#验证修补程序序列\" class=\"headerlink\" title=\"验证修补程序序列\"></a>验证修补程序序列</h2><p>对patch做校验，验证这个补丁是否可以应用到指定的对象上（可能是这个意思）,如果出错可以打印出错误信息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;user: &#123;firstName: <span class=\"string\">\"Albert\"</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> patches = [&#123;op: <span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/user/firstName\"</span>, value: <span class=\"string\">\"Albert\"</span>&#125;, &#123;op: <span class=\"string\">\"replace\"</span>, path: <span class=\"string\">\"/user/lastName\"</span>, value: <span class=\"string\">\"Einstein\"</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> errors = jsonpatch.validate(patches, obj);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (errors.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"> <span class=\"comment\">//there are no errors!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; errors.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!errors[i]) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Valid patch at index\"</span>, i, patches[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">\"Invalid patch at index\"</span>, i, errors[i], patches[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Json-Patch-API\"><a href=\"#Json-Patch-API\" class=\"headerlink\" title=\"Json Patch API\"></a>Json Patch API</h1><p>函数原型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyPatch</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">document</span>: T, patch: Operation[], validateOperation?: <span class=\"built_in\">boolean</span> | Validator&lt;T&gt;, mutateDocument: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>, banPrototypeModifications: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span>): <span class=\"title\">PatchResult</span>&lt;<span class=\"title\">T</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对参数的释义：    </p>\n<ul>\n<li>document：将要patch的文档；    </li>\n<li>patch：一个json-patch数组，一组可执行的操作；    </li>\n<li>validateOperation： boolean类型，是否使用默认校验器对每个操作进行校验或通过校验器回调；<br>…<br>其余部分可以自行查文档</li>\n</ul>\n"},{"title":"《第一本docker书》学习笔记01","date":"2020-04-21T13:03:10.000Z","_content":"# Docker与配置管理\n## docker的核心组件\n（1）docker客户端和服务器，也称为docker引擎    \n（2）docker镜像     \n（3）Registry    \n（4）Docker容器\n## 基本使用\n### docker info\n查看docker程序是否存在，功能是否正常\n### docker exec(docker run)\ndocker run 命令提供了docker容器的创建到启动的功能    \n(1)-i:保证容器STDIN是开启的     \n(2)-t:为要撞见的容器分配一个伪tty终端\ndocker exec -it backend_jiapin /bi\nn/bash","source":"_posts/docker01.md","raw":"---\ntitle: 《第一本docker书》学习笔记01\ndate: 2020-04-21 21:03:10\ntags: \n- 学习\ncategories: \n- docker\n---\n# Docker与配置管理\n## docker的核心组件\n（1）docker客户端和服务器，也称为docker引擎    \n（2）docker镜像     \n（3）Registry    \n（4）Docker容器\n## 基本使用\n### docker info\n查看docker程序是否存在，功能是否正常\n### docker exec(docker run)\ndocker run 命令提供了docker容器的创建到启动的功能    \n(1)-i:保证容器STDIN是开启的     \n(2)-t:为要撞见的容器分配一个伪tty终端\ndocker exec -it backend_jiapin /bi\nn/bash","slug":"docker01","published":1,"updated":"2021-07-23T01:58:27.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdo002kl0xo1hw47wfn","content":"<h1 id=\"Docker与配置管理\"><a href=\"#Docker与配置管理\" class=\"headerlink\" title=\"Docker与配置管理\"></a>Docker与配置管理</h1><h2 id=\"docker的核心组件\"><a href=\"#docker的核心组件\" class=\"headerlink\" title=\"docker的核心组件\"></a>docker的核心组件</h2><p>（1）docker客户端和服务器，也称为docker引擎<br>（2）docker镜像<br>（3）Registry<br>（4）Docker容器</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"docker-info\"><a href=\"#docker-info\" class=\"headerlink\" title=\"docker info\"></a>docker info</h3><p>查看docker程序是否存在，功能是否正常</p>\n<h3 id=\"docker-exec-docker-run\"><a href=\"#docker-exec-docker-run\" class=\"headerlink\" title=\"docker exec(docker run)\"></a>docker exec(docker run)</h3><p>docker run 命令提供了docker容器的创建到启动的功能<br>(1)-i:保证容器STDIN是开启的<br>(2)-t:为要撞见的容器分配一个伪tty终端<br>docker exec -it backend_jiapin /bi<br>n/bash</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker与配置管理\"><a href=\"#Docker与配置管理\" class=\"headerlink\" title=\"Docker与配置管理\"></a>Docker与配置管理</h1><h2 id=\"docker的核心组件\"><a href=\"#docker的核心组件\" class=\"headerlink\" title=\"docker的核心组件\"></a>docker的核心组件</h2><p>（1）docker客户端和服务器，也称为docker引擎<br>（2）docker镜像<br>（3）Registry<br>（4）Docker容器</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"docker-info\"><a href=\"#docker-info\" class=\"headerlink\" title=\"docker info\"></a>docker info</h3><p>查看docker程序是否存在，功能是否正常</p>\n<h3 id=\"docker-exec-docker-run\"><a href=\"#docker-exec-docker-run\" class=\"headerlink\" title=\"docker exec(docker run)\"></a>docker exec(docker run)</h3><p>docker run 命令提供了docker容器的创建到启动的功能<br>(1)-i:保证容器STDIN是开启的<br>(2)-t:为要撞见的容器分配一个伪tty终端<br>docker exec -it backend_jiapin /bi<br>n/bash</p>\n"},{"title":"减肥日记-介绍","date":"2019-05-23T03:50:00.000Z","_content":"# 创立原因及目标\n我的表姐要在圣诞节前一天结婚（不是崇洋媚外，只是那时候恰好是个良辰吉日，我们老家又比较喜欢冬天结婚，这样很多亲戚都回家了）。算下来现在距离那天也差不多二百多天，我如果能够成功减肥，这样也不至于在她其他漂亮伴娘的衬托下给她丢脸了（这其中关系比较复杂，就不细说了）。    \n基于以上原因，我创立了一个200天减肥法，在200天内，以一个小基数（虽然我120斤也不算小基数了）的情况，减肥20斤左右。    \n# 如何执行\n我定下的这个200天减肥计划是可以立即执行的，而不是说要先做什么准备，因为如果准备时间过长，或者要准备的东西太多了，人很可能在这个时候就放弃。    \n但是既然是减肥，怎么可能什么准备都没有呢？当然是有的，只不过准备时间也包含在了减肥时间以内，这样就可以直接开始了。     \n而且我这个计划也不会太激进，避免人产生逆反心理。毕竟我也的确是一个好吃懒做的人，我特别爱吃火锅，烤串，辣条，又特别讨厌运动。从刚上大学就开始琢磨着减肥，到如今也已经六年过去了，体重还是120，真是可怕。\n# 具体信息\n整个200天减肥计划分成了8个阶段，为了避免放弃，避免产生逆反心理，避免反弹，我实在是做了很多前期调研。自己几斤几两我还是知道的，什么21天减肥法，轻断食，各种减肥操，跑步我都试过，最后无一例外全部反弹了，大三的时候我曾经瘦到过102斤，可惜最终也没能保持住，半年不到就反弹回来了，所以说，我需要一个稳妥的，进度也许不够快但是绝对有效的减肥方案。\n# 概述\n这八个阶段分别是:10天适应期，20天习惯养成期，50天正常减肥期（上），20天疯狂减脂期，10天塑身期，50天正常减肥期（下），20天恢复期，20天稳定期\n# 分条解析\n## 10天适应期 \n### 最终目标\n适应期的最终目标非常简单，就是十天的时间，把长期处于996，生活作息极其不规律的自己变成一个作息规律，已经为减肥做好了准备的自己，严格来说，就是一个准备阶段。    \n既然是准备阶段，自然要求不会太苛刻，只有几点基本要求:形成良好的饮食，睡眠，喝水等习惯，绝对不可以暴饮暴食，不能说预料到接下来会有很长一段时间要开始减肥了，就趁现在疯狂进食。这个阶段需要形成良好的生活习惯，为后期打好基础。    \n### 目标解析\n#### 维持良好的睡眠\n每天至少睡6.5小时（因为我是程序员，而且996，偶尔还会加班，所以说至少6.5，正常来说要减肥每天起码要睡7－8小时，我大部分都可以控制到这个时间）     \n#### 对食物的控制\n开始注意食物搭配，保持吃饭规律，慢慢形成少食多餐的习惯，拒绝零食（如果实在想吃可以吃一些不是零食的小吃，比如烤冷面，手抓饼等，前提是这些小吃会占据一顿饭）    \n#### 放松压力\n这没什么好说的，比较唯心，就是舒缓情绪，不要过分紧张等等\n#### 物品准备\n这十天准备期可以买一些减肥必备的物品，牌子不重要，多看一些评价自然知道好不好了    \n（1）燕麦（最好带坚果的，可以选择含有少量糖的，不然太难吃了，很可能吃一半就放弃了，这可是将来的晚餐，别变成了摆设）    \n（2）瑜伽垫（可以选择厚一些的）   \n（3）滚轴（放松小腿用）   \n（4）运动套装（至少两件运动内衣，跑步用的裤子）    \n（5）运动鞋（舒适，性价比高就可以）    \n（6）坚果（选评价高的就行）    \n（7）全麦面包（或者其他类似的可增加饱腹感，能量又不高的食物）    \n（8）运动用手机包     \n还有其他必须有但是一般人都有的东西：耳机（最好是蓝牙耳机），体重秤，软尺（量腰围用）    \n#### 其他准备\n\n初始体重：120斤（60kg）    \n目标体重：97（58.5kg）     \n#阶段划分\n减肥时间总共200天，以下是按照不同阶段进行时间划分\n##适应期\n10天，此阶段需要达到的目标如下：    \n（1）逐渐形成规律的睡眠时间：6.5-8.5小时    \n（2）逐步减少食量","source":"_posts/fit01.md","raw":"---\ntitle: 减肥日记-介绍\ndate: 2019-05-23 11:50:00\ntags: \n- 减肥\ncategories: \n- 生活\n- 减肥\n- 适应期\n---\n# 创立原因及目标\n我的表姐要在圣诞节前一天结婚（不是崇洋媚外，只是那时候恰好是个良辰吉日，我们老家又比较喜欢冬天结婚，这样很多亲戚都回家了）。算下来现在距离那天也差不多二百多天，我如果能够成功减肥，这样也不至于在她其他漂亮伴娘的衬托下给她丢脸了（这其中关系比较复杂，就不细说了）。    \n基于以上原因，我创立了一个200天减肥法，在200天内，以一个小基数（虽然我120斤也不算小基数了）的情况，减肥20斤左右。    \n# 如何执行\n我定下的这个200天减肥计划是可以立即执行的，而不是说要先做什么准备，因为如果准备时间过长，或者要准备的东西太多了，人很可能在这个时候就放弃。    \n但是既然是减肥，怎么可能什么准备都没有呢？当然是有的，只不过准备时间也包含在了减肥时间以内，这样就可以直接开始了。     \n而且我这个计划也不会太激进，避免人产生逆反心理。毕竟我也的确是一个好吃懒做的人，我特别爱吃火锅，烤串，辣条，又特别讨厌运动。从刚上大学就开始琢磨着减肥，到如今也已经六年过去了，体重还是120，真是可怕。\n# 具体信息\n整个200天减肥计划分成了8个阶段，为了避免放弃，避免产生逆反心理，避免反弹，我实在是做了很多前期调研。自己几斤几两我还是知道的，什么21天减肥法，轻断食，各种减肥操，跑步我都试过，最后无一例外全部反弹了，大三的时候我曾经瘦到过102斤，可惜最终也没能保持住，半年不到就反弹回来了，所以说，我需要一个稳妥的，进度也许不够快但是绝对有效的减肥方案。\n# 概述\n这八个阶段分别是:10天适应期，20天习惯养成期，50天正常减肥期（上），20天疯狂减脂期，10天塑身期，50天正常减肥期（下），20天恢复期，20天稳定期\n# 分条解析\n## 10天适应期 \n### 最终目标\n适应期的最终目标非常简单，就是十天的时间，把长期处于996，生活作息极其不规律的自己变成一个作息规律，已经为减肥做好了准备的自己，严格来说，就是一个准备阶段。    \n既然是准备阶段，自然要求不会太苛刻，只有几点基本要求:形成良好的饮食，睡眠，喝水等习惯，绝对不可以暴饮暴食，不能说预料到接下来会有很长一段时间要开始减肥了，就趁现在疯狂进食。这个阶段需要形成良好的生活习惯，为后期打好基础。    \n### 目标解析\n#### 维持良好的睡眠\n每天至少睡6.5小时（因为我是程序员，而且996，偶尔还会加班，所以说至少6.5，正常来说要减肥每天起码要睡7－8小时，我大部分都可以控制到这个时间）     \n#### 对食物的控制\n开始注意食物搭配，保持吃饭规律，慢慢形成少食多餐的习惯，拒绝零食（如果实在想吃可以吃一些不是零食的小吃，比如烤冷面，手抓饼等，前提是这些小吃会占据一顿饭）    \n#### 放松压力\n这没什么好说的，比较唯心，就是舒缓情绪，不要过分紧张等等\n#### 物品准备\n这十天准备期可以买一些减肥必备的物品，牌子不重要，多看一些评价自然知道好不好了    \n（1）燕麦（最好带坚果的，可以选择含有少量糖的，不然太难吃了，很可能吃一半就放弃了，这可是将来的晚餐，别变成了摆设）    \n（2）瑜伽垫（可以选择厚一些的）   \n（3）滚轴（放松小腿用）   \n（4）运动套装（至少两件运动内衣，跑步用的裤子）    \n（5）运动鞋（舒适，性价比高就可以）    \n（6）坚果（选评价高的就行）    \n（7）全麦面包（或者其他类似的可增加饱腹感，能量又不高的食物）    \n（8）运动用手机包     \n还有其他必须有但是一般人都有的东西：耳机（最好是蓝牙耳机），体重秤，软尺（量腰围用）    \n#### 其他准备\n\n初始体重：120斤（60kg）    \n目标体重：97（58.5kg）     \n#阶段划分\n减肥时间总共200天，以下是按照不同阶段进行时间划分\n##适应期\n10天，此阶段需要达到的目标如下：    \n（1）逐渐形成规律的睡眠时间：6.5-8.5小时    \n（2）逐步减少食量","slug":"fit01","published":1,"updated":"2021-07-23T01:58:27.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdp002nl0xo5mx5dfnv","content":"<h1 id=\"创立原因及目标\"><a href=\"#创立原因及目标\" class=\"headerlink\" title=\"创立原因及目标\"></a>创立原因及目标</h1><p>我的表姐要在圣诞节前一天结婚（不是崇洋媚外，只是那时候恰好是个良辰吉日，我们老家又比较喜欢冬天结婚，这样很多亲戚都回家了）。算下来现在距离那天也差不多二百多天，我如果能够成功减肥，这样也不至于在她其他漂亮伴娘的衬托下给她丢脸了（这其中关系比较复杂，就不细说了）。<br>基于以上原因，我创立了一个200天减肥法，在200天内，以一个小基数（虽然我120斤也不算小基数了）的情况，减肥20斤左右。    </p>\n<h1 id=\"如何执行\"><a href=\"#如何执行\" class=\"headerlink\" title=\"如何执行\"></a>如何执行</h1><p>我定下的这个200天减肥计划是可以立即执行的，而不是说要先做什么准备，因为如果准备时间过长，或者要准备的东西太多了，人很可能在这个时候就放弃。<br>但是既然是减肥，怎么可能什么准备都没有呢？当然是有的，只不过准备时间也包含在了减肥时间以内，这样就可以直接开始了。<br>而且我这个计划也不会太激进，避免人产生逆反心理。毕竟我也的确是一个好吃懒做的人，我特别爱吃火锅，烤串，辣条，又特别讨厌运动。从刚上大学就开始琢磨着减肥，到如今也已经六年过去了，体重还是120，真是可怕。</p>\n<h1 id=\"具体信息\"><a href=\"#具体信息\" class=\"headerlink\" title=\"具体信息\"></a>具体信息</h1><p>整个200天减肥计划分成了8个阶段，为了避免放弃，避免产生逆反心理，避免反弹，我实在是做了很多前期调研。自己几斤几两我还是知道的，什么21天减肥法，轻断食，各种减肥操，跑步我都试过，最后无一例外全部反弹了，大三的时候我曾经瘦到过102斤，可惜最终也没能保持住，半年不到就反弹回来了，所以说，我需要一个稳妥的，进度也许不够快但是绝对有效的减肥方案。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>这八个阶段分别是:10天适应期，20天习惯养成期，50天正常减肥期（上），20天疯狂减脂期，10天塑身期，50天正常减肥期（下），20天恢复期，20天稳定期</p>\n<h1 id=\"分条解析\"><a href=\"#分条解析\" class=\"headerlink\" title=\"分条解析\"></a>分条解析</h1><h2 id=\"10天适应期\"><a href=\"#10天适应期\" class=\"headerlink\" title=\"10天适应期\"></a>10天适应期</h2><h3 id=\"最终目标\"><a href=\"#最终目标\" class=\"headerlink\" title=\"最终目标\"></a>最终目标</h3><p>适应期的最终目标非常简单，就是十天的时间，把长期处于996，生活作息极其不规律的自己变成一个作息规律，已经为减肥做好了准备的自己，严格来说，就是一个准备阶段。<br>既然是准备阶段，自然要求不会太苛刻，只有几点基本要求:形成良好的饮食，睡眠，喝水等习惯，绝对不可以暴饮暴食，不能说预料到接下来会有很长一段时间要开始减肥了，就趁现在疯狂进食。这个阶段需要形成良好的生活习惯，为后期打好基础。    </p>\n<h3 id=\"目标解析\"><a href=\"#目标解析\" class=\"headerlink\" title=\"目标解析\"></a>目标解析</h3><h4 id=\"维持良好的睡眠\"><a href=\"#维持良好的睡眠\" class=\"headerlink\" title=\"维持良好的睡眠\"></a>维持良好的睡眠</h4><p>每天至少睡6.5小时（因为我是程序员，而且996，偶尔还会加班，所以说至少6.5，正常来说要减肥每天起码要睡7－8小时，我大部分都可以控制到这个时间）     </p>\n<h4 id=\"对食物的控制\"><a href=\"#对食物的控制\" class=\"headerlink\" title=\"对食物的控制\"></a>对食物的控制</h4><p>开始注意食物搭配，保持吃饭规律，慢慢形成少食多餐的习惯，拒绝零食（如果实在想吃可以吃一些不是零食的小吃，比如烤冷面，手抓饼等，前提是这些小吃会占据一顿饭）    </p>\n<h4 id=\"放松压力\"><a href=\"#放松压力\" class=\"headerlink\" title=\"放松压力\"></a>放松压力</h4><p>这没什么好说的，比较唯心，就是舒缓情绪，不要过分紧张等等</p>\n<h4 id=\"物品准备\"><a href=\"#物品准备\" class=\"headerlink\" title=\"物品准备\"></a>物品准备</h4><p>这十天准备期可以买一些减肥必备的物品，牌子不重要，多看一些评价自然知道好不好了<br>（1）燕麦（最好带坚果的，可以选择含有少量糖的，不然太难吃了，很可能吃一半就放弃了，这可是将来的晚餐，别变成了摆设）<br>（2）瑜伽垫（可以选择厚一些的）<br>（3）滚轴（放松小腿用）<br>（4）运动套装（至少两件运动内衣，跑步用的裤子）<br>（5）运动鞋（舒适，性价比高就可以）<br>（6）坚果（选评价高的就行）<br>（7）全麦面包（或者其他类似的可增加饱腹感，能量又不高的食物）<br>（8）运动用手机包<br>还有其他必须有但是一般人都有的东西：耳机（最好是蓝牙耳机），体重秤，软尺（量腰围用）    </p>\n<h4 id=\"其他准备\"><a href=\"#其他准备\" class=\"headerlink\" title=\"其他准备\"></a>其他准备</h4><p>初始体重：120斤（60kg）<br>目标体重：97（58.5kg）<br>#阶段划分<br>减肥时间总共200天，以下是按照不同阶段进行时间划分<br>##适应期<br>10天，此阶段需要达到的目标如下：<br>（1）逐渐形成规律的睡眠时间：6.5-8.5小时<br>（2）逐步减少食量</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创立原因及目标\"><a href=\"#创立原因及目标\" class=\"headerlink\" title=\"创立原因及目标\"></a>创立原因及目标</h1><p>我的表姐要在圣诞节前一天结婚（不是崇洋媚外，只是那时候恰好是个良辰吉日，我们老家又比较喜欢冬天结婚，这样很多亲戚都回家了）。算下来现在距离那天也差不多二百多天，我如果能够成功减肥，这样也不至于在她其他漂亮伴娘的衬托下给她丢脸了（这其中关系比较复杂，就不细说了）。<br>基于以上原因，我创立了一个200天减肥法，在200天内，以一个小基数（虽然我120斤也不算小基数了）的情况，减肥20斤左右。    </p>\n<h1 id=\"如何执行\"><a href=\"#如何执行\" class=\"headerlink\" title=\"如何执行\"></a>如何执行</h1><p>我定下的这个200天减肥计划是可以立即执行的，而不是说要先做什么准备，因为如果准备时间过长，或者要准备的东西太多了，人很可能在这个时候就放弃。<br>但是既然是减肥，怎么可能什么准备都没有呢？当然是有的，只不过准备时间也包含在了减肥时间以内，这样就可以直接开始了。<br>而且我这个计划也不会太激进，避免人产生逆反心理。毕竟我也的确是一个好吃懒做的人，我特别爱吃火锅，烤串，辣条，又特别讨厌运动。从刚上大学就开始琢磨着减肥，到如今也已经六年过去了，体重还是120，真是可怕。</p>\n<h1 id=\"具体信息\"><a href=\"#具体信息\" class=\"headerlink\" title=\"具体信息\"></a>具体信息</h1><p>整个200天减肥计划分成了8个阶段，为了避免放弃，避免产生逆反心理，避免反弹，我实在是做了很多前期调研。自己几斤几两我还是知道的，什么21天减肥法，轻断食，各种减肥操，跑步我都试过，最后无一例外全部反弹了，大三的时候我曾经瘦到过102斤，可惜最终也没能保持住，半年不到就反弹回来了，所以说，我需要一个稳妥的，进度也许不够快但是绝对有效的减肥方案。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>这八个阶段分别是:10天适应期，20天习惯养成期，50天正常减肥期（上），20天疯狂减脂期，10天塑身期，50天正常减肥期（下），20天恢复期，20天稳定期</p>\n<h1 id=\"分条解析\"><a href=\"#分条解析\" class=\"headerlink\" title=\"分条解析\"></a>分条解析</h1><h2 id=\"10天适应期\"><a href=\"#10天适应期\" class=\"headerlink\" title=\"10天适应期\"></a>10天适应期</h2><h3 id=\"最终目标\"><a href=\"#最终目标\" class=\"headerlink\" title=\"最终目标\"></a>最终目标</h3><p>适应期的最终目标非常简单，就是十天的时间，把长期处于996，生活作息极其不规律的自己变成一个作息规律，已经为减肥做好了准备的自己，严格来说，就是一个准备阶段。<br>既然是准备阶段，自然要求不会太苛刻，只有几点基本要求:形成良好的饮食，睡眠，喝水等习惯，绝对不可以暴饮暴食，不能说预料到接下来会有很长一段时间要开始减肥了，就趁现在疯狂进食。这个阶段需要形成良好的生活习惯，为后期打好基础。    </p>\n<h3 id=\"目标解析\"><a href=\"#目标解析\" class=\"headerlink\" title=\"目标解析\"></a>目标解析</h3><h4 id=\"维持良好的睡眠\"><a href=\"#维持良好的睡眠\" class=\"headerlink\" title=\"维持良好的睡眠\"></a>维持良好的睡眠</h4><p>每天至少睡6.5小时（因为我是程序员，而且996，偶尔还会加班，所以说至少6.5，正常来说要减肥每天起码要睡7－8小时，我大部分都可以控制到这个时间）     </p>\n<h4 id=\"对食物的控制\"><a href=\"#对食物的控制\" class=\"headerlink\" title=\"对食物的控制\"></a>对食物的控制</h4><p>开始注意食物搭配，保持吃饭规律，慢慢形成少食多餐的习惯，拒绝零食（如果实在想吃可以吃一些不是零食的小吃，比如烤冷面，手抓饼等，前提是这些小吃会占据一顿饭）    </p>\n<h4 id=\"放松压力\"><a href=\"#放松压力\" class=\"headerlink\" title=\"放松压力\"></a>放松压力</h4><p>这没什么好说的，比较唯心，就是舒缓情绪，不要过分紧张等等</p>\n<h4 id=\"物品准备\"><a href=\"#物品准备\" class=\"headerlink\" title=\"物品准备\"></a>物品准备</h4><p>这十天准备期可以买一些减肥必备的物品，牌子不重要，多看一些评价自然知道好不好了<br>（1）燕麦（最好带坚果的，可以选择含有少量糖的，不然太难吃了，很可能吃一半就放弃了，这可是将来的晚餐，别变成了摆设）<br>（2）瑜伽垫（可以选择厚一些的）<br>（3）滚轴（放松小腿用）<br>（4）运动套装（至少两件运动内衣，跑步用的裤子）<br>（5）运动鞋（舒适，性价比高就可以）<br>（6）坚果（选评价高的就行）<br>（7）全麦面包（或者其他类似的可增加饱腹感，能量又不高的食物）<br>（8）运动用手机包<br>还有其他必须有但是一般人都有的东西：耳机（最好是蓝牙耳机），体重秤，软尺（量腰围用）    </p>\n<h4 id=\"其他准备\"><a href=\"#其他准备\" class=\"headerlink\" title=\"其他准备\"></a>其他准备</h4><p>初始体重：120斤（60kg）<br>目标体重：97（58.5kg）<br>#阶段划分<br>减肥时间总共200天，以下是按照不同阶段进行时间划分<br>##适应期<br>10天，此阶段需要达到的目标如下：<br>（1）逐渐形成规律的睡眠时间：6.5-8.5小时<br>（2）逐步减少食量</p>\n"},{"title":"python Generators","date":"2019-03-14T06:41:10.000Z","_content":"##迭代器Iterator\n迭代器是一个可以让程序员遍历一个容器的对象，一个迭代器在遍历并读取一个容器的数据元素时不会执行一个迭代。\n**迭代器三个部分**\n可迭代对象\n迭代器\n迭代\n**可迭代对象**\npython中的任意对象，只要定义了可以返回一个迭代器的__iter__方法，或者定义了可以支持下标索引的__getitem__方法，那么就是一个可跌打对象\n**迭代器**\n任意对象，只要定义了next(Python2)或者__next__方法，它就是一个迭代器\n**迭代**\n从某个地方取出一个元素的过程，当使用一个循环来遍历某个东西时，这个过程本身就叫做迭代。\n##生成器Generators\n生成器也是一种迭代器，但是只能对其迭代一次","source":"_posts/generators.md","raw":"---\ntitle: python Generators\ndate: 2019-03-14 14:41:10\ntags:\n---\n##迭代器Iterator\n迭代器是一个可以让程序员遍历一个容器的对象，一个迭代器在遍历并读取一个容器的数据元素时不会执行一个迭代。\n**迭代器三个部分**\n可迭代对象\n迭代器\n迭代\n**可迭代对象**\npython中的任意对象，只要定义了可以返回一个迭代器的__iter__方法，或者定义了可以支持下标索引的__getitem__方法，那么就是一个可跌打对象\n**迭代器**\n任意对象，只要定义了next(Python2)或者__next__方法，它就是一个迭代器\n**迭代**\n从某个地方取出一个元素的过程，当使用一个循环来遍历某个东西时，这个过程本身就叫做迭代。\n##生成器Generators\n生成器也是一种迭代器，但是只能对其迭代一次","slug":"generators","published":1,"updated":"2021-07-23T01:58:27.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdq002rl0xodkqff8pp","content":"<p>##迭代器Iterator<br>迭代器是一个可以让程序员遍历一个容器的对象，一个迭代器在遍历并读取一个容器的数据元素时不会执行一个迭代。<br><strong>迭代器三个部分</strong><br>可迭代对象<br>迭代器<br>迭代<br><strong>可迭代对象</strong><br>python中的任意对象，只要定义了可以返回一个迭代器的<strong>iter</strong>方法，或者定义了可以支持下标索引的<strong>getitem</strong>方法，那么就是一个可跌打对象<br><strong>迭代器</strong><br>任意对象，只要定义了next(Python2)或者<strong>next</strong>方法，它就是一个迭代器<br><strong>迭代</strong><br>从某个地方取出一个元素的过程，当使用一个循环来遍历某个东西时，这个过程本身就叫做迭代。<br>##生成器Generators<br>生成器也是一种迭代器，但是只能对其迭代一次</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##迭代器Iterator<br>迭代器是一个可以让程序员遍历一个容器的对象，一个迭代器在遍历并读取一个容器的数据元素时不会执行一个迭代。<br><strong>迭代器三个部分</strong><br>可迭代对象<br>迭代器<br>迭代<br><strong>可迭代对象</strong><br>python中的任意对象，只要定义了可以返回一个迭代器的<strong>iter</strong>方法，或者定义了可以支持下标索引的<strong>getitem</strong>方法，那么就是一个可跌打对象<br><strong>迭代器</strong><br>任意对象，只要定义了next(Python2)或者<strong>next</strong>方法，它就是一个迭代器<br><strong>迭代</strong><br>从某个地方取出一个元素的过程，当使用一个循环来遍历某个东西时，这个过程本身就叫做迭代。<br>##生成器Generators<br>生成器也是一种迭代器，但是只能对其迭代一次</p>\n"},{"title":"typescript泛型","date":"2019-07-22T12:37:10.000Z","_content":"# typescript泛型\n## 介绍\n","source":"_posts/genericity.md","raw":"---\ntitle: typescript泛型\ndate: 2019-07-22 20:37:10\ntags:\ncategories: \n- 前端\n- typescript\n---\n# typescript泛型\n## 介绍\n","slug":"genericity","published":1,"updated":"2021-07-23T01:58:27.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdr002tl0xobgvw1d19","content":"<h1 id=\"typescript泛型\"><a href=\"#typescript泛型\" class=\"headerlink\" title=\"typescript泛型\"></a>typescript泛型</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"typescript泛型\"><a href=\"#typescript泛型\" class=\"headerlink\" title=\"typescript泛型\"></a>typescript泛型</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2>"},{"title":"gitflow command version","date":"2019-04-24T13:03:10.000Z","_content":"","source":"_posts/githubGuide.md","raw":"---\ntitle: gitflow command version\ndate: 2019-04-24 21:03:10\ntags: \n- 工作\ncategories: \n- git\n---\n","slug":"githubGuide","published":1,"updated":"2021-07-23T01:58:27.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kds002wl0xo74wu02rc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"gitflow command version","date":"2019-04-24T13:03:10.000Z","_content":"\n\n## 新建feature/hotfix进行项目开发\n------------------------\n更新本地代码仓库缓存\n`git remote update`\n`git checkout develop`\n`git merge origin/develop`\n`git branch feature/20171012_hotel_enhance`\n\n##补充\n1 删除分支\ngit branch --delete --remotes origin/feature/20190214_monthly\ngit push origin :feature/20190214_monthly\n2 add之后回退\ngit reset HEAD <file>\n3 撤销commit \ngit commit --amend\n4 撤销已经commit但是没有push\ngit log 找到commit id\ngit reset --hard commit_id    完成撤销,同时将代码恢复到前一commit_id 对应的版本  \ngit reset commit_id      完成Commit命令的撤销，但是不对代码修改进行撤销，可以直接通过git commit 重新提交对本地代码的修改\n## git fetch\n\n","source":"_posts/git.md","raw":"---\ntitle: gitflow command version\ndate: 2019-04-24 21:03:10\ntags: \n- 工作\ncategories: \n- git\n---\n\n\n## 新建feature/hotfix进行项目开发\n------------------------\n更新本地代码仓库缓存\n`git remote update`\n`git checkout develop`\n`git merge origin/develop`\n`git branch feature/20171012_hotel_enhance`\n\n##补充\n1 删除分支\ngit branch --delete --remotes origin/feature/20190214_monthly\ngit push origin :feature/20190214_monthly\n2 add之后回退\ngit reset HEAD <file>\n3 撤销commit \ngit commit --amend\n4 撤销已经commit但是没有push\ngit log 找到commit id\ngit reset --hard commit_id    完成撤销,同时将代码恢复到前一commit_id 对应的版本  \ngit reset commit_id      完成Commit命令的撤销，但是不对代码修改进行撤销，可以直接通过git commit 重新提交对本地代码的修改\n## git fetch\n\n","slug":"git","published":1,"updated":"2021-07-23T01:58:27.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kds002yl0xo4cxz70ss","content":"<h2 id=\"新建feature-hotfix进行项目开发\"><a href=\"#新建feature-hotfix进行项目开发\" class=\"headerlink\" title=\"新建feature/hotfix进行项目开发\"></a>新建feature/hotfix进行项目开发</h2><hr>\n<p>更新本地代码仓库缓存<br><code>git remote update</code><br><code>git checkout develop</code><br><code>git merge origin/develop</code><br><code>git branch feature/20171012_hotel_enhance</code></p>\n<p>##补充<br>1 删除分支<br>git branch –delete –remotes origin/feature/20190214_monthly<br>git push origin :feature/20190214_monthly<br>2 add之后回退<br>git reset HEAD <file><br>3 撤销commit<br>git commit –amend<br>4 撤销已经commit但是没有push<br>git log 找到commit id<br>git reset –hard commit_id    完成撤销,同时将代码恢复到前一commit_id 对应的版本<br>git reset commit_id      完成Commit命令的撤销，但是不对代码修改进行撤销，可以直接通过git commit 重新提交对本地代码的修改</p>\n<h2 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"新建feature-hotfix进行项目开发\"><a href=\"#新建feature-hotfix进行项目开发\" class=\"headerlink\" title=\"新建feature/hotfix进行项目开发\"></a>新建feature/hotfix进行项目开发</h2><hr>\n<p>更新本地代码仓库缓存<br><code>git remote update</code><br><code>git checkout develop</code><br><code>git merge origin/develop</code><br><code>git branch feature/20171012_hotel_enhance</code></p>\n<p>##补充<br>1 删除分支<br>git branch –delete –remotes origin/feature/20190214_monthly<br>git push origin :feature/20190214_monthly<br>2 add之后回退<br>git reset HEAD <file><br>3 撤销commit<br>git commit –amend<br>4 撤销已经commit但是没有push<br>git log 找到commit id<br>git reset –hard commit_id    完成撤销,同时将代码恢复到前一commit_id 对应的版本<br>git reset commit_id      完成Commit命令的撤销，但是不对代码修改进行撤销，可以直接通过git commit 重新提交对本地代码的修改</p>\n<h2 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h2>"},{"title":"生成json映射表","date":"2019-08-15T02:27:44.000Z","_content":"## 生成json映射表代码\n```php\n<?php\n$dic = [\n            'qd' => [...],\n            'mp' => [... 100],\n            'jl' => [...],\n            'sb' => [..., 50, 60, 70, 85, 100],\n            'ly' => [..., 50, 60, 70, 85, 100],\n            'dy' => [...0, 50, 60, 70, 85, 100],\n            'sl' => [...55, 60, 65, 70, 85, 100],\n            'xl' => [... 50, 55, 65, 75, 85, 100],\n            'vl' => [...50, 60, 70, 80, 90, 100],\n            'rh' => [... 100]\n        ];\nfunction getJson($dic) {\n    $res = [];\nforeach($dic as $k => $v){\n    $res[$k] = [];\n    foreach($v as $key => $val) {\n        $res[$k]['mapV'][$key] = [\n            'label' => (string)$key,\n            'value' => (string)$val\n];\n}\n}\nvar_dump(json_encode($res));\n}\ngetJSON($dic);\n?>\n\n```\n","source":"_posts/json.md","raw":"---\ntitle: 生成json映射表\ndate: 2019-08-15 10:27:44\ncategories: \n- 工作\n---\n## 生成json映射表代码\n```php\n<?php\n$dic = [\n            'qd' => [...],\n            'mp' => [... 100],\n            'jl' => [...],\n            'sb' => [..., 50, 60, 70, 85, 100],\n            'ly' => [..., 50, 60, 70, 85, 100],\n            'dy' => [...0, 50, 60, 70, 85, 100],\n            'sl' => [...55, 60, 65, 70, 85, 100],\n            'xl' => [... 50, 55, 65, 75, 85, 100],\n            'vl' => [...50, 60, 70, 80, 90, 100],\n            'rh' => [... 100]\n        ];\nfunction getJson($dic) {\n    $res = [];\nforeach($dic as $k => $v){\n    $res[$k] = [];\n    foreach($v as $key => $val) {\n        $res[$k]['mapV'][$key] = [\n            'label' => (string)$key,\n            'value' => (string)$val\n];\n}\n}\nvar_dump(json_encode($res));\n}\ngetJSON($dic);\n?>\n\n```\n","slug":"json","published":1,"updated":"2021-07-23T01:58:27.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdt0031l0xo4x8n0tdd","content":"<h2 id=\"生成json映射表代码\"><a href=\"#生成json映射表代码\" class=\"headerlink\" title=\"生成json映射表代码\"></a>生成json映射表代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$dic = [</span><br><span class=\"line\">            <span class=\"string\">'qd'</span> =&gt; [...],</span><br><span class=\"line\">            <span class=\"string\">'mp'</span> =&gt; [... <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'jl'</span> =&gt; [...],</span><br><span class=\"line\">            <span class=\"string\">'sb'</span> =&gt; [..., <span class=\"number\">50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'ly'</span> =&gt; [..., <span class=\"number\">50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'dy'</span> =&gt; [..<span class=\"number\">.0</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'sl'</span> =&gt; [..<span class=\"number\">.55</span>, <span class=\"number\">60</span>, <span class=\"number\">65</span>, <span class=\"number\">70</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'xl'</span> =&gt; [... <span class=\"number\">50</span>, <span class=\"number\">55</span>, <span class=\"number\">65</span>, <span class=\"number\">75</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'vl'</span> =&gt; [..<span class=\"number\">.50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">80</span>, <span class=\"number\">90</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'rh'</span> =&gt; [... <span class=\"number\">100</span>]</span><br><span class=\"line\">        ];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getJson</span><span class=\"params\">($dic)</span> </span>&#123;</span><br><span class=\"line\">    $res = [];</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($dic <span class=\"keyword\">as</span> $k =&gt; $v)&#123;</span><br><span class=\"line\">    $res[$k] = [];</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($v <span class=\"keyword\">as</span> $key =&gt; $val) &#123;</span><br><span class=\"line\">        $res[$k][<span class=\"string\">'mapV'</span>][$key] = [</span><br><span class=\"line\">            <span class=\"string\">'label'</span> =&gt; (string)$key,</span><br><span class=\"line\">            <span class=\"string\">'value'</span> =&gt; (string)$val</span><br><span class=\"line\">];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(json_encode($res));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getJSON($dic);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生成json映射表代码\"><a href=\"#生成json映射表代码\" class=\"headerlink\" title=\"生成json映射表代码\"></a>生成json映射表代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$dic = [</span><br><span class=\"line\">            <span class=\"string\">'qd'</span> =&gt; [...],</span><br><span class=\"line\">            <span class=\"string\">'mp'</span> =&gt; [... <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'jl'</span> =&gt; [...],</span><br><span class=\"line\">            <span class=\"string\">'sb'</span> =&gt; [..., <span class=\"number\">50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'ly'</span> =&gt; [..., <span class=\"number\">50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'dy'</span> =&gt; [..<span class=\"number\">.0</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'sl'</span> =&gt; [..<span class=\"number\">.55</span>, <span class=\"number\">60</span>, <span class=\"number\">65</span>, <span class=\"number\">70</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'xl'</span> =&gt; [... <span class=\"number\">50</span>, <span class=\"number\">55</span>, <span class=\"number\">65</span>, <span class=\"number\">75</span>, <span class=\"number\">85</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'vl'</span> =&gt; [..<span class=\"number\">.50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">80</span>, <span class=\"number\">90</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">            <span class=\"string\">'rh'</span> =&gt; [... <span class=\"number\">100</span>]</span><br><span class=\"line\">        ];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getJson</span><span class=\"params\">($dic)</span> </span>&#123;</span><br><span class=\"line\">    $res = [];</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($dic <span class=\"keyword\">as</span> $k =&gt; $v)&#123;</span><br><span class=\"line\">    $res[$k] = [];</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($v <span class=\"keyword\">as</span> $key =&gt; $val) &#123;</span><br><span class=\"line\">        $res[$k][<span class=\"string\">'mapV'</span>][$key] = [</span><br><span class=\"line\">            <span class=\"string\">'label'</span> =&gt; (string)$key,</span><br><span class=\"line\">            <span class=\"string\">'value'</span> =&gt; (string)$val</span><br><span class=\"line\">];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(json_encode($res));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getJSON($dic);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"kubenetes权威指南1-2章","date":"2020-05-16T10:00:00.000Z","_content":"## kubenetes是什么\nk8s是一个全新的基于容器技术的分布式架构领先方案，一个开放的开发平台，一个完备的分布式系统支撑平台\n## k8s重要资源对象介绍\n### Master\n#### 概念介绍\nk8s中的Master指的是集群控制节点，在每个集群里都需要有一个Master来负责整个集群的管理和控制。\n#### 关键进程\n（1）Kubenetes API Server(kube-apiserver):提供了HTTP Rest接口的额关键服务进程，是\nkubenetes里所有资源的增删改查等操作的唯一入口，也是集群控制的入口进程    \n（2）kubenetes Controller Manager(kube-controller-manager):kubenetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的大总管    \n（3）Kubenetes Scheduler(kube-scheduler):负责资源调度(Pod调度)的进程，相当于哦公交公司的调度室    \n### Node\n#### 概念介绍\n除了Master,Kubenetes集群中的其他机器被称为Node。Node是集群中的工作负载节点，每个Node都会被Master分配一些工作负载(Docker容器)，当某个Node宕机时，其上的工作负载会被Master自动转移到其他节点上\n#### 关键进程\n（1）kubelet:负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，，实现集群管理的基本功能    \n（2）kube-proxy:实现kubenetes Service的通信与负载均衡的重要组件    \n（3）Docker Engine：负责本机的容器的创建和管理工作\n### Pod\n#### 概念介绍\n在Kubernetes中，最小的管理元素不是一个个独立的容器，而是Pod,Pod是最小的，管理，创建，计划的最小单元.\n#### 部分概念\n（1）可以设置限额的计算资源有CPU和Memory两种：    \n     &nbsp;&nbsp;通常以千分之一的CPU配额为最小单位，用m来表示    \n     &nbsp;&nbsp;Memory配额也是一个绝对值，单位是内存字节数    \n（2）Event是一个事件的记录，记录了事件的最早产生事件，最后重现事件，重复次数，发起者，类型，以及导致此事件的原因等众多信息。    \n### Label\n#### 概念\n一个Label是一个key=value的键值对,可类似于sql查询语句一样来进行查询\n### Deployment\nDeployment内部使用了Replica Set来实现目的    \n## kubectl的create命令和apply命令的区别\nkubectl create：\n\n（1）kubectl create命令，是先删除所有现有的东西，重新根据yaml文件生成新的。所以要求yaml文件中的配置必须是完整的\n\n（2）kubectl create命令，用同一个yaml 文件执行替换replace命令，将会不成功，fail掉。\n\nkubectl apply：\n\n  kubectl apply命令，根据配置文件里面列出来的内容，升级现有的。所以yaml文件的内容可以只写需要升级的属性\n","source":"_posts/k8s01.md","raw":"---\ntitle: kubenetes权威指南1-2章\ndate: 2020-05-16 18:00:00\ntags: \n- 学习\ncategories: \n- 容器\n- k8s\n- kubenetes权威指南\n---\n## kubenetes是什么\nk8s是一个全新的基于容器技术的分布式架构领先方案，一个开放的开发平台，一个完备的分布式系统支撑平台\n## k8s重要资源对象介绍\n### Master\n#### 概念介绍\nk8s中的Master指的是集群控制节点，在每个集群里都需要有一个Master来负责整个集群的管理和控制。\n#### 关键进程\n（1）Kubenetes API Server(kube-apiserver):提供了HTTP Rest接口的额关键服务进程，是\nkubenetes里所有资源的增删改查等操作的唯一入口，也是集群控制的入口进程    \n（2）kubenetes Controller Manager(kube-controller-manager):kubenetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的大总管    \n（3）Kubenetes Scheduler(kube-scheduler):负责资源调度(Pod调度)的进程，相当于哦公交公司的调度室    \n### Node\n#### 概念介绍\n除了Master,Kubenetes集群中的其他机器被称为Node。Node是集群中的工作负载节点，每个Node都会被Master分配一些工作负载(Docker容器)，当某个Node宕机时，其上的工作负载会被Master自动转移到其他节点上\n#### 关键进程\n（1）kubelet:负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，，实现集群管理的基本功能    \n（2）kube-proxy:实现kubenetes Service的通信与负载均衡的重要组件    \n（3）Docker Engine：负责本机的容器的创建和管理工作\n### Pod\n#### 概念介绍\n在Kubernetes中，最小的管理元素不是一个个独立的容器，而是Pod,Pod是最小的，管理，创建，计划的最小单元.\n#### 部分概念\n（1）可以设置限额的计算资源有CPU和Memory两种：    \n     &nbsp;&nbsp;通常以千分之一的CPU配额为最小单位，用m来表示    \n     &nbsp;&nbsp;Memory配额也是一个绝对值，单位是内存字节数    \n（2）Event是一个事件的记录，记录了事件的最早产生事件，最后重现事件，重复次数，发起者，类型，以及导致此事件的原因等众多信息。    \n### Label\n#### 概念\n一个Label是一个key=value的键值对,可类似于sql查询语句一样来进行查询\n### Deployment\nDeployment内部使用了Replica Set来实现目的    \n## kubectl的create命令和apply命令的区别\nkubectl create：\n\n（1）kubectl create命令，是先删除所有现有的东西，重新根据yaml文件生成新的。所以要求yaml文件中的配置必须是完整的\n\n（2）kubectl create命令，用同一个yaml 文件执行替换replace命令，将会不成功，fail掉。\n\nkubectl apply：\n\n  kubectl apply命令，根据配置文件里面列出来的内容，升级现有的。所以yaml文件的内容可以只写需要升级的属性\n","slug":"k8s01","published":1,"updated":"2021-07-23T01:58:27.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdu0033l0xo5nth7zdl","content":"<h2 id=\"kubenetes是什么\"><a href=\"#kubenetes是什么\" class=\"headerlink\" title=\"kubenetes是什么\"></a>kubenetes是什么</h2><p>k8s是一个全新的基于容器技术的分布式架构领先方案，一个开放的开发平台，一个完备的分布式系统支撑平台</p>\n<h2 id=\"k8s重要资源对象介绍\"><a href=\"#k8s重要资源对象介绍\" class=\"headerlink\" title=\"k8s重要资源对象介绍\"></a>k8s重要资源对象介绍</h2><h3 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h3><h4 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><p>k8s中的Master指的是集群控制节点，在每个集群里都需要有一个Master来负责整个集群的管理和控制。</p>\n<h4 id=\"关键进程\"><a href=\"#关键进程\" class=\"headerlink\" title=\"关键进程\"></a>关键进程</h4><p>（1）Kubenetes API Server(kube-apiserver):提供了HTTP Rest接口的额关键服务进程，是<br>kubenetes里所有资源的增删改查等操作的唯一入口，也是集群控制的入口进程<br>（2）kubenetes Controller Manager(kube-controller-manager):kubenetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的大总管<br>（3）Kubenetes Scheduler(kube-scheduler):负责资源调度(Pod调度)的进程，相当于哦公交公司的调度室    </p>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><h4 id=\"概念介绍-1\"><a href=\"#概念介绍-1\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><p>除了Master,Kubenetes集群中的其他机器被称为Node。Node是集群中的工作负载节点，每个Node都会被Master分配一些工作负载(Docker容器)，当某个Node宕机时，其上的工作负载会被Master自动转移到其他节点上</p>\n<h4 id=\"关键进程-1\"><a href=\"#关键进程-1\" class=\"headerlink\" title=\"关键进程\"></a>关键进程</h4><p>（1）kubelet:负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，，实现集群管理的基本功能<br>（2）kube-proxy:实现kubenetes Service的通信与负载均衡的重要组件<br>（3）Docker Engine：负责本机的容器的创建和管理工作</p>\n<h3 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h3><h4 id=\"概念介绍-2\"><a href=\"#概念介绍-2\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><p>在Kubernetes中，最小的管理元素不是一个个独立的容器，而是Pod,Pod是最小的，管理，创建，计划的最小单元.</p>\n<h4 id=\"部分概念\"><a href=\"#部分概念\" class=\"headerlink\" title=\"部分概念\"></a>部分概念</h4><p>（1）可以设置限额的计算资源有CPU和Memory两种：<br>     &nbsp;&nbsp;通常以千分之一的CPU配额为最小单位，用m来表示<br>     &nbsp;&nbsp;Memory配额也是一个绝对值，单位是内存字节数<br>（2）Event是一个事件的记录，记录了事件的最早产生事件，最后重现事件，重复次数，发起者，类型，以及导致此事件的原因等众多信息。    </p>\n<h3 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>一个Label是一个key=value的键值对,可类似于sql查询语句一样来进行查询</p>\n<h3 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h3><p>Deployment内部使用了Replica Set来实现目的    </p>\n<h2 id=\"kubectl的create命令和apply命令的区别\"><a href=\"#kubectl的create命令和apply命令的区别\" class=\"headerlink\" title=\"kubectl的create命令和apply命令的区别\"></a>kubectl的create命令和apply命令的区别</h2><p>kubectl create：</p>\n<p>（1）kubectl create命令，是先删除所有现有的东西，重新根据yaml文件生成新的。所以要求yaml文件中的配置必须是完整的</p>\n<p>（2）kubectl create命令，用同一个yaml 文件执行替换replace命令，将会不成功，fail掉。</p>\n<p>kubectl apply：</p>\n<p>  kubectl apply命令，根据配置文件里面列出来的内容，升级现有的。所以yaml文件的内容可以只写需要升级的属性</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"kubenetes是什么\"><a href=\"#kubenetes是什么\" class=\"headerlink\" title=\"kubenetes是什么\"></a>kubenetes是什么</h2><p>k8s是一个全新的基于容器技术的分布式架构领先方案，一个开放的开发平台，一个完备的分布式系统支撑平台</p>\n<h2 id=\"k8s重要资源对象介绍\"><a href=\"#k8s重要资源对象介绍\" class=\"headerlink\" title=\"k8s重要资源对象介绍\"></a>k8s重要资源对象介绍</h2><h3 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h3><h4 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><p>k8s中的Master指的是集群控制节点，在每个集群里都需要有一个Master来负责整个集群的管理和控制。</p>\n<h4 id=\"关键进程\"><a href=\"#关键进程\" class=\"headerlink\" title=\"关键进程\"></a>关键进程</h4><p>（1）Kubenetes API Server(kube-apiserver):提供了HTTP Rest接口的额关键服务进程，是<br>kubenetes里所有资源的增删改查等操作的唯一入口，也是集群控制的入口进程<br>（2）kubenetes Controller Manager(kube-controller-manager):kubenetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的大总管<br>（3）Kubenetes Scheduler(kube-scheduler):负责资源调度(Pod调度)的进程，相当于哦公交公司的调度室    </p>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><h4 id=\"概念介绍-1\"><a href=\"#概念介绍-1\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><p>除了Master,Kubenetes集群中的其他机器被称为Node。Node是集群中的工作负载节点，每个Node都会被Master分配一些工作负载(Docker容器)，当某个Node宕机时，其上的工作负载会被Master自动转移到其他节点上</p>\n<h4 id=\"关键进程-1\"><a href=\"#关键进程-1\" class=\"headerlink\" title=\"关键进程\"></a>关键进程</h4><p>（1）kubelet:负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，，实现集群管理的基本功能<br>（2）kube-proxy:实现kubenetes Service的通信与负载均衡的重要组件<br>（3）Docker Engine：负责本机的容器的创建和管理工作</p>\n<h3 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h3><h4 id=\"概念介绍-2\"><a href=\"#概念介绍-2\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h4><p>在Kubernetes中，最小的管理元素不是一个个独立的容器，而是Pod,Pod是最小的，管理，创建，计划的最小单元.</p>\n<h4 id=\"部分概念\"><a href=\"#部分概念\" class=\"headerlink\" title=\"部分概念\"></a>部分概念</h4><p>（1）可以设置限额的计算资源有CPU和Memory两种：<br>     &nbsp;&nbsp;通常以千分之一的CPU配额为最小单位，用m来表示<br>     &nbsp;&nbsp;Memory配额也是一个绝对值，单位是内存字节数<br>（2）Event是一个事件的记录，记录了事件的最早产生事件，最后重现事件，重复次数，发起者，类型，以及导致此事件的原因等众多信息。    </p>\n<h3 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>一个Label是一个key=value的键值对,可类似于sql查询语句一样来进行查询</p>\n<h3 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h3><p>Deployment内部使用了Replica Set来实现目的    </p>\n<h2 id=\"kubectl的create命令和apply命令的区别\"><a href=\"#kubectl的create命令和apply命令的区别\" class=\"headerlink\" title=\"kubectl的create命令和apply命令的区别\"></a>kubectl的create命令和apply命令的区别</h2><p>kubectl create：</p>\n<p>（1）kubectl create命令，是先删除所有现有的东西，重新根据yaml文件生成新的。所以要求yaml文件中的配置必须是完整的</p>\n<p>（2）kubectl create命令，用同一个yaml 文件执行替换replace命令，将会不成功，fail掉。</p>\n<p>kubectl apply：</p>\n<p>  kubectl apply命令，根据配置文件里面列出来的内容，升级现有的。所以yaml文件的内容可以只写需要升级的属性</p>\n"},{"title":"kustomize使用文档","date":"2020-05-21T03:00:00.000Z","_content":"","source":"_posts/kustomize01.md","raw":"---\ntitle: kustomize使用文档\ndate: 2020-05-21 11:00:00\ntags: \n- 学习\ncategories: \n- 容器\n- k8s\n- kustomize\n---\n","slug":"kustomize01","published":1,"updated":"2021-07-23T01:58:27.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdv0036l0xo0o2k1elk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"学习计划","date":"2020-07-08T12:00:40.000Z","_content":"语言： 继续学习go python php     \n操作系统：深入了解linux    \n前端：es6 react    \n熟悉TCP/IP、HTTP等协议 socket网络编程开发    \n尝试对已完成的项目进行压测","source":"_posts/learn_main.md","raw":"---\ntitle: 学习计划\ndate: 2020-07-08 20:00:40\ntags:\n---\n语言： 继续学习go python php     \n操作系统：深入了解linux    \n前端：es6 react    \n熟悉TCP/IP、HTTP等协议 socket网络编程开发    \n尝试对已完成的项目进行压测","slug":"learn_main","published":1,"updated":"2021-07-23T01:58:27.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdw0038l0xo99dvdldn","content":"<p>语言： 继续学习go python php<br>操作系统：深入了解linux<br>前端：es6 react<br>熟悉TCP/IP、HTTP等协议 socket网络编程开发<br>尝试对已完成的项目进行压测</p>\n","site":{"data":{}},"excerpt":"","more":"<p>语言： 继续学习go python php<br>操作系统：深入了解linux<br>前端：es6 react<br>熟悉TCP/IP、HTTP等协议 socket网络编程开发<br>尝试对已完成的项目进行压测</p>\n"},{"title":"linux命令大全","date":"2020-02-27T10:00:00.000Z","_content":"## 系统信息\n### arch\n**描述**\n\n显示机器的处理器架构\n**举例**\n\n![towrow](/images/linux/arch.png)\n### uname\n**描述**\n\n显示机器的处理器架构\n**参数**\n\n-a或--all 　显示全部的信息。     \n-m或--machine 　显示电脑类型。     \n-n或-nodename 　显示在网络上的主机名称。    \n-r或--release 　显示操作系统的发行编号。     \n-s或--sysname 　显示操作系统名称。      \n-v 　显示操作系统的版本。     \n--help 　显示帮助。     \n--version 　显示版本信息。     \n**举例**\n\n![towrow](/images/linux/uname.png)\n\n### dmidecode\n**描述**\n\n显示硬件信息，不常用，可忽略\n## 开关机\n### shutdown\n**描述**\n\n关机或重启    \n**参数**\n\n-t seconds : 设定在几秒钟之后进行关机程序。    \n-k : 并不会真的关机，只是将警告讯息传送给所有使用者。    \n-r : 关机后重新开机。    \n-h : 关机后停机。    \n-n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。    \n-c : 取消目前已经进行中的关机动作。    \n-f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。    \n-F : 关机时，强迫进行 fsck 动作。     \ntime : 设定关机的时间。    \nmessage : 传送给所有使用者的警告讯息。   \n**举例**\n\n```\nshutdown -h now //立即关机\nshutdown -r now //立即重启\n``` \n### reboot\n**描述**\n\n重启    \n**参数**\n\n-n : 在重开机前不做将记忆体资料写回硬盘的动作     \n-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里     \n-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）     \n-f : 强迫重开机，不呼叫 shutdown 这个指令     \n-i : 在重开机之前先把所有网络相关的装置先停止     \n### logout\n**描述**\n\n登出系统\n###","source":"_posts/linuxOpe.md","raw":"---\ntitle: linux命令大全\ndate: 2020-02-27 18:00:00\ntags: \n- 学习\ncategories: \n- 操作系统\n- linux\n- 系统相关\n---\n## 系统信息\n### arch\n**描述**\n\n显示机器的处理器架构\n**举例**\n\n![towrow](/images/linux/arch.png)\n### uname\n**描述**\n\n显示机器的处理器架构\n**参数**\n\n-a或--all 　显示全部的信息。     \n-m或--machine 　显示电脑类型。     \n-n或-nodename 　显示在网络上的主机名称。    \n-r或--release 　显示操作系统的发行编号。     \n-s或--sysname 　显示操作系统名称。      \n-v 　显示操作系统的版本。     \n--help 　显示帮助。     \n--version 　显示版本信息。     \n**举例**\n\n![towrow](/images/linux/uname.png)\n\n### dmidecode\n**描述**\n\n显示硬件信息，不常用，可忽略\n## 开关机\n### shutdown\n**描述**\n\n关机或重启    \n**参数**\n\n-t seconds : 设定在几秒钟之后进行关机程序。    \n-k : 并不会真的关机，只是将警告讯息传送给所有使用者。    \n-r : 关机后重新开机。    \n-h : 关机后停机。    \n-n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。    \n-c : 取消目前已经进行中的关机动作。    \n-f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。    \n-F : 关机时，强迫进行 fsck 动作。     \ntime : 设定关机的时间。    \nmessage : 传送给所有使用者的警告讯息。   \n**举例**\n\n```\nshutdown -h now //立即关机\nshutdown -r now //立即重启\n``` \n### reboot\n**描述**\n\n重启    \n**参数**\n\n-n : 在重开机前不做将记忆体资料写回硬盘的动作     \n-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里     \n-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）     \n-f : 强迫重开机，不呼叫 shutdown 这个指令     \n-i : 在重开机之前先把所有网络相关的装置先停止     \n### logout\n**描述**\n\n登出系统\n###","slug":"linuxOpe","published":1,"updated":"2021-07-23T01:58:27.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdx003bl0xobl3hh2i0","content":"<h2 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h2><h3 id=\"arch\"><a href=\"#arch\" class=\"headerlink\" title=\"arch\"></a>arch</h3><p><strong>描述</strong></p>\n<p>显示机器的处理器架构<br><strong>举例</strong></p>\n<p><img src=\"/images/linux/arch.png\" alt=\"towrow\"></p>\n<h3 id=\"uname\"><a href=\"#uname\" class=\"headerlink\" title=\"uname\"></a>uname</h3><p><strong>描述</strong></p>\n<p>显示机器的处理器架构<br><strong>参数</strong></p>\n<p>-a或–all 　显示全部的信息。<br>-m或–machine 　显示电脑类型。<br>-n或-nodename 　显示在网络上的主机名称。<br>-r或–release 　显示操作系统的发行编号。<br>-s或–sysname 　显示操作系统名称。<br>-v 　显示操作系统的版本。<br>–help 　显示帮助。<br>–version 　显示版本信息。<br><strong>举例</strong></p>\n<p><img src=\"/images/linux/uname.png\" alt=\"towrow\"></p>\n<h3 id=\"dmidecode\"><a href=\"#dmidecode\" class=\"headerlink\" title=\"dmidecode\"></a>dmidecode</h3><p><strong>描述</strong></p>\n<p>显示硬件信息，不常用，可忽略</p>\n<h2 id=\"开关机\"><a href=\"#开关机\" class=\"headerlink\" title=\"开关机\"></a>开关机</h2><h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><p><strong>描述</strong></p>\n<p>关机或重启<br><strong>参数</strong></p>\n<p>-t seconds : 设定在几秒钟之后进行关机程序。<br>-k : 并不会真的关机，只是将警告讯息传送给所有使用者。<br>-r : 关机后重新开机。<br>-h : 关机后停机。<br>-n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。<br>-c : 取消目前已经进行中的关机动作。<br>-f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。<br>-F : 关机时，强迫进行 fsck 动作。<br>time : 设定关机的时间。<br>message : 传送给所有使用者的警告讯息。<br><strong>举例</strong></p>\n<pre><code>shutdown -h now //立即关机\nshutdown -r now //立即重启</code></pre><h3 id=\"reboot\"><a href=\"#reboot\" class=\"headerlink\" title=\"reboot\"></a>reboot</h3><p><strong>描述</strong></p>\n<p>重启<br><strong>参数</strong></p>\n<p>-n : 在重开机前不做将记忆体资料写回硬盘的动作<br>-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里<br>-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）<br>-f : 强迫重开机，不呼叫 shutdown 这个指令<br>-i : 在重开机之前先把所有网络相关的装置先停止     </p>\n<h3 id=\"logout\"><a href=\"#logout\" class=\"headerlink\" title=\"logout\"></a>logout</h3><p><strong>描述</strong></p>\n<p>登出系统<br>###</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h2><h3 id=\"arch\"><a href=\"#arch\" class=\"headerlink\" title=\"arch\"></a>arch</h3><p><strong>描述</strong></p>\n<p>显示机器的处理器架构<br><strong>举例</strong></p>\n<p><img src=\"/images/linux/arch.png\" alt=\"towrow\"></p>\n<h3 id=\"uname\"><a href=\"#uname\" class=\"headerlink\" title=\"uname\"></a>uname</h3><p><strong>描述</strong></p>\n<p>显示机器的处理器架构<br><strong>参数</strong></p>\n<p>-a或–all 　显示全部的信息。<br>-m或–machine 　显示电脑类型。<br>-n或-nodename 　显示在网络上的主机名称。<br>-r或–release 　显示操作系统的发行编号。<br>-s或–sysname 　显示操作系统名称。<br>-v 　显示操作系统的版本。<br>–help 　显示帮助。<br>–version 　显示版本信息。<br><strong>举例</strong></p>\n<p><img src=\"/images/linux/uname.png\" alt=\"towrow\"></p>\n<h3 id=\"dmidecode\"><a href=\"#dmidecode\" class=\"headerlink\" title=\"dmidecode\"></a>dmidecode</h3><p><strong>描述</strong></p>\n<p>显示硬件信息，不常用，可忽略</p>\n<h2 id=\"开关机\"><a href=\"#开关机\" class=\"headerlink\" title=\"开关机\"></a>开关机</h2><h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><p><strong>描述</strong></p>\n<p>关机或重启<br><strong>参数</strong></p>\n<p>-t seconds : 设定在几秒钟之后进行关机程序。<br>-k : 并不会真的关机，只是将警告讯息传送给所有使用者。<br>-r : 关机后重新开机。<br>-h : 关机后停机。<br>-n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。<br>-c : 取消目前已经进行中的关机动作。<br>-f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。<br>-F : 关机时，强迫进行 fsck 动作。<br>time : 设定关机的时间。<br>message : 传送给所有使用者的警告讯息。<br><strong>举例</strong></p>\n<pre><code>shutdown -h now //立即关机\nshutdown -r now //立即重启</code></pre><h3 id=\"reboot\"><a href=\"#reboot\" class=\"headerlink\" title=\"reboot\"></a>reboot</h3><p><strong>描述</strong></p>\n<p>重启<br><strong>参数</strong></p>\n<p>-n : 在重开机前不做将记忆体资料写回硬盘的动作<br>-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里<br>-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）<br>-f : 强迫重开机，不呼叫 shutdown 这个指令<br>-i : 在重开机之前先把所有网络相关的装置先停止     </p>\n<h3 id=\"logout\"><a href=\"#logout\" class=\"headerlink\" title=\"logout\"></a>logout</h3><p><strong>描述</strong></p>\n<p>登出系统<br>###</p>\n"},{"title":"linux命令大全","date":"2020-02-27T10:00:00.000Z","_content":"## 文件操作\n### cat\n**描述**\n\n查看文件内容    \n**参数**\n\n-n 或 –number 由 1 开始对所有输出的行数编号    \n-b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号    \n-s 或 –squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行    \n-v 或 –show-nonprinting    \n**举例**\n1 从键盘创建一个文件：    \n![towrow](/images/linux/cat1.png)\n2 将几个文件合并成一个文件：        \n![towrow](/images/linux/cat2.png)\n### cd\n**描述**","source":"_posts/linuxUse.md","raw":"---\ntitle: linux命令大全\ndate: 2020-02-27 18:00:00\ntags: \n- 学习\ncategories: \n- 操作系统\n- linux\n- 文件相关\n---\n## 文件操作\n### cat\n**描述**\n\n查看文件内容    \n**参数**\n\n-n 或 –number 由 1 开始对所有输出的行数编号    \n-b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号    \n-s 或 –squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行    \n-v 或 –show-nonprinting    \n**举例**\n1 从键盘创建一个文件：    \n![towrow](/images/linux/cat1.png)\n2 将几个文件合并成一个文件：        \n![towrow](/images/linux/cat2.png)\n### cd\n**描述**","slug":"linuxUse","published":1,"updated":"2021-07-23T01:58:27.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdy003cl0xo0d96b8ox","content":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><p><strong>描述</strong></p>\n<p>查看文件内容<br><strong>参数</strong></p>\n<p>-n 或 –number 由 1 开始对所有输出的行数编号<br>-b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号<br>-s 或 –squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行<br>-v 或 –show-nonprinting<br><strong>举例</strong><br>1 从键盘创建一个文件：<br><img src=\"/images/linux/cat1.png\" alt=\"towrow\"><br>2 将几个文件合并成一个文件：<br><img src=\"/images/linux/cat2.png\" alt=\"towrow\"></p>\n<h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><p><strong>描述</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><p><strong>描述</strong></p>\n<p>查看文件内容<br><strong>参数</strong></p>\n<p>-n 或 –number 由 1 开始对所有输出的行数编号<br>-b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号<br>-s 或 –squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行<br>-v 或 –show-nonprinting<br><strong>举例</strong><br>1 从键盘创建一个文件：<br><img src=\"/images/linux/cat1.png\" alt=\"towrow\"><br>2 将几个文件合并成一个文件：<br><img src=\"/images/linux/cat2.png\" alt=\"towrow\"></p>\n<h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><p><strong>描述</strong></p>\n"},{"title":"mongodb使用","date":"2019-04-02T10:27:44.000Z","_content":"# 基础\n* 列出所有数据库:show dbs;\n* 列出所有表：show tables;或show collections;\n* 查询所有数据：db.taname.find().pretty();\n* 查询指定列所有数据：db.tbname.find({},{col1:1,col2:2,...}).pretty();\n* 根据条件查询所有数据：db.tbname.find({name:\"test\"},{col1:1,col2:1}).pretty();\n* 查询结果不包含指定字段：db.tbname.find({},{status:0,col2:0}).pretty();\n# 查询\n#### 1 查询所有数据\ndb.tbname.find().pretty();\n","source":"_posts/mongo1.md","raw":"---\ntitle: mongodb使用\ndate: 2019-04-02 18:27:44\ncategories: \n- 数据库\n- mongodb\n---\n# 基础\n* 列出所有数据库:show dbs;\n* 列出所有表：show tables;或show collections;\n* 查询所有数据：db.taname.find().pretty();\n* 查询指定列所有数据：db.tbname.find({},{col1:1,col2:2,...}).pretty();\n* 根据条件查询所有数据：db.tbname.find({name:\"test\"},{col1:1,col2:1}).pretty();\n* 查询结果不包含指定字段：db.tbname.find({},{status:0,col2:0}).pretty();\n# 查询\n#### 1 查询所有数据\ndb.tbname.find().pretty();\n","slug":"mongo1","published":1,"updated":"2021-07-23T01:58:27.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kdz003gl0xodgtfc34b","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ul>\n<li>列出所有数据库:show dbs;</li>\n<li>列出所有表：show tables;或show collections;</li>\n<li>查询所有数据：db.taname.find().pretty();</li>\n<li>查询指定列所有数据：db.tbname.find({},{col1:1,col2:2,…}).pretty();</li>\n<li>根据条件查询所有数据：db.tbname.find({name:”test”},{col1:1,col2:1}).pretty();</li>\n<li>查询结果不包含指定字段：db.tbname.find({},{status:0,col2:0}).pretty();<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><h4 id=\"1-查询所有数据\"><a href=\"#1-查询所有数据\" class=\"headerlink\" title=\"1 查询所有数据\"></a>1 查询所有数据</h4>db.tbname.find().pretty();</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ul>\n<li>列出所有数据库:show dbs;</li>\n<li>列出所有表：show tables;或show collections;</li>\n<li>查询所有数据：db.taname.find().pretty();</li>\n<li>查询指定列所有数据：db.tbname.find({},{col1:1,col2:2,…}).pretty();</li>\n<li>根据条件查询所有数据：db.tbname.find({name:”test”},{col1:1,col2:1}).pretty();</li>\n<li>查询结果不包含指定字段：db.tbname.find({},{status:0,col2:0}).pretty();<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><h4 id=\"1-查询所有数据\"><a href=\"#1-查询所有数据\" class=\"headerlink\" title=\"1 查询所有数据\"></a>1 查询所有数据</h4>db.tbname.find().pretty();</li>\n</ul>\n"},{"title":"php多维数组相关处理","date":"2020-04-16T10:27:44.000Z","_content":"## 使用场景\n在工作中遇到了两次需要把不确定维度的多维数组渲染出来的情况，且还需要修改值和结构，如果使用json-patch会受到限制（需要根据不同的情况打补丁，且由于结构不一定一致，打补丁可能会错误地修改某些文件），因此需要自行设计批量修改如yaml,json等类似于多级结构的方法\n## 具体解析\n### 多维数组转化的json前端渲染\n结构不固定,获取对应的json，ts实现\n``` \nformatJsonData = (obj: any, name: string, moduleName?: string, getModuleName?: string): any[] => {\n  const arr: any[] = []\n    if (Object.keys(obj)) {\n      let keys = Object.keys(obj);\n      let i = 0;\n      return keys.map((items) => {\n        i++;\n        if (obj[items] instanceof Object) {\n          let itemRes = items;\n          if (obj[items]['type']) {\n            itemRes = obj[items]['type'];\n          }\n          const names = name + '=' + itemRes\n          return this.formatJsonData(obj[items], names, moduleName);\n        } else {\n          const resItems = name + '=' + items;\n          this.routesValue.set(resItems, obj[items])\n          if (getModuleName && resItems === getModuleName) {\n            return obj[items];\n          }\n        }\n      });\n    }\n    return arr\n}\n\n```\n结构不固定，根据json获取对应的值，php实现：\n```php\n<?php\n/**\n     * 将数组格式化为mongo可用的filter\n     * @param array $arr\n     * @param string $origin\n     * @return array\n     */\n    private function formatArr2MongoFilter(array $arr, string $origin = 'data'): array\n    {\n        if (array_keys($arr)) {\n            $keys = array_keys($arr);\n            foreach ($keys as $key) {\n                if (is_array($arr[$key])) {\n                    $resName = $origin . '.' . $key;\n                    return $this->formatArr2MongoFilter($arr[$key], $resName);\n                } else {\n                    $resName = $origin . '.' . $key;\n                    return ['mongoFilter' => $resName, 'value' => $arr[$key]];\n                }\n            }\n        }\n    }\n?>\n```\n## 比较两个多维数组获取差异\n```php\n<?php\n/**\n     * 比较多维数组获取差异值\n     * @param $array1\n     * @param $array2\n     * @return int\n     */\n    private function array_diff_assoc_recursive($array1, $array2)\n    {\n        foreach($array1 as $key => $value)\n        {\n            if(is_array($value))\n            {\n                if(!isset($array2[$key]))\n                {\n                    $difference[$key] = $value;\n                }\n                elseif(!is_array($array2[$key]))\n                {\n                    $difference[$key] = $value;\n                }\n                else\n                {\n                    $new_diff = $this->array_diff_assoc_recursive($value, $array2[$key]);\n                    if($new_diff != FALSE)\n                    {\n                        $difference[$key] = $new_diff;\n                    }\n                }\n            }\n            elseif(!isset($array2[$key]) || $array2[$key] != $value)\n            {\n                $difference[$key] = $value;\n            }\n        }\n        return !isset($difference) ? 0 : $difference;\n    }\n?>\n```","source":"_posts/multiArr.md","raw":"---\ntitle: php多维数组相关处理\ndate: 2020-04-16 18:27:44\ntags: \n- 工作经验\ncategories: \n- php\n---\n## 使用场景\n在工作中遇到了两次需要把不确定维度的多维数组渲染出来的情况，且还需要修改值和结构，如果使用json-patch会受到限制（需要根据不同的情况打补丁，且由于结构不一定一致，打补丁可能会错误地修改某些文件），因此需要自行设计批量修改如yaml,json等类似于多级结构的方法\n## 具体解析\n### 多维数组转化的json前端渲染\n结构不固定,获取对应的json，ts实现\n``` \nformatJsonData = (obj: any, name: string, moduleName?: string, getModuleName?: string): any[] => {\n  const arr: any[] = []\n    if (Object.keys(obj)) {\n      let keys = Object.keys(obj);\n      let i = 0;\n      return keys.map((items) => {\n        i++;\n        if (obj[items] instanceof Object) {\n          let itemRes = items;\n          if (obj[items]['type']) {\n            itemRes = obj[items]['type'];\n          }\n          const names = name + '=' + itemRes\n          return this.formatJsonData(obj[items], names, moduleName);\n        } else {\n          const resItems = name + '=' + items;\n          this.routesValue.set(resItems, obj[items])\n          if (getModuleName && resItems === getModuleName) {\n            return obj[items];\n          }\n        }\n      });\n    }\n    return arr\n}\n\n```\n结构不固定，根据json获取对应的值，php实现：\n```php\n<?php\n/**\n     * 将数组格式化为mongo可用的filter\n     * @param array $arr\n     * @param string $origin\n     * @return array\n     */\n    private function formatArr2MongoFilter(array $arr, string $origin = 'data'): array\n    {\n        if (array_keys($arr)) {\n            $keys = array_keys($arr);\n            foreach ($keys as $key) {\n                if (is_array($arr[$key])) {\n                    $resName = $origin . '.' . $key;\n                    return $this->formatArr2MongoFilter($arr[$key], $resName);\n                } else {\n                    $resName = $origin . '.' . $key;\n                    return ['mongoFilter' => $resName, 'value' => $arr[$key]];\n                }\n            }\n        }\n    }\n?>\n```\n## 比较两个多维数组获取差异\n```php\n<?php\n/**\n     * 比较多维数组获取差异值\n     * @param $array1\n     * @param $array2\n     * @return int\n     */\n    private function array_diff_assoc_recursive($array1, $array2)\n    {\n        foreach($array1 as $key => $value)\n        {\n            if(is_array($value))\n            {\n                if(!isset($array2[$key]))\n                {\n                    $difference[$key] = $value;\n                }\n                elseif(!is_array($array2[$key]))\n                {\n                    $difference[$key] = $value;\n                }\n                else\n                {\n                    $new_diff = $this->array_diff_assoc_recursive($value, $array2[$key]);\n                    if($new_diff != FALSE)\n                    {\n                        $difference[$key] = $new_diff;\n                    }\n                }\n            }\n            elseif(!isset($array2[$key]) || $array2[$key] != $value)\n            {\n                $difference[$key] = $value;\n            }\n        }\n        return !isset($difference) ? 0 : $difference;\n    }\n?>\n```","slug":"multiArr","published":1,"updated":"2021-07-23T01:58:27.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke0003jl0xo19g2d4tb","content":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>在工作中遇到了两次需要把不确定维度的多维数组渲染出来的情况，且还需要修改值和结构，如果使用json-patch会受到限制（需要根据不同的情况打补丁，且由于结构不一定一致，打补丁可能会错误地修改某些文件），因此需要自行设计批量修改如yaml,json等类似于多级结构的方法</p>\n<h2 id=\"具体解析\"><a href=\"#具体解析\" class=\"headerlink\" title=\"具体解析\"></a>具体解析</h2><h3 id=\"多维数组转化的json前端渲染\"><a href=\"#多维数组转化的json前端渲染\" class=\"headerlink\" title=\"多维数组转化的json前端渲染\"></a>多维数组转化的json前端渲染</h3><p>结构不固定,获取对应的json，ts实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formatJsonData &#x3D; (obj: any, name: string, moduleName?: string, getModuleName?: string): any[] &#x3D;&gt; &#123;</span><br><span class=\"line\">  const arr: any[] &#x3D; []</span><br><span class=\"line\">    if (Object.keys(obj)) &#123;</span><br><span class=\"line\">      let keys &#x3D; Object.keys(obj);</span><br><span class=\"line\">      let i &#x3D; 0;</span><br><span class=\"line\">      return keys.map((items) &#x3D;&gt; &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        if (obj[items] instanceof Object) &#123;</span><br><span class=\"line\">          let itemRes &#x3D; items;</span><br><span class=\"line\">          if (obj[items][&#39;type&#39;]) &#123;</span><br><span class=\"line\">            itemRes &#x3D; obj[items][&#39;type&#39;];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          const names &#x3D; name + &#39;&#x3D;&#39; + itemRes</span><br><span class=\"line\">          return this.formatJsonData(obj[items], names, moduleName);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          const resItems &#x3D; name + &#39;&#x3D;&#39; + items;</span><br><span class=\"line\">          this.routesValue.set(resItems, obj[items])</span><br><span class=\"line\">          if (getModuleName &amp;&amp; resItems &#x3D;&#x3D;&#x3D; getModuleName) &#123;</span><br><span class=\"line\">            return obj[items];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构不固定，根据json获取对应的值，php实现：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组格式化为mongo可用的filter</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $origin</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatArr2MongoFilter</span><span class=\"params\">(array $arr, string $origin = <span class=\"string\">'data'</span>)</span>: <span class=\"title\">array</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array_keys($arr)) &#123;</span><br><span class=\"line\">            $keys = array_keys($arr);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($keys <span class=\"keyword\">as</span> $key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (is_array($arr[$key])) &#123;</span><br><span class=\"line\">                    $resName = $origin . <span class=\"string\">'.'</span> . $key;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;formatArr2MongoFilter($arr[$key], $resName);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    $resName = $origin . <span class=\"string\">'.'</span> . $key;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> [<span class=\"string\">'mongoFilter'</span> =&gt; $resName, <span class=\"string\">'value'</span> =&gt; $arr[$key]];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"比较两个多维数组获取差异\"><a href=\"#比较两个多维数组获取差异\" class=\"headerlink\" title=\"比较两个多维数组获取差异\"></a>比较两个多维数组获取差异</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较多维数组获取差异值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $array1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $array2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">array_diff_assoc_recursive</span><span class=\"params\">($array1, $array2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>($array1 <span class=\"keyword\">as</span> $key =&gt; $value)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(is_array($value))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>($array2[$key]))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    $difference[$key] = $value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">elseif</span>(!is_array($array2[$key]))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    $difference[$key] = $value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    $new_diff = <span class=\"keyword\">$this</span>-&gt;array_diff_assoc_recursive($value, $array2[$key]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>($new_diff != <span class=\"keyword\">FALSE</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        $difference[$key] = $new_diff;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">elseif</span>(!<span class=\"keyword\">isset</span>($array2[$key]) || $array2[$key] != $value)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $difference[$key] = $value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"keyword\">isset</span>($difference) ? <span class=\"number\">0</span> : $difference;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>在工作中遇到了两次需要把不确定维度的多维数组渲染出来的情况，且还需要修改值和结构，如果使用json-patch会受到限制（需要根据不同的情况打补丁，且由于结构不一定一致，打补丁可能会错误地修改某些文件），因此需要自行设计批量修改如yaml,json等类似于多级结构的方法</p>\n<h2 id=\"具体解析\"><a href=\"#具体解析\" class=\"headerlink\" title=\"具体解析\"></a>具体解析</h2><h3 id=\"多维数组转化的json前端渲染\"><a href=\"#多维数组转化的json前端渲染\" class=\"headerlink\" title=\"多维数组转化的json前端渲染\"></a>多维数组转化的json前端渲染</h3><p>结构不固定,获取对应的json，ts实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formatJsonData &#x3D; (obj: any, name: string, moduleName?: string, getModuleName?: string): any[] &#x3D;&gt; &#123;</span><br><span class=\"line\">  const arr: any[] &#x3D; []</span><br><span class=\"line\">    if (Object.keys(obj)) &#123;</span><br><span class=\"line\">      let keys &#x3D; Object.keys(obj);</span><br><span class=\"line\">      let i &#x3D; 0;</span><br><span class=\"line\">      return keys.map((items) &#x3D;&gt; &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        if (obj[items] instanceof Object) &#123;</span><br><span class=\"line\">          let itemRes &#x3D; items;</span><br><span class=\"line\">          if (obj[items][&#39;type&#39;]) &#123;</span><br><span class=\"line\">            itemRes &#x3D; obj[items][&#39;type&#39;];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          const names &#x3D; name + &#39;&#x3D;&#39; + itemRes</span><br><span class=\"line\">          return this.formatJsonData(obj[items], names, moduleName);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          const resItems &#x3D; name + &#39;&#x3D;&#39; + items;</span><br><span class=\"line\">          this.routesValue.set(resItems, obj[items])</span><br><span class=\"line\">          if (getModuleName &amp;&amp; resItems &#x3D;&#x3D;&#x3D; getModuleName) &#123;</span><br><span class=\"line\">            return obj[items];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构不固定，根据json获取对应的值，php实现：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组格式化为mongo可用的filter</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $origin</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatArr2MongoFilter</span><span class=\"params\">(array $arr, string $origin = <span class=\"string\">'data'</span>)</span>: <span class=\"title\">array</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array_keys($arr)) &#123;</span><br><span class=\"line\">            $keys = array_keys($arr);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($keys <span class=\"keyword\">as</span> $key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (is_array($arr[$key])) &#123;</span><br><span class=\"line\">                    $resName = $origin . <span class=\"string\">'.'</span> . $key;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;formatArr2MongoFilter($arr[$key], $resName);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    $resName = $origin . <span class=\"string\">'.'</span> . $key;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> [<span class=\"string\">'mongoFilter'</span> =&gt; $resName, <span class=\"string\">'value'</span> =&gt; $arr[$key]];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"比较两个多维数组获取差异\"><a href=\"#比较两个多维数组获取差异\" class=\"headerlink\" title=\"比较两个多维数组获取差异\"></a>比较两个多维数组获取差异</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较多维数组获取差异值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $array1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $array2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">array_diff_assoc_recursive</span><span class=\"params\">($array1, $array2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>($array1 <span class=\"keyword\">as</span> $key =&gt; $value)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(is_array($value))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>($array2[$key]))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    $difference[$key] = $value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">elseif</span>(!is_array($array2[$key]))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    $difference[$key] = $value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    $new_diff = <span class=\"keyword\">$this</span>-&gt;array_diff_assoc_recursive($value, $array2[$key]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>($new_diff != <span class=\"keyword\">FALSE</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        $difference[$key] = $new_diff;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">elseif</span>(!<span class=\"keyword\">isset</span>($array2[$key]) || $array2[$key] != $value)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                $difference[$key] = $value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"keyword\">isset</span>($difference) ? <span class=\"number\">0</span> : $difference;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"mongodb学习记录","date":"2019-10-20T10:27:44.000Z","_content":"# 参考文档\nhttp://www.mongoing.com/docs/reference/operator/aggregation/interface.html    \nhttps://www.cnblogs.com/zhoujie/p/mongo1.html    \nhttps://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/tutorial-text-search-in-aggregation.html\n# mongodb精准匹配\n假设有需求如下：数据为多层级的数组，需要精准匹配到某一个层级，并进行更新或新增等操作，如何实现？    \n## 实现方式\n当Mongodb版本大于3.6.1，实现将会非常简单，因为mongodb3.6.1以上可以直接通过语句来实现精准匹配。    \n但由于实际场景中版本不支持，当匹配超过一级则会报错：Too many positional (i.e. '$') elements found in path 'files.$.testConstruct.params.list.$.testRange'        \n当版本大于3.6.1，举例：    \n```\ndb.test_db.update(\n    {'_id': {$in: ['1242rererwwr']}, 'files.name': 'test1.json', 'files.testConstruct.params.list.type': 'NewData'},\n    {$set: {'files.$.structuredContent.params.list.$.testRange': {'enable': false, 'min': 14, 'max': 90}}, $currentDate: { updatedDatetime: true }}, { multi: true })\n```\n分析：    \n设置值时，'files.$.testConstruct.params.list.$.testRange'中的第一个\"$\"将会匹配到name=test1.json的数组，第二个\"$\"将会匹配到files.structuredContent.params.list.type=NewData的数组    \n优点： 使用简单，匹配精确，无需代码判断    \n缺点： 适用版本有限制，且由于多级匹配需要更多的条件，而实际业务中不一定能取到这些条件（例如知道要更新的key为testRange但是不知道上级查询条件无法匹配到）    \n如果版本过低，可只匹配第一级，其余的通过代码匹配。    \n当版本小于3.6.1举例：\n```php\n<?php\npublic function batchUpdateContents(string $route, array $ids, string $editor, $updateItems, bool $needPublish): bool\n    {\n        $routes = explode('-', $route);\n        array_shift($routes);\n        $routes[2] = self::TYPE_LIST[$routes[2]];\n        $updateRoute = 'files.$.testConstruct.' . implode('.', $routes);\n        $res = $this->conn->update(['storeId' => ['$in' => $ids], 'files.name' => 'makeup.json', 'files.testConstruct' => ['$ne' => '']],\n            ['$set' => [$updateRoute => $updateItems, 'files.$.editor' => $editor, 'files.$.lastUpdate' => time()], '$currentDate' => [ 'updatedDatetime' =>  true ]], true);\n        if ($res) {\n            // 一些其他操作\n        } else {\n            return false;\n        }\n    }\n?>\n```\n枚举出可能存在的下一级数组值，然后进行匹配。update()方法当参数不存在时会进行新增参数操作。    \n# mongodb聚合\nmongodb的聚合操作可对数据进行一系列操作并返回结果。mongodb提供三种聚合操作：    \naggregation pipeline, map-reduce方法和分片集合\n## aggregation pipeline\n管道操作，基础操作为筛选操作，其他操作：可通过特定的字段来进行分组和排序等\n### $project\n类似于sql的select，筛选出需要查询的字段，例如：{$project: {'name': 1, 'age':1}},也可以排除字段（0）,重命名字段，派生字段    \n（1）<field>: <1 or true>    是否包含该字段，field:1/0，表示选择/不选择 field    \n（2）<field>:<0 or false>    v3.4新增功能，指定排除字段     \n（3）<field>: <expression>  添加新字段或重置现有字段的值。 在版本3.6中更改：MongoDB 3.6添加变量REMOVE。如果表达式的计算结果为$$REMOVE，则该字段将排除在输出中。\n3.6可使用变量REMOVE来有条件地禁止一个字段：    \n```  \ndb.books.aggregate( [\n   {\n      $project: {\n         title: 1,\n         \"author.first\": 1,\n         \"author.last\" : 1,\n         \"author.middle\": {\n            $cond: {\n               if: { $eq: [ \"\", \"$author.middle\" ] },\n               then: \"$$REMOVE\",\n               else: \"$author.middle\"\n            }\n         }\n      }\n   }\n] )\n\n```\n#### 使用$project派生举例    \n```  \ndb.books.aggregate(\n   [\n      {\n         $project: {\n            title: 1,\n            isbn: {\n               prefix: { $substr: [ \"$isbn\", 0, 3 ] },\n               group: { $substr: [ \"$isbn\", 3, 2 ] },\n               publisher: { $substr: [ \"$isbn\", 5, 4 ] },\n               title: { $substr: [ \"$isbn\", 9, 3 ] },\n               checkDigit: { $substr: [ \"$isbn\", 12, 1] }\n            },\n            lastName: \"$author.last\",\n            copiesSold: \"$copies\"\n         }\n      }\n   ]\n)\n```\n#### 投影出新数组：    \n示例数据：\n```  \n{ \"_id\" : ObjectId(\"55ad167f320c6be244eb3b95\"), \"x\" : 1, \"y\" : 1 }\n```\n操作：\n``` \ndb.collection.aggregate( [ { $project: { myArray: [ \"$x\", \"$y\" ] } } ] )\n```\n返回：\n``` \n{ \"_id\" : ObjectId(\"55ad167f320c6be244eb3b95\"), \"myArray\" : [ 1, 1 ] }\n```\n如果返回的数组中包含了不存在的字段，则会返回null\n### $match\n类似于sql中的where，设置查询条件，例如：{$match: {'name': {'$ne': ''}}}    \n$match仅接受一个指定查询条件的文档，查询语法与读操作查询语法相同。    \n#### 语法\n{$match: {<query>}}    \n\n#### 注意事项\n在实际应用中尽可能将$match放在管道的前面位置。这样有两个好处：一是可以快速将不需要的文档过滤掉，以减少管道的工作量；二是如果再投射和分组之前执行$match，查询可以使用索引。    \n#### 限制条件   \n（1）不能在$match查询中使用$作为聚合管道的一部分    \n（2）要在$match阶段使用$text，$match阶段必须是管道的第一阶段\n#### 查询条件介绍\n$gt:大于\n$lt:小于    \n$gte:大于等于     \n$lte:小于等于    \n$in:类似于sql中的in    \n$nin:不在该范围内的键    \n$or:包含多个可能的条件\n### $limit\n限制传递到管道中下一阶段的文档数\n### skip\n跳过指定数量的文档，并将其余文档传递到管道中的下一阶段\n### $unwind\n从输入文档解构数组字段以输出每个元素的文档，即：将数组拆分成单独的文档    \n#### 举例  \n``` \n{\n  $unwind:\n    {\n      path: <field path>,\n      includeArrayIndex: <string>,  #可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。\n      preserveNullAndEmptyArrays: <boolean> #可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档\n\n } \n}\ndb.getCollection('test').aggregate(\n [ { $unwind : \"$sizes\" } ]\n)\n```\n### $group\n#### 释义\n按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。\n\n输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。\n#### 语法\n{ $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, ... } }    \n解析：_id字段必填，可以指定为null，表示为整个输入文档计算累计值，剩余的计算字段是可选的，并使用<accumulator>运算符进行计算。\n#### accumulator操作符\n\n| 名称 |描述 |类比sql\n| --- | --- | --- |\n| $avg\t        |计算均值     \t                                                            |avg\n| $first        |返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。\t|limit 0,1\n| $last\t        |返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。\t|-\n| $max\t        |根据分组，获取集合中所有文档对应值得最大值。\t                                    |max\n| $min\t        |根据分组，获取集合中所有文档对应值得最小值。\t                                    |min\n| $push\t        |将指定的表达式的值添加到一个数组中。\t                                        |-\n| $addToSet \t|将表达式的值添加到一个集合中（无重复值，无序）。\t                                |-\n| $sum\t        |计算总和\t                                                                |sum\n| $stdDevPop\t|返回输入值的总体标准偏差（population standard deviation）\t                    |-\n| $stdDevSamp\t|返回输入值的样本标准偏差（the sample standard deviation）\t                    |-\n\n#### 注意事项\n（1）$group阶段的内存限制为100M，默认情况下，如果stage超过此限制，$group将产生错误，但是，要允许处理大型数据集，需要将allowDiskUse选项设置为true以启用$group操作写入临时文件    \n（2）\"$addToSet\": expr如果当前数组中不包含expr，那就将它添加到数组中    \n（3）\"$push\":expr，不管expr的值，都将它添加到数组中，返回包含所有值的数组。\n#### 举例\n```  \ndb.getCollection('test').aggregate([\n    {\n        $group: {\n            _id: {month: {$month: \"$data\"}, day: {$dayOfMonth: \"$date\", year: { $year: \"$date\"}}},\n            totalPrice: {$sum: {$multiply: [\"$price\", \"$quantity\"]}},\n            averageQuantity: {$avg: \"$quantitu\"},\n            count: {$sum: 1}    \n        }\n    }\n])\n```\n#### 数据转换\n（1）可以根据分组把每组转换成item数组    \n``` \ndb.getCollection('test').aggregate([{$group: {_id: '$price', items: {$pish: \"$item\"}}}])\n```\n返回值：    \n``` \n{[\"_id\": 5, \"items\": [\"abc\", \"abc\"]]}\n```\n(2) 可以使用系统变量$$ROOT按item对文档进行分组，生成的文档不得超过BSON文档大小限制    \n``` \ndb.getCollection('test').aggregate([{$group: {_id: \"$item\", books: {$push: \"$$ROOT\"}}}])\n```\n返回值：    \n``` \n/* 1 */\n{\n    \"_id\" : \"xyz\",\n    \"books\" : [ \n        {\n            \"_id\" : 3,\n            \"item\" : \"xyz\",\n            \"price\" : 5,\n            \"quantity\" : 10,\n            \"date\" : ISODate(\"2014-03-15T09:00:00.000Z\")\n        }, \n        {\n            \"_id\" : 4,\n            \"item\" : \"xyz\",\n            \"price\" : 5,\n            \"quantity\" : 20,\n            \"date\" : ISODate(\"2014-04-04T11:21:39.736Z\")\n        }\n    ]\n}\n\n/* 2 */\n{\n    \"_id\" : \"jkl\",\n    \"books\" : [ \n        {\n            \"_id\" : 2,\n            \"item\" : \"jkl\",\n            \"price\" : 20,\n            \"quantity\" : 1,\n            \"date\" : ISODate(\"2014-03-01T09:00:00.000Z\")\n        }\n    ]\n}\n\n/* 3 */\n{\n    \"_id\" : \"abc\",\n    \"books\" : [ \n        {\n            \"_id\" : 1,\n            \"item\" : \"abc\",\n            \"price\" : 10,\n            \"quantity\" : 2,\n            \"date\" : ISODate(\"2014-03-01T08:00:00.000Z\")\n        }, \n        {\n            \"_id\" : 5,\n            \"item\" : \"abc\",\n            \"price\" : 10,\n            \"quantity\" : 10,\n            \"date\" : ISODate(\"2014-04-04T21:23:13.331Z\")\n        }\n    ]\n}\n```\n### count\n返回包含到输出文档的计数\n### sort\n对文档进行排序，按照排序顺序返回管道。    \n1:升序排列    \n-1:降序排列    \n{$meta：“textScore”}按照降序排列计算出的textScore元数据，表达方式唯一，尽管可以在管道中接受表达式，但{ $meta: \"textScore\" }表达式仅在包含具有$text查询的$match阶段的管道中有意义。    \n分析：$text文本搜索，会为包含索引字段中的搜索词的每隔文档匹配一个分数，这个分数表示文档与给定文本搜索查询的相关性\n举例：    \n```\ndb.users.aggregate(\n   [\n     { $match: { $text: { $search: \"operating\" } } },\n     { $sort: { score: { $meta: \"textScore\" }, posts: -1 } }\n   ]\n)\n```\n### $sortByCount\nv3.4新增，根据表达式的值对传入文档分组，计算每个不同组中文档的数量，每个输出文档都包含两个字段：包含不同分组值得_id字段和包含属于该分组或类别的文档数的计数字段，文件按降序排列    \n举例：    \n``` \n db.db_test.aggregate({$sortByCount: '$status'});\n```\n### geoNear\n### lookup\nmongodb在大部分情况下是不需要连表的，但是依然支持连表操作，即:$lookUp\n### out\n### indexStats\n\n## 索引\n## mongodb正则匹配\n## mongodb连接方式\nmongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n## mongodb查看版本\nmongod --version\n","source":"_posts/mongoComplex.md","raw":"---\ntitle: mongodb学习记录\ndate: 2019-10-20 18:27:44\ncategories: \n- 数据库\n- mongodb\n---\n# 参考文档\nhttp://www.mongoing.com/docs/reference/operator/aggregation/interface.html    \nhttps://www.cnblogs.com/zhoujie/p/mongo1.html    \nhttps://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/tutorial-text-search-in-aggregation.html\n# mongodb精准匹配\n假设有需求如下：数据为多层级的数组，需要精准匹配到某一个层级，并进行更新或新增等操作，如何实现？    \n## 实现方式\n当Mongodb版本大于3.6.1，实现将会非常简单，因为mongodb3.6.1以上可以直接通过语句来实现精准匹配。    \n但由于实际场景中版本不支持，当匹配超过一级则会报错：Too many positional (i.e. '$') elements found in path 'files.$.testConstruct.params.list.$.testRange'        \n当版本大于3.6.1，举例：    \n```\ndb.test_db.update(\n    {'_id': {$in: ['1242rererwwr']}, 'files.name': 'test1.json', 'files.testConstruct.params.list.type': 'NewData'},\n    {$set: {'files.$.structuredContent.params.list.$.testRange': {'enable': false, 'min': 14, 'max': 90}}, $currentDate: { updatedDatetime: true }}, { multi: true })\n```\n分析：    \n设置值时，'files.$.testConstruct.params.list.$.testRange'中的第一个\"$\"将会匹配到name=test1.json的数组，第二个\"$\"将会匹配到files.structuredContent.params.list.type=NewData的数组    \n优点： 使用简单，匹配精确，无需代码判断    \n缺点： 适用版本有限制，且由于多级匹配需要更多的条件，而实际业务中不一定能取到这些条件（例如知道要更新的key为testRange但是不知道上级查询条件无法匹配到）    \n如果版本过低，可只匹配第一级，其余的通过代码匹配。    \n当版本小于3.6.1举例：\n```php\n<?php\npublic function batchUpdateContents(string $route, array $ids, string $editor, $updateItems, bool $needPublish): bool\n    {\n        $routes = explode('-', $route);\n        array_shift($routes);\n        $routes[2] = self::TYPE_LIST[$routes[2]];\n        $updateRoute = 'files.$.testConstruct.' . implode('.', $routes);\n        $res = $this->conn->update(['storeId' => ['$in' => $ids], 'files.name' => 'makeup.json', 'files.testConstruct' => ['$ne' => '']],\n            ['$set' => [$updateRoute => $updateItems, 'files.$.editor' => $editor, 'files.$.lastUpdate' => time()], '$currentDate' => [ 'updatedDatetime' =>  true ]], true);\n        if ($res) {\n            // 一些其他操作\n        } else {\n            return false;\n        }\n    }\n?>\n```\n枚举出可能存在的下一级数组值，然后进行匹配。update()方法当参数不存在时会进行新增参数操作。    \n# mongodb聚合\nmongodb的聚合操作可对数据进行一系列操作并返回结果。mongodb提供三种聚合操作：    \naggregation pipeline, map-reduce方法和分片集合\n## aggregation pipeline\n管道操作，基础操作为筛选操作，其他操作：可通过特定的字段来进行分组和排序等\n### $project\n类似于sql的select，筛选出需要查询的字段，例如：{$project: {'name': 1, 'age':1}},也可以排除字段（0）,重命名字段，派生字段    \n（1）<field>: <1 or true>    是否包含该字段，field:1/0，表示选择/不选择 field    \n（2）<field>:<0 or false>    v3.4新增功能，指定排除字段     \n（3）<field>: <expression>  添加新字段或重置现有字段的值。 在版本3.6中更改：MongoDB 3.6添加变量REMOVE。如果表达式的计算结果为$$REMOVE，则该字段将排除在输出中。\n3.6可使用变量REMOVE来有条件地禁止一个字段：    \n```  \ndb.books.aggregate( [\n   {\n      $project: {\n         title: 1,\n         \"author.first\": 1,\n         \"author.last\" : 1,\n         \"author.middle\": {\n            $cond: {\n               if: { $eq: [ \"\", \"$author.middle\" ] },\n               then: \"$$REMOVE\",\n               else: \"$author.middle\"\n            }\n         }\n      }\n   }\n] )\n\n```\n#### 使用$project派生举例    \n```  \ndb.books.aggregate(\n   [\n      {\n         $project: {\n            title: 1,\n            isbn: {\n               prefix: { $substr: [ \"$isbn\", 0, 3 ] },\n               group: { $substr: [ \"$isbn\", 3, 2 ] },\n               publisher: { $substr: [ \"$isbn\", 5, 4 ] },\n               title: { $substr: [ \"$isbn\", 9, 3 ] },\n               checkDigit: { $substr: [ \"$isbn\", 12, 1] }\n            },\n            lastName: \"$author.last\",\n            copiesSold: \"$copies\"\n         }\n      }\n   ]\n)\n```\n#### 投影出新数组：    \n示例数据：\n```  \n{ \"_id\" : ObjectId(\"55ad167f320c6be244eb3b95\"), \"x\" : 1, \"y\" : 1 }\n```\n操作：\n``` \ndb.collection.aggregate( [ { $project: { myArray: [ \"$x\", \"$y\" ] } } ] )\n```\n返回：\n``` \n{ \"_id\" : ObjectId(\"55ad167f320c6be244eb3b95\"), \"myArray\" : [ 1, 1 ] }\n```\n如果返回的数组中包含了不存在的字段，则会返回null\n### $match\n类似于sql中的where，设置查询条件，例如：{$match: {'name': {'$ne': ''}}}    \n$match仅接受一个指定查询条件的文档，查询语法与读操作查询语法相同。    \n#### 语法\n{$match: {<query>}}    \n\n#### 注意事项\n在实际应用中尽可能将$match放在管道的前面位置。这样有两个好处：一是可以快速将不需要的文档过滤掉，以减少管道的工作量；二是如果再投射和分组之前执行$match，查询可以使用索引。    \n#### 限制条件   \n（1）不能在$match查询中使用$作为聚合管道的一部分    \n（2）要在$match阶段使用$text，$match阶段必须是管道的第一阶段\n#### 查询条件介绍\n$gt:大于\n$lt:小于    \n$gte:大于等于     \n$lte:小于等于    \n$in:类似于sql中的in    \n$nin:不在该范围内的键    \n$or:包含多个可能的条件\n### $limit\n限制传递到管道中下一阶段的文档数\n### skip\n跳过指定数量的文档，并将其余文档传递到管道中的下一阶段\n### $unwind\n从输入文档解构数组字段以输出每个元素的文档，即：将数组拆分成单独的文档    \n#### 举例  \n``` \n{\n  $unwind:\n    {\n      path: <field path>,\n      includeArrayIndex: <string>,  #可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。\n      preserveNullAndEmptyArrays: <boolean> #可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档\n\n } \n}\ndb.getCollection('test').aggregate(\n [ { $unwind : \"$sizes\" } ]\n)\n```\n### $group\n#### 释义\n按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。\n\n输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。\n#### 语法\n{ $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, ... } }    \n解析：_id字段必填，可以指定为null，表示为整个输入文档计算累计值，剩余的计算字段是可选的，并使用<accumulator>运算符进行计算。\n#### accumulator操作符\n\n| 名称 |描述 |类比sql\n| --- | --- | --- |\n| $avg\t        |计算均值     \t                                                            |avg\n| $first        |返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。\t|limit 0,1\n| $last\t        |返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。\t|-\n| $max\t        |根据分组，获取集合中所有文档对应值得最大值。\t                                    |max\n| $min\t        |根据分组，获取集合中所有文档对应值得最小值。\t                                    |min\n| $push\t        |将指定的表达式的值添加到一个数组中。\t                                        |-\n| $addToSet \t|将表达式的值添加到一个集合中（无重复值，无序）。\t                                |-\n| $sum\t        |计算总和\t                                                                |sum\n| $stdDevPop\t|返回输入值的总体标准偏差（population standard deviation）\t                    |-\n| $stdDevSamp\t|返回输入值的样本标准偏差（the sample standard deviation）\t                    |-\n\n#### 注意事项\n（1）$group阶段的内存限制为100M，默认情况下，如果stage超过此限制，$group将产生错误，但是，要允许处理大型数据集，需要将allowDiskUse选项设置为true以启用$group操作写入临时文件    \n（2）\"$addToSet\": expr如果当前数组中不包含expr，那就将它添加到数组中    \n（3）\"$push\":expr，不管expr的值，都将它添加到数组中，返回包含所有值的数组。\n#### 举例\n```  \ndb.getCollection('test').aggregate([\n    {\n        $group: {\n            _id: {month: {$month: \"$data\"}, day: {$dayOfMonth: \"$date\", year: { $year: \"$date\"}}},\n            totalPrice: {$sum: {$multiply: [\"$price\", \"$quantity\"]}},\n            averageQuantity: {$avg: \"$quantitu\"},\n            count: {$sum: 1}    \n        }\n    }\n])\n```\n#### 数据转换\n（1）可以根据分组把每组转换成item数组    \n``` \ndb.getCollection('test').aggregate([{$group: {_id: '$price', items: {$pish: \"$item\"}}}])\n```\n返回值：    \n``` \n{[\"_id\": 5, \"items\": [\"abc\", \"abc\"]]}\n```\n(2) 可以使用系统变量$$ROOT按item对文档进行分组，生成的文档不得超过BSON文档大小限制    \n``` \ndb.getCollection('test').aggregate([{$group: {_id: \"$item\", books: {$push: \"$$ROOT\"}}}])\n```\n返回值：    \n``` \n/* 1 */\n{\n    \"_id\" : \"xyz\",\n    \"books\" : [ \n        {\n            \"_id\" : 3,\n            \"item\" : \"xyz\",\n            \"price\" : 5,\n            \"quantity\" : 10,\n            \"date\" : ISODate(\"2014-03-15T09:00:00.000Z\")\n        }, \n        {\n            \"_id\" : 4,\n            \"item\" : \"xyz\",\n            \"price\" : 5,\n            \"quantity\" : 20,\n            \"date\" : ISODate(\"2014-04-04T11:21:39.736Z\")\n        }\n    ]\n}\n\n/* 2 */\n{\n    \"_id\" : \"jkl\",\n    \"books\" : [ \n        {\n            \"_id\" : 2,\n            \"item\" : \"jkl\",\n            \"price\" : 20,\n            \"quantity\" : 1,\n            \"date\" : ISODate(\"2014-03-01T09:00:00.000Z\")\n        }\n    ]\n}\n\n/* 3 */\n{\n    \"_id\" : \"abc\",\n    \"books\" : [ \n        {\n            \"_id\" : 1,\n            \"item\" : \"abc\",\n            \"price\" : 10,\n            \"quantity\" : 2,\n            \"date\" : ISODate(\"2014-03-01T08:00:00.000Z\")\n        }, \n        {\n            \"_id\" : 5,\n            \"item\" : \"abc\",\n            \"price\" : 10,\n            \"quantity\" : 10,\n            \"date\" : ISODate(\"2014-04-04T21:23:13.331Z\")\n        }\n    ]\n}\n```\n### count\n返回包含到输出文档的计数\n### sort\n对文档进行排序，按照排序顺序返回管道。    \n1:升序排列    \n-1:降序排列    \n{$meta：“textScore”}按照降序排列计算出的textScore元数据，表达方式唯一，尽管可以在管道中接受表达式，但{ $meta: \"textScore\" }表达式仅在包含具有$text查询的$match阶段的管道中有意义。    \n分析：$text文本搜索，会为包含索引字段中的搜索词的每隔文档匹配一个分数，这个分数表示文档与给定文本搜索查询的相关性\n举例：    \n```\ndb.users.aggregate(\n   [\n     { $match: { $text: { $search: \"operating\" } } },\n     { $sort: { score: { $meta: \"textScore\" }, posts: -1 } }\n   ]\n)\n```\n### $sortByCount\nv3.4新增，根据表达式的值对传入文档分组，计算每个不同组中文档的数量，每个输出文档都包含两个字段：包含不同分组值得_id字段和包含属于该分组或类别的文档数的计数字段，文件按降序排列    \n举例：    \n``` \n db.db_test.aggregate({$sortByCount: '$status'});\n```\n### geoNear\n### lookup\nmongodb在大部分情况下是不需要连表的，但是依然支持连表操作，即:$lookUp\n### out\n### indexStats\n\n## 索引\n## mongodb正则匹配\n## mongodb连接方式\nmongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n## mongodb查看版本\nmongod --version\n","slug":"mongoComplex","published":1,"updated":"2021-07-23T01:58:27.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke1003ml0xo0pc7ew2k","content":"<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"http://www.mongoing.com/docs/reference/operator/aggregation/interface.html\" target=\"_blank\" rel=\"noopener\">http://www.mongoing.com/docs/reference/operator/aggregation/interface.html</a><br><a href=\"https://www.cnblogs.com/zhoujie/p/mongo1.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhoujie/p/mongo1.html</a><br><a href=\"https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/tutorial-text-search-in-aggregation.html\" target=\"_blank\" rel=\"noopener\">https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/tutorial-text-search-in-aggregation.html</a></p>\n<h1 id=\"mongodb精准匹配\"><a href=\"#mongodb精准匹配\" class=\"headerlink\" title=\"mongodb精准匹配\"></a>mongodb精准匹配</h1><p>假设有需求如下：数据为多层级的数组，需要精准匹配到某一个层级，并进行更新或新增等操作，如何实现？    </p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>当Mongodb版本大于3.6.1，实现将会非常简单，因为mongodb3.6.1以上可以直接通过语句来实现精准匹配。<br>但由于实际场景中版本不支持，当匹配超过一级则会报错：Too many positional (i.e. ‘$’) elements found in path ‘files.$.testConstruct.params.list.$.testRange’<br>当版本大于3.6.1，举例：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.test_db.update(</span><br><span class=\"line\">    &#123;&#39;_id&#39;: &#123;$in: [&#39;1242rererwwr&#39;]&#125;, &#39;files.name&#39;: &#39;test1.json&#39;, &#39;files.testConstruct.params.list.type&#39;: &#39;NewData&#39;&#125;,</span><br><span class=\"line\">    &#123;$set: &#123;&#39;files.$.structuredContent.params.list.$.testRange&#39;: &#123;&#39;enable&#39;: false, &#39;min&#39;: 14, &#39;max&#39;: 90&#125;&#125;, $currentDate: &#123; updatedDatetime: true &#125;&#125;, &#123; multi: true &#125;)</span><br></pre></td></tr></table></figure>\n<p>分析：<br>设置值时，’files.$.testConstruct.params.list.$.testRange’中的第一个”$”将会匹配到name=test1.json的数组，第二个”$”将会匹配到files.structuredContent.params.list.type=NewData的数组<br>优点： 使用简单，匹配精确，无需代码判断<br>缺点： 适用版本有限制，且由于多级匹配需要更多的条件，而实际业务中不一定能取到这些条件（例如知道要更新的key为testRange但是不知道上级查询条件无法匹配到）<br>如果版本过低，可只匹配第一级，其余的通过代码匹配。<br>当版本小于3.6.1举例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">batchUpdateContents</span><span class=\"params\">(string $route, array $ids, string $editor, $updateItems, bool $needPublish)</span>: <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $routes = explode(<span class=\"string\">'-'</span>, $route);</span><br><span class=\"line\">        array_shift($routes);</span><br><span class=\"line\">        $routes[<span class=\"number\">2</span>] = <span class=\"keyword\">self</span>::TYPE_LIST[$routes[<span class=\"number\">2</span>]];</span><br><span class=\"line\">        $updateRoute = <span class=\"string\">'files.$.testConstruct.'</span> . implode(<span class=\"string\">'.'</span>, $routes);</span><br><span class=\"line\">        $res = <span class=\"keyword\">$this</span>-&gt;conn-&gt;update([<span class=\"string\">'storeId'</span> =&gt; [<span class=\"string\">'$in'</span> =&gt; $ids], <span class=\"string\">'files.name'</span> =&gt; <span class=\"string\">'makeup.json'</span>, <span class=\"string\">'files.testConstruct'</span> =&gt; [<span class=\"string\">'$ne'</span> =&gt; <span class=\"string\">''</span>]],</span><br><span class=\"line\">            [<span class=\"string\">'$set'</span> =&gt; [$updateRoute =&gt; $updateItems, <span class=\"string\">'files.$.editor'</span> =&gt; $editor, <span class=\"string\">'files.$.lastUpdate'</span> =&gt; time()], <span class=\"string\">'$currentDate'</span> =&gt; [ <span class=\"string\">'updatedDatetime'</span> =&gt;  <span class=\"keyword\">true</span> ]], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($res) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一些其他操作</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>枚举出可能存在的下一级数组值，然后进行匹配。update()方法当参数不存在时会进行新增参数操作。    </p>\n<h1 id=\"mongodb聚合\"><a href=\"#mongodb聚合\" class=\"headerlink\" title=\"mongodb聚合\"></a>mongodb聚合</h1><p>mongodb的聚合操作可对数据进行一系列操作并返回结果。mongodb提供三种聚合操作：<br>aggregation pipeline, map-reduce方法和分片集合</p>\n<h2 id=\"aggregation-pipeline\"><a href=\"#aggregation-pipeline\" class=\"headerlink\" title=\"aggregation pipeline\"></a>aggregation pipeline</h2><p>管道操作，基础操作为筛选操作，其他操作：可通过特定的字段来进行分组和排序等</p>\n<h3 id=\"project\"><a href=\"#project\" class=\"headerlink\" title=\"$project\"></a>$project</h3><p>类似于sql的select，筛选出需要查询的字段，例如：{$project: {‘name’: 1, ‘age’:1}},也可以排除字段（0）,重命名字段，派生字段<br>（1）<field>: &lt;1 or true&gt;    是否包含该字段，field:1/0，表示选择/不选择 field<br>（2）<field>:&lt;0 or false&gt;    v3.4新增功能，指定排除字段<br>（3）<field>: <expression>  添加新字段或重置现有字段的值。 在版本3.6中更改：MongoDB 3.6添加变量REMOVE。如果表达式的计算结果为$$REMOVE，则该字段将排除在输出中。<br>3.6可使用变量REMOVE来有条件地禁止一个字段：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.books.aggregate( [</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      $project: &#123;</span><br><span class=\"line\">         title: 1,</span><br><span class=\"line\">         &quot;author.first&quot;: 1,</span><br><span class=\"line\">         &quot;author.last&quot; : 1,</span><br><span class=\"line\">         &quot;author.middle&quot;: &#123;</span><br><span class=\"line\">            $cond: &#123;</span><br><span class=\"line\">               if: &#123; $eq: [ &quot;&quot;, &quot;$author.middle&quot; ] &#125;,</span><br><span class=\"line\">               then: &quot;$$REMOVE&quot;,</span><br><span class=\"line\">               else: &quot;$author.middle&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">] )</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-project派生举例\"><a href=\"#使用-project派生举例\" class=\"headerlink\" title=\"使用$project派生举例\"></a>使用$project派生举例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.books.aggregate(</span><br><span class=\"line\">   [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         $project: &#123;</span><br><span class=\"line\">            title: 1,</span><br><span class=\"line\">            isbn: &#123;</span><br><span class=\"line\">               prefix: &#123; $substr: [ &quot;$isbn&quot;, 0, 3 ] &#125;,</span><br><span class=\"line\">               group: &#123; $substr: [ &quot;$isbn&quot;, 3, 2 ] &#125;,</span><br><span class=\"line\">               publisher: &#123; $substr: [ &quot;$isbn&quot;, 5, 4 ] &#125;,</span><br><span class=\"line\">               title: &#123; $substr: [ &quot;$isbn&quot;, 9, 3 ] &#125;,</span><br><span class=\"line\">               checkDigit: &#123; $substr: [ &quot;$isbn&quot;, 12, 1] &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            lastName: &quot;$author.last&quot;,</span><br><span class=\"line\">            copiesSold: &quot;$copies&quot;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"投影出新数组：\"><a href=\"#投影出新数组：\" class=\"headerlink\" title=\"投影出新数组：\"></a>投影出新数组：</h4><p>示例数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;55ad167f320c6be244eb3b95&quot;), &quot;x&quot; : 1, &quot;y&quot; : 1 &#125;</span><br></pre></td></tr></table></figure>\n<p>操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.aggregate( [ &#123; $project: &#123; myArray: [ &quot;$x&quot;, &quot;$y&quot; ] &#125; &#125; ] )</span><br></pre></td></tr></table></figure>\n<p>返回：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;55ad167f320c6be244eb3b95&quot;), &quot;myArray&quot; : [ 1, 1 ] &#125;</span><br></pre></td></tr></table></figure>\n<p>如果返回的数组中包含了不存在的字段，则会返回null</p>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"$match\"></a>$match</h3><p>类似于sql中的where，设置查询条件，例如：{$match: {‘name’: {‘$ne’: ‘’}}}<br>$match仅接受一个指定查询条件的文档，查询语法与读操作查询语法相同。    </p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>{$match: {<query>}}    </p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>在实际应用中尽可能将$match放在管道的前面位置。这样有两个好处：一是可以快速将不需要的文档过滤掉，以减少管道的工作量；二是如果再投射和分组之前执行$match，查询可以使用索引。    </p>\n<h4 id=\"限制条件\"><a href=\"#限制条件\" class=\"headerlink\" title=\"限制条件\"></a>限制条件</h4><p>（1）不能在$match查询中使用$作为聚合管道的一部分<br>（2）要在$match阶段使用$text，$match阶段必须是管道的第一阶段</p>\n<h4 id=\"查询条件介绍\"><a href=\"#查询条件介绍\" class=\"headerlink\" title=\"查询条件介绍\"></a>查询条件介绍</h4><p>$gt:大于<br>$lt:小于<br>$gte:大于等于<br>$lte:小于等于<br>$in:类似于sql中的in<br>$nin:不在该范围内的键<br>$or:包含多个可能的条件</p>\n<h3 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"$limit\"></a>$limit</h3><p>限制传递到管道中下一阶段的文档数</p>\n<h3 id=\"skip\"><a href=\"#skip\" class=\"headerlink\" title=\"skip\"></a>skip</h3><p>跳过指定数量的文档，并将其余文档传递到管道中的下一阶段</p>\n<h3 id=\"unwind\"><a href=\"#unwind\" class=\"headerlink\" title=\"$unwind\"></a>$unwind</h3><p>从输入文档解构数组字段以输出每个元素的文档，即：将数组拆分成单独的文档    </p>\n<h4 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  $unwind:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &lt;field path&gt;,</span><br><span class=\"line\">      includeArrayIndex: &lt;string&gt;,  #可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。</span><br><span class=\"line\">      preserveNullAndEmptyArrays: &lt;boolean&gt; #可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.getCollection(&#39;test&#39;).aggregate(</span><br><span class=\"line\"> [ &#123; $unwind : &quot;$sizes&quot; &#125; ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"group\"><a href=\"#group\" class=\"headerlink\" title=\"$group\"></a>$group</h3><h4 id=\"释义\"><a href=\"#释义\" class=\"headerlink\" title=\"释义\"></a>释义</h4><p>按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。</p>\n<p>输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。</p>\n<h4 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>{ $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, … } }<br>解析：_id字段必填，可以指定为null，表示为整个输入文档计算累计值，剩余的计算字段是可选的，并使用<accumulator>运算符进行计算。</p>\n<h4 id=\"accumulator操作符\"><a href=\"#accumulator操作符\" class=\"headerlink\" title=\"accumulator操作符\"></a>accumulator操作符</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>类比sql</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$avg</td>\n<td>计算均值</td>\n<td>avg</td>\n</tr>\n<tr>\n<td>$first</td>\n<td>返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。</td>\n<td>limit 0,1</td>\n</tr>\n<tr>\n<td>$last</td>\n<td>返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$max</td>\n<td>根据分组，获取集合中所有文档对应值得最大值。</td>\n<td>max</td>\n</tr>\n<tr>\n<td>$min</td>\n<td>根据分组，获取集合中所有文档对应值得最小值。</td>\n<td>min</td>\n</tr>\n<tr>\n<td>$push</td>\n<td>将指定的表达式的值添加到一个数组中。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$addToSet</td>\n<td>将表达式的值添加到一个集合中（无重复值，无序）。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$sum</td>\n<td>计算总和</td>\n<td>sum</td>\n</tr>\n<tr>\n<td>$stdDevPop</td>\n<td>返回输入值的总体标准偏差（population standard deviation）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$stdDevSamp</td>\n<td>返回输入值的样本标准偏差（the sample standard deviation）</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h4 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>（1）$group阶段的内存限制为100M，默认情况下，如果stage超过此限制，$group将产生错误，但是，要允许处理大型数据集，需要将allowDiskUse选项设置为true以启用$group操作写入临时文件<br>（2）”$addToSet”: expr如果当前数组中不包含expr，那就将它添加到数组中<br>（3）”$push”:expr，不管expr的值，都将它添加到数组中，返回包含所有值的数组。</p>\n<h4 id=\"举例-1\"><a href=\"#举例-1\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;test&#39;).aggregate([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $group: &#123;</span><br><span class=\"line\">            _id: &#123;month: &#123;$month: &quot;$data&quot;&#125;, day: &#123;$dayOfMonth: &quot;$date&quot;, year: &#123; $year: &quot;$date&quot;&#125;&#125;&#125;,</span><br><span class=\"line\">            totalPrice: &#123;$sum: &#123;$multiply: [&quot;$price&quot;, &quot;$quantity&quot;]&#125;&#125;,</span><br><span class=\"line\">            averageQuantity: &#123;$avg: &quot;$quantitu&quot;&#125;,</span><br><span class=\"line\">            count: &#123;$sum: 1&#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据转换\"><a href=\"#数据转换\" class=\"headerlink\" title=\"数据转换\"></a>数据转换</h4><p>（1）可以根据分组把每组转换成item数组    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;test&#39;).aggregate([&#123;$group: &#123;_id: &#39;$price&#39;, items: &#123;$pish: &quot;$item&quot;&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure>\n<p>返回值：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;[&quot;_id&quot;: 5, &quot;items&quot;: [&quot;abc&quot;, &quot;abc&quot;]]&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 可以使用系统变量$$ROOT按item对文档进行分组，生成的文档不得超过BSON文档大小限制    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;test&#39;).aggregate([&#123;$group: &#123;_id: &quot;$item&quot;, books: &#123;$push: &quot;$$ROOT&quot;&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure>\n<p>返回值：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* 1 *&#x2F;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;_id&quot; : &quot;xyz&quot;,</span><br><span class=\"line\">    &quot;books&quot; : [ </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 3,</span><br><span class=\"line\">            &quot;item&quot; : &quot;xyz&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 5,</span><br><span class=\"line\">            &quot;quantity&quot; : 10,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-03-15T09:00:00.000Z&quot;)</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 4,</span><br><span class=\"line\">            &quot;item&quot; : &quot;xyz&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 5,</span><br><span class=\"line\">            &quot;quantity&quot; : 20,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-04-04T11:21:39.736Z&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* 2 *&#x2F;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;_id&quot; : &quot;jkl&quot;,</span><br><span class=\"line\">    &quot;books&quot; : [ </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 2,</span><br><span class=\"line\">            &quot;item&quot; : &quot;jkl&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 20,</span><br><span class=\"line\">            &quot;quantity&quot; : 1,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-03-01T09:00:00.000Z&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* 3 *&#x2F;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;_id&quot; : &quot;abc&quot;,</span><br><span class=\"line\">    &quot;books&quot; : [ </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 1,</span><br><span class=\"line\">            &quot;item&quot; : &quot;abc&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 10,</span><br><span class=\"line\">            &quot;quantity&quot; : 2,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-03-01T08:00:00.000Z&quot;)</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 5,</span><br><span class=\"line\">            &quot;item&quot; : &quot;abc&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 10,</span><br><span class=\"line\">            &quot;quantity&quot; : 10,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-04-04T21:23:13.331Z&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count\"></a>count</h3><p>返回包含到输出文档的计数</p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>对文档进行排序，按照排序顺序返回管道。<br>1:升序排列<br>-1:降序排列<br>{$meta：“textScore”}按照降序排列计算出的textScore元数据，表达方式唯一，尽管可以在管道中接受表达式，但{ $meta: “textScore” }表达式仅在包含具有$text查询的$match阶段的管道中有意义。<br>分析：$text文本搜索，会为包含索引字段中的搜索词的每隔文档匹配一个分数，这个分数表示文档与给定文本搜索查询的相关性<br>举例：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.aggregate(</span><br><span class=\"line\">   [</span><br><span class=\"line\">     &#123; $match: &#123; $text: &#123; $search: &quot;operating&quot; &#125; &#125; &#125;,</span><br><span class=\"line\">     &#123; $sort: &#123; score: &#123; $meta: &quot;textScore&quot; &#125;, posts: -1 &#125; &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"sortByCount\"><a href=\"#sortByCount\" class=\"headerlink\" title=\"$sortByCount\"></a>$sortByCount</h3><p>v3.4新增，根据表达式的值对传入文档分组，计算每个不同组中文档的数量，每个输出文档都包含两个字段：包含不同分组值得_id字段和包含属于该分组或类别的文档数的计数字段，文件按降序排列<br>举例：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.db_test.aggregate(&#123;$sortByCount: &#39;$status&#39;&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"geoNear\"><a href=\"#geoNear\" class=\"headerlink\" title=\"geoNear\"></a>geoNear</h3><h3 id=\"lookup\"><a href=\"#lookup\" class=\"headerlink\" title=\"lookup\"></a>lookup</h3><p>mongodb在大部分情况下是不需要连表的，但是依然支持连表操作，即:$lookUp</p>\n<h3 id=\"out\"><a href=\"#out\" class=\"headerlink\" title=\"out\"></a>out</h3><h3 id=\"indexStats\"><a href=\"#indexStats\" class=\"headerlink\" title=\"indexStats\"></a>indexStats</h3><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h2 id=\"mongodb正则匹配\"><a href=\"#mongodb正则匹配\" class=\"headerlink\" title=\"mongodb正则匹配\"></a>mongodb正则匹配</h2><h2 id=\"mongodb连接方式\"><a href=\"#mongodb连接方式\" class=\"headerlink\" title=\"mongodb连接方式\"></a>mongodb连接方式</h2><p>mongodb://[username:password@]host1[:port1][,host2[:port2],…[,hostN[:portN]]][/[database][?options]]</p>\n<h2 id=\"mongodb查看版本\"><a href=\"#mongodb查看版本\" class=\"headerlink\" title=\"mongodb查看版本\"></a>mongodb查看版本</h2><p>mongod –version</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"http://www.mongoing.com/docs/reference/operator/aggregation/interface.html\" target=\"_blank\" rel=\"noopener\">http://www.mongoing.com/docs/reference/operator/aggregation/interface.html</a><br><a href=\"https://www.cnblogs.com/zhoujie/p/mongo1.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhoujie/p/mongo1.html</a><br><a href=\"https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/tutorial-text-search-in-aggregation.html\" target=\"_blank\" rel=\"noopener\">https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/tutorial-text-search-in-aggregation.html</a></p>\n<h1 id=\"mongodb精准匹配\"><a href=\"#mongodb精准匹配\" class=\"headerlink\" title=\"mongodb精准匹配\"></a>mongodb精准匹配</h1><p>假设有需求如下：数据为多层级的数组，需要精准匹配到某一个层级，并进行更新或新增等操作，如何实现？    </p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>当Mongodb版本大于3.6.1，实现将会非常简单，因为mongodb3.6.1以上可以直接通过语句来实现精准匹配。<br>但由于实际场景中版本不支持，当匹配超过一级则会报错：Too many positional (i.e. ‘$’) elements found in path ‘files.$.testConstruct.params.list.$.testRange’<br>当版本大于3.6.1，举例：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.test_db.update(</span><br><span class=\"line\">    &#123;&#39;_id&#39;: &#123;$in: [&#39;1242rererwwr&#39;]&#125;, &#39;files.name&#39;: &#39;test1.json&#39;, &#39;files.testConstruct.params.list.type&#39;: &#39;NewData&#39;&#125;,</span><br><span class=\"line\">    &#123;$set: &#123;&#39;files.$.structuredContent.params.list.$.testRange&#39;: &#123;&#39;enable&#39;: false, &#39;min&#39;: 14, &#39;max&#39;: 90&#125;&#125;, $currentDate: &#123; updatedDatetime: true &#125;&#125;, &#123; multi: true &#125;)</span><br></pre></td></tr></table></figure>\n<p>分析：<br>设置值时，’files.$.testConstruct.params.list.$.testRange’中的第一个”$”将会匹配到name=test1.json的数组，第二个”$”将会匹配到files.structuredContent.params.list.type=NewData的数组<br>优点： 使用简单，匹配精确，无需代码判断<br>缺点： 适用版本有限制，且由于多级匹配需要更多的条件，而实际业务中不一定能取到这些条件（例如知道要更新的key为testRange但是不知道上级查询条件无法匹配到）<br>如果版本过低，可只匹配第一级，其余的通过代码匹配。<br>当版本小于3.6.1举例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">batchUpdateContents</span><span class=\"params\">(string $route, array $ids, string $editor, $updateItems, bool $needPublish)</span>: <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $routes = explode(<span class=\"string\">'-'</span>, $route);</span><br><span class=\"line\">        array_shift($routes);</span><br><span class=\"line\">        $routes[<span class=\"number\">2</span>] = <span class=\"keyword\">self</span>::TYPE_LIST[$routes[<span class=\"number\">2</span>]];</span><br><span class=\"line\">        $updateRoute = <span class=\"string\">'files.$.testConstruct.'</span> . implode(<span class=\"string\">'.'</span>, $routes);</span><br><span class=\"line\">        $res = <span class=\"keyword\">$this</span>-&gt;conn-&gt;update([<span class=\"string\">'storeId'</span> =&gt; [<span class=\"string\">'$in'</span> =&gt; $ids], <span class=\"string\">'files.name'</span> =&gt; <span class=\"string\">'makeup.json'</span>, <span class=\"string\">'files.testConstruct'</span> =&gt; [<span class=\"string\">'$ne'</span> =&gt; <span class=\"string\">''</span>]],</span><br><span class=\"line\">            [<span class=\"string\">'$set'</span> =&gt; [$updateRoute =&gt; $updateItems, <span class=\"string\">'files.$.editor'</span> =&gt; $editor, <span class=\"string\">'files.$.lastUpdate'</span> =&gt; time()], <span class=\"string\">'$currentDate'</span> =&gt; [ <span class=\"string\">'updatedDatetime'</span> =&gt;  <span class=\"keyword\">true</span> ]], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($res) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一些其他操作</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>枚举出可能存在的下一级数组值，然后进行匹配。update()方法当参数不存在时会进行新增参数操作。    </p>\n<h1 id=\"mongodb聚合\"><a href=\"#mongodb聚合\" class=\"headerlink\" title=\"mongodb聚合\"></a>mongodb聚合</h1><p>mongodb的聚合操作可对数据进行一系列操作并返回结果。mongodb提供三种聚合操作：<br>aggregation pipeline, map-reduce方法和分片集合</p>\n<h2 id=\"aggregation-pipeline\"><a href=\"#aggregation-pipeline\" class=\"headerlink\" title=\"aggregation pipeline\"></a>aggregation pipeline</h2><p>管道操作，基础操作为筛选操作，其他操作：可通过特定的字段来进行分组和排序等</p>\n<h3 id=\"project\"><a href=\"#project\" class=\"headerlink\" title=\"$project\"></a>$project</h3><p>类似于sql的select，筛选出需要查询的字段，例如：{$project: {‘name’: 1, ‘age’:1}},也可以排除字段（0）,重命名字段，派生字段<br>（1）<field>: &lt;1 or true&gt;    是否包含该字段，field:1/0，表示选择/不选择 field<br>（2）<field>:&lt;0 or false&gt;    v3.4新增功能，指定排除字段<br>（3）<field>: <expression>  添加新字段或重置现有字段的值。 在版本3.6中更改：MongoDB 3.6添加变量REMOVE。如果表达式的计算结果为$$REMOVE，则该字段将排除在输出中。<br>3.6可使用变量REMOVE来有条件地禁止一个字段：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.books.aggregate( [</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      $project: &#123;</span><br><span class=\"line\">         title: 1,</span><br><span class=\"line\">         &quot;author.first&quot;: 1,</span><br><span class=\"line\">         &quot;author.last&quot; : 1,</span><br><span class=\"line\">         &quot;author.middle&quot;: &#123;</span><br><span class=\"line\">            $cond: &#123;</span><br><span class=\"line\">               if: &#123; $eq: [ &quot;&quot;, &quot;$author.middle&quot; ] &#125;,</span><br><span class=\"line\">               then: &quot;$$REMOVE&quot;,</span><br><span class=\"line\">               else: &quot;$author.middle&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">] )</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-project派生举例\"><a href=\"#使用-project派生举例\" class=\"headerlink\" title=\"使用$project派生举例\"></a>使用$project派生举例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.books.aggregate(</span><br><span class=\"line\">   [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         $project: &#123;</span><br><span class=\"line\">            title: 1,</span><br><span class=\"line\">            isbn: &#123;</span><br><span class=\"line\">               prefix: &#123; $substr: [ &quot;$isbn&quot;, 0, 3 ] &#125;,</span><br><span class=\"line\">               group: &#123; $substr: [ &quot;$isbn&quot;, 3, 2 ] &#125;,</span><br><span class=\"line\">               publisher: &#123; $substr: [ &quot;$isbn&quot;, 5, 4 ] &#125;,</span><br><span class=\"line\">               title: &#123; $substr: [ &quot;$isbn&quot;, 9, 3 ] &#125;,</span><br><span class=\"line\">               checkDigit: &#123; $substr: [ &quot;$isbn&quot;, 12, 1] &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            lastName: &quot;$author.last&quot;,</span><br><span class=\"line\">            copiesSold: &quot;$copies&quot;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"投影出新数组：\"><a href=\"#投影出新数组：\" class=\"headerlink\" title=\"投影出新数组：\"></a>投影出新数组：</h4><p>示例数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;55ad167f320c6be244eb3b95&quot;), &quot;x&quot; : 1, &quot;y&quot; : 1 &#125;</span><br></pre></td></tr></table></figure>\n<p>操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.aggregate( [ &#123; $project: &#123; myArray: [ &quot;$x&quot;, &quot;$y&quot; ] &#125; &#125; ] )</span><br></pre></td></tr></table></figure>\n<p>返回：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;55ad167f320c6be244eb3b95&quot;), &quot;myArray&quot; : [ 1, 1 ] &#125;</span><br></pre></td></tr></table></figure>\n<p>如果返回的数组中包含了不存在的字段，则会返回null</p>\n<h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"$match\"></a>$match</h3><p>类似于sql中的where，设置查询条件，例如：{$match: {‘name’: {‘$ne’: ‘’}}}<br>$match仅接受一个指定查询条件的文档，查询语法与读操作查询语法相同。    </p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>{$match: {<query>}}    </p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>在实际应用中尽可能将$match放在管道的前面位置。这样有两个好处：一是可以快速将不需要的文档过滤掉，以减少管道的工作量；二是如果再投射和分组之前执行$match，查询可以使用索引。    </p>\n<h4 id=\"限制条件\"><a href=\"#限制条件\" class=\"headerlink\" title=\"限制条件\"></a>限制条件</h4><p>（1）不能在$match查询中使用$作为聚合管道的一部分<br>（2）要在$match阶段使用$text，$match阶段必须是管道的第一阶段</p>\n<h4 id=\"查询条件介绍\"><a href=\"#查询条件介绍\" class=\"headerlink\" title=\"查询条件介绍\"></a>查询条件介绍</h4><p>$gt:大于<br>$lt:小于<br>$gte:大于等于<br>$lte:小于等于<br>$in:类似于sql中的in<br>$nin:不在该范围内的键<br>$or:包含多个可能的条件</p>\n<h3 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"$limit\"></a>$limit</h3><p>限制传递到管道中下一阶段的文档数</p>\n<h3 id=\"skip\"><a href=\"#skip\" class=\"headerlink\" title=\"skip\"></a>skip</h3><p>跳过指定数量的文档，并将其余文档传递到管道中的下一阶段</p>\n<h3 id=\"unwind\"><a href=\"#unwind\" class=\"headerlink\" title=\"$unwind\"></a>$unwind</h3><p>从输入文档解构数组字段以输出每个元素的文档，即：将数组拆分成单独的文档    </p>\n<h4 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  $unwind:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &lt;field path&gt;,</span><br><span class=\"line\">      includeArrayIndex: &lt;string&gt;,  #可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。</span><br><span class=\"line\">      preserveNullAndEmptyArrays: &lt;boolean&gt; #可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.getCollection(&#39;test&#39;).aggregate(</span><br><span class=\"line\"> [ &#123; $unwind : &quot;$sizes&quot; &#125; ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"group\"><a href=\"#group\" class=\"headerlink\" title=\"$group\"></a>$group</h3><h4 id=\"释义\"><a href=\"#释义\" class=\"headerlink\" title=\"释义\"></a>释义</h4><p>按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。</p>\n<p>输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。</p>\n<h4 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>{ $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, … } }<br>解析：_id字段必填，可以指定为null，表示为整个输入文档计算累计值，剩余的计算字段是可选的，并使用<accumulator>运算符进行计算。</p>\n<h4 id=\"accumulator操作符\"><a href=\"#accumulator操作符\" class=\"headerlink\" title=\"accumulator操作符\"></a>accumulator操作符</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>类比sql</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$avg</td>\n<td>计算均值</td>\n<td>avg</td>\n</tr>\n<tr>\n<td>$first</td>\n<td>返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。</td>\n<td>limit 0,1</td>\n</tr>\n<tr>\n<td>$last</td>\n<td>返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$max</td>\n<td>根据分组，获取集合中所有文档对应值得最大值。</td>\n<td>max</td>\n</tr>\n<tr>\n<td>$min</td>\n<td>根据分组，获取集合中所有文档对应值得最小值。</td>\n<td>min</td>\n</tr>\n<tr>\n<td>$push</td>\n<td>将指定的表达式的值添加到一个数组中。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$addToSet</td>\n<td>将表达式的值添加到一个集合中（无重复值，无序）。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$sum</td>\n<td>计算总和</td>\n<td>sum</td>\n</tr>\n<tr>\n<td>$stdDevPop</td>\n<td>返回输入值的总体标准偏差（population standard deviation）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$stdDevSamp</td>\n<td>返回输入值的样本标准偏差（the sample standard deviation）</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h4 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>（1）$group阶段的内存限制为100M，默认情况下，如果stage超过此限制，$group将产生错误，但是，要允许处理大型数据集，需要将allowDiskUse选项设置为true以启用$group操作写入临时文件<br>（2）”$addToSet”: expr如果当前数组中不包含expr，那就将它添加到数组中<br>（3）”$push”:expr，不管expr的值，都将它添加到数组中，返回包含所有值的数组。</p>\n<h4 id=\"举例-1\"><a href=\"#举例-1\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;test&#39;).aggregate([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $group: &#123;</span><br><span class=\"line\">            _id: &#123;month: &#123;$month: &quot;$data&quot;&#125;, day: &#123;$dayOfMonth: &quot;$date&quot;, year: &#123; $year: &quot;$date&quot;&#125;&#125;&#125;,</span><br><span class=\"line\">            totalPrice: &#123;$sum: &#123;$multiply: [&quot;$price&quot;, &quot;$quantity&quot;]&#125;&#125;,</span><br><span class=\"line\">            averageQuantity: &#123;$avg: &quot;$quantitu&quot;&#125;,</span><br><span class=\"line\">            count: &#123;$sum: 1&#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据转换\"><a href=\"#数据转换\" class=\"headerlink\" title=\"数据转换\"></a>数据转换</h4><p>（1）可以根据分组把每组转换成item数组    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;test&#39;).aggregate([&#123;$group: &#123;_id: &#39;$price&#39;, items: &#123;$pish: &quot;$item&quot;&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure>\n<p>返回值：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;[&quot;_id&quot;: 5, &quot;items&quot;: [&quot;abc&quot;, &quot;abc&quot;]]&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 可以使用系统变量$$ROOT按item对文档进行分组，生成的文档不得超过BSON文档大小限制    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;test&#39;).aggregate([&#123;$group: &#123;_id: &quot;$item&quot;, books: &#123;$push: &quot;$$ROOT&quot;&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure>\n<p>返回值：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* 1 *&#x2F;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;_id&quot; : &quot;xyz&quot;,</span><br><span class=\"line\">    &quot;books&quot; : [ </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 3,</span><br><span class=\"line\">            &quot;item&quot; : &quot;xyz&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 5,</span><br><span class=\"line\">            &quot;quantity&quot; : 10,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-03-15T09:00:00.000Z&quot;)</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 4,</span><br><span class=\"line\">            &quot;item&quot; : &quot;xyz&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 5,</span><br><span class=\"line\">            &quot;quantity&quot; : 20,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-04-04T11:21:39.736Z&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* 2 *&#x2F;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;_id&quot; : &quot;jkl&quot;,</span><br><span class=\"line\">    &quot;books&quot; : [ </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 2,</span><br><span class=\"line\">            &quot;item&quot; : &quot;jkl&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 20,</span><br><span class=\"line\">            &quot;quantity&quot; : 1,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-03-01T09:00:00.000Z&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* 3 *&#x2F;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;_id&quot; : &quot;abc&quot;,</span><br><span class=\"line\">    &quot;books&quot; : [ </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 1,</span><br><span class=\"line\">            &quot;item&quot; : &quot;abc&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 10,</span><br><span class=\"line\">            &quot;quantity&quot; : 2,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-03-01T08:00:00.000Z&quot;)</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;_id&quot; : 5,</span><br><span class=\"line\">            &quot;item&quot; : &quot;abc&quot;,</span><br><span class=\"line\">            &quot;price&quot; : 10,</span><br><span class=\"line\">            &quot;quantity&quot; : 10,</span><br><span class=\"line\">            &quot;date&quot; : ISODate(&quot;2014-04-04T21:23:13.331Z&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"count\"><a href=\"#count\" class=\"headerlink\" title=\"count\"></a>count</h3><p>返回包含到输出文档的计数</p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>对文档进行排序，按照排序顺序返回管道。<br>1:升序排列<br>-1:降序排列<br>{$meta：“textScore”}按照降序排列计算出的textScore元数据，表达方式唯一，尽管可以在管道中接受表达式，但{ $meta: “textScore” }表达式仅在包含具有$text查询的$match阶段的管道中有意义。<br>分析：$text文本搜索，会为包含索引字段中的搜索词的每隔文档匹配一个分数，这个分数表示文档与给定文本搜索查询的相关性<br>举例：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.aggregate(</span><br><span class=\"line\">   [</span><br><span class=\"line\">     &#123; $match: &#123; $text: &#123; $search: &quot;operating&quot; &#125; &#125; &#125;,</span><br><span class=\"line\">     &#123; $sort: &#123; score: &#123; $meta: &quot;textScore&quot; &#125;, posts: -1 &#125; &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"sortByCount\"><a href=\"#sortByCount\" class=\"headerlink\" title=\"$sortByCount\"></a>$sortByCount</h3><p>v3.4新增，根据表达式的值对传入文档分组，计算每个不同组中文档的数量，每个输出文档都包含两个字段：包含不同分组值得_id字段和包含属于该分组或类别的文档数的计数字段，文件按降序排列<br>举例：    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.db_test.aggregate(&#123;$sortByCount: &#39;$status&#39;&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"geoNear\"><a href=\"#geoNear\" class=\"headerlink\" title=\"geoNear\"></a>geoNear</h3><h3 id=\"lookup\"><a href=\"#lookup\" class=\"headerlink\" title=\"lookup\"></a>lookup</h3><p>mongodb在大部分情况下是不需要连表的，但是依然支持连表操作，即:$lookUp</p>\n<h3 id=\"out\"><a href=\"#out\" class=\"headerlink\" title=\"out\"></a>out</h3><h3 id=\"indexStats\"><a href=\"#indexStats\" class=\"headerlink\" title=\"indexStats\"></a>indexStats</h3><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h2 id=\"mongodb正则匹配\"><a href=\"#mongodb正则匹配\" class=\"headerlink\" title=\"mongodb正则匹配\"></a>mongodb正则匹配</h2><h2 id=\"mongodb连接方式\"><a href=\"#mongodb连接方式\" class=\"headerlink\" title=\"mongodb连接方式\"></a>mongodb连接方式</h2><p>mongodb://[username:password@]host1[:port1][,host2[:port2],…[,hostN[:portN]]][/[database][?options]]</p>\n<h2 id=\"mongodb查看版本\"><a href=\"#mongodb查看版本\" class=\"headerlink\" title=\"mongodb查看版本\"></a>mongodb查看版本</h2><p>mongod –version</p>\n"},{"title":"mysql索引优化","date":"2019-04-02T10:27:44.000Z","_content":"## 1 查看查询语句执行效率\n**语法**\nexplain select … from … [where ...]\n**示例**\n```\nexplain select * from news;\n```\n![explain](/images/mysqlIndex/exp.png)\n\n只查询一行数据：\n![const](/images/mysqlIndex/const.png)\n\n查询多行数据：执行查询\n![towrow](/images/mysqlIndex/towrow.png)\n执行explain:\n![towrowres](/images/mysqlIndex/towrowres.png)\n\n## 2 属性详解\n| 属性 | 作用 | \n| --- | --- |\n| id | SELECT的查询序列号 |\n| select_type | SELECT的查询序列号 |\n| table | 显示这一行的数据是关于哪张表的 |\n| type | 显示了连接使用了哪种类别,有无使用索引，是使用Explain命令分析性能瓶颈的关键项之一 |\n| possible_keys | 指出MySQL能使用哪个索引在该表中找到行 |\n| key | 显示MySQL实际决定使用的键（索引）。如果没有选择索引，键是NULL |\n| key_len | 显示MySQL决定使用的键长度。如果键是NULL，则长度为NULL。使用的索引的长度。在不损失精确性的情况下，长度越短越好 |\n| ref | 显示使用哪个列或常数与key一起从表中选择行 |\n| rows | 显示MySQL认为它执行查询时必须检查的行数 |\n| Extra | 包含MySQL解决查询的详细信息，也是关键参考项之一 |\n**select_type**\n\n| 类型 | 解释 | \n| --- | --- |\n| SIMPLE | 简单SELECT(不使用UNION或子查询等) |\n| PRIMARY | 最外面的SELECT |\n| UNION | UNION中的第二个或后面的SELECT语句 |\n| DEPENDENT UNION | UNION中的第二个或后面的SELECT语句，取决于外面的查询 |\n| UNION RESULT | UNION的结果 |\n| SUBQUERY | 子查询中的第一个SELECT |\n| DEPENDENT SUBQUERY | 子查询中的第一个SELECT，取决于外面的查询 |\n| DERIVED | 导出表的SELECT(FROM子句的子查询) |\n**type**\n\n索引从好到坏依次是：\n```\nsystem > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n```\n一般来说，得保证查询至少达到range级别，最好能达到ref，否则就可能会出现性能问题。\n","source":"_posts/mysqlIndex.md","raw":"---\ntitle: mysql索引优化\ndate: 2019-04-02 18:27:44\ntags: \n- 优化\ncategories: \n- 数据库\n- mysql\n---\n## 1 查看查询语句执行效率\n**语法**\nexplain select … from … [where ...]\n**示例**\n```\nexplain select * from news;\n```\n![explain](/images/mysqlIndex/exp.png)\n\n只查询一行数据：\n![const](/images/mysqlIndex/const.png)\n\n查询多行数据：执行查询\n![towrow](/images/mysqlIndex/towrow.png)\n执行explain:\n![towrowres](/images/mysqlIndex/towrowres.png)\n\n## 2 属性详解\n| 属性 | 作用 | \n| --- | --- |\n| id | SELECT的查询序列号 |\n| select_type | SELECT的查询序列号 |\n| table | 显示这一行的数据是关于哪张表的 |\n| type | 显示了连接使用了哪种类别,有无使用索引，是使用Explain命令分析性能瓶颈的关键项之一 |\n| possible_keys | 指出MySQL能使用哪个索引在该表中找到行 |\n| key | 显示MySQL实际决定使用的键（索引）。如果没有选择索引，键是NULL |\n| key_len | 显示MySQL决定使用的键长度。如果键是NULL，则长度为NULL。使用的索引的长度。在不损失精确性的情况下，长度越短越好 |\n| ref | 显示使用哪个列或常数与key一起从表中选择行 |\n| rows | 显示MySQL认为它执行查询时必须检查的行数 |\n| Extra | 包含MySQL解决查询的详细信息，也是关键参考项之一 |\n**select_type**\n\n| 类型 | 解释 | \n| --- | --- |\n| SIMPLE | 简单SELECT(不使用UNION或子查询等) |\n| PRIMARY | 最外面的SELECT |\n| UNION | UNION中的第二个或后面的SELECT语句 |\n| DEPENDENT UNION | UNION中的第二个或后面的SELECT语句，取决于外面的查询 |\n| UNION RESULT | UNION的结果 |\n| SUBQUERY | 子查询中的第一个SELECT |\n| DEPENDENT SUBQUERY | 子查询中的第一个SELECT，取决于外面的查询 |\n| DERIVED | 导出表的SELECT(FROM子句的子查询) |\n**type**\n\n索引从好到坏依次是：\n```\nsystem > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n```\n一般来说，得保证查询至少达到range级别，最好能达到ref，否则就可能会出现性能问题。\n","slug":"mysqlIndex","published":1,"updated":"2021-07-23T01:58:27.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke2003ol0xo6s5f51fa","content":"<h2 id=\"1-查看查询语句执行效率\"><a href=\"#1-查看查询语句执行效率\" class=\"headerlink\" title=\"1 查看查询语句执行效率\"></a>1 查看查询语句执行效率</h2><p><strong>语法</strong><br>explain select … from … [where …]<br><strong>示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain select * from news;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mysqlIndex/exp.png\" alt=\"explain\"></p>\n<p>只查询一行数据：<br><img src=\"/images/mysqlIndex/const.png\" alt=\"const\"></p>\n<p>查询多行数据：执行查询<br><img src=\"/images/mysqlIndex/towrow.png\" alt=\"towrow\"><br>执行explain:<br><img src=\"/images/mysqlIndex/towrowres.png\" alt=\"towrowres\"></p>\n<h2 id=\"2-属性详解\"><a href=\"#2-属性详解\" class=\"headerlink\" title=\"2 属性详解\"></a>2 属性详解</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>SELECT的查询序列号</td>\n</tr>\n<tr>\n<td>select_type</td>\n<td>SELECT的查询序列号</td>\n</tr>\n<tr>\n<td>table</td>\n<td>显示这一行的数据是关于哪张表的</td>\n</tr>\n<tr>\n<td>type</td>\n<td>显示了连接使用了哪种类别,有无使用索引，是使用Explain命令分析性能瓶颈的关键项之一</td>\n</tr>\n<tr>\n<td>possible_keys</td>\n<td>指出MySQL能使用哪个索引在该表中找到行</td>\n</tr>\n<tr>\n<td>key</td>\n<td>显示MySQL实际决定使用的键（索引）。如果没有选择索引，键是NULL</td>\n</tr>\n<tr>\n<td>key_len</td>\n<td>显示MySQL决定使用的键长度。如果键是NULL，则长度为NULL。使用的索引的长度。在不损失精确性的情况下，长度越短越好</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>显示使用哪个列或常数与key一起从表中选择行</td>\n</tr>\n<tr>\n<td>rows</td>\n<td>显示MySQL认为它执行查询时必须检查的行数</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>包含MySQL解决查询的详细信息，也是关键参考项之一</td>\n</tr>\n<tr>\n<td><strong>select_type</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SIMPLE</td>\n<td>简单SELECT(不使用UNION或子查询等)</td>\n</tr>\n<tr>\n<td>PRIMARY</td>\n<td>最外面的SELECT</td>\n</tr>\n<tr>\n<td>UNION</td>\n<td>UNION中的第二个或后面的SELECT语句</td>\n</tr>\n<tr>\n<td>DEPENDENT UNION</td>\n<td>UNION中的第二个或后面的SELECT语句，取决于外面的查询</td>\n</tr>\n<tr>\n<td>UNION RESULT</td>\n<td>UNION的结果</td>\n</tr>\n<tr>\n<td>SUBQUERY</td>\n<td>子查询中的第一个SELECT</td>\n</tr>\n<tr>\n<td>DEPENDENT SUBQUERY</td>\n<td>子查询中的第一个SELECT，取决于外面的查询</td>\n</tr>\n<tr>\n<td>DERIVED</td>\n<td>导出表的SELECT(FROM子句的子查询)</td>\n</tr>\n<tr>\n<td><strong>type</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>索引从好到坏依次是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure>\n<p>一般来说，得保证查询至少达到range级别，最好能达到ref，否则就可能会出现性能问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-查看查询语句执行效率\"><a href=\"#1-查看查询语句执行效率\" class=\"headerlink\" title=\"1 查看查询语句执行效率\"></a>1 查看查询语句执行效率</h2><p><strong>语法</strong><br>explain select … from … [where …]<br><strong>示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain select * from news;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mysqlIndex/exp.png\" alt=\"explain\"></p>\n<p>只查询一行数据：<br><img src=\"/images/mysqlIndex/const.png\" alt=\"const\"></p>\n<p>查询多行数据：执行查询<br><img src=\"/images/mysqlIndex/towrow.png\" alt=\"towrow\"><br>执行explain:<br><img src=\"/images/mysqlIndex/towrowres.png\" alt=\"towrowres\"></p>\n<h2 id=\"2-属性详解\"><a href=\"#2-属性详解\" class=\"headerlink\" title=\"2 属性详解\"></a>2 属性详解</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>SELECT的查询序列号</td>\n</tr>\n<tr>\n<td>select_type</td>\n<td>SELECT的查询序列号</td>\n</tr>\n<tr>\n<td>table</td>\n<td>显示这一行的数据是关于哪张表的</td>\n</tr>\n<tr>\n<td>type</td>\n<td>显示了连接使用了哪种类别,有无使用索引，是使用Explain命令分析性能瓶颈的关键项之一</td>\n</tr>\n<tr>\n<td>possible_keys</td>\n<td>指出MySQL能使用哪个索引在该表中找到行</td>\n</tr>\n<tr>\n<td>key</td>\n<td>显示MySQL实际决定使用的键（索引）。如果没有选择索引，键是NULL</td>\n</tr>\n<tr>\n<td>key_len</td>\n<td>显示MySQL决定使用的键长度。如果键是NULL，则长度为NULL。使用的索引的长度。在不损失精确性的情况下，长度越短越好</td>\n</tr>\n<tr>\n<td>ref</td>\n<td>显示使用哪个列或常数与key一起从表中选择行</td>\n</tr>\n<tr>\n<td>rows</td>\n<td>显示MySQL认为它执行查询时必须检查的行数</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>包含MySQL解决查询的详细信息，也是关键参考项之一</td>\n</tr>\n<tr>\n<td><strong>select_type</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SIMPLE</td>\n<td>简单SELECT(不使用UNION或子查询等)</td>\n</tr>\n<tr>\n<td>PRIMARY</td>\n<td>最外面的SELECT</td>\n</tr>\n<tr>\n<td>UNION</td>\n<td>UNION中的第二个或后面的SELECT语句</td>\n</tr>\n<tr>\n<td>DEPENDENT UNION</td>\n<td>UNION中的第二个或后面的SELECT语句，取决于外面的查询</td>\n</tr>\n<tr>\n<td>UNION RESULT</td>\n<td>UNION的结果</td>\n</tr>\n<tr>\n<td>SUBQUERY</td>\n<td>子查询中的第一个SELECT</td>\n</tr>\n<tr>\n<td>DEPENDENT SUBQUERY</td>\n<td>子查询中的第一个SELECT，取决于外面的查询</td>\n</tr>\n<tr>\n<td>DERIVED</td>\n<td>导出表的SELECT(FROM子句的子查询)</td>\n</tr>\n<tr>\n<td><strong>type</strong></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>索引从好到坏依次是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure>\n<p>一般来说，得保证查询至少达到range级别，最好能达到ref，否则就可能会出现性能问题。</p>\n"},{"title":"重新实现monthly步骤","date":"2019-03-25T01:41:10.000Z","_content":"# 1 bi新建已收、已付、应收、应付表\n```\nCREATE TABLE `order_product_set_pay`(\n`id` int(10) unsigned NOT NULL,\n`order_product_id` int(10) unsigned NOT NULL,\n`parent_order_product_id` int(10) unsigned DEFAULT '0' COMMENT 'parent order_product_id',\n`has_settlement` decimal(10,2) NOT NULL DEFAULT '0.00',\n`should_settlement` decimal(10,2) NOT NULL DEFAULT '0.00',\n`has_pay` decimal(10,2) NOT NULL DEFAULT '0.00',\n`should_pay` decimal(10,2) NOT NULL DEFAULT '0.00',\n`settlement_pay_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n`pay_pay_status` varchar(255) NOT NULL DEFAULT 'Pending',\n`pay_pay_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\nPRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\nalter table `order_product_set_pay` drop primary key;\nalter table `order_product_set_pay` add `settlement_id` int(10) unsigned NOT NULL;\n```\n# 2 从bi表中查询数据\n1 已收\n（总收）/比例\n比例 = \n\n# mysql查询优化\n**优化结果**\n```\n SELECT\n                    op.order_product_id,\n                    op.parent_order_product_id,\n                    op.product_retail,\n                    op.product_discount,\n                    op.insurance_retail,\n                    op.order_id,\n                    op.product_cost,\n                    opi.`bill_status` AS bill_status,\n                    fs.settlement_id,\n                    fs.type,\n                    fs.`status`,\n                    fs.paid_usd_amount AS should_usd,\n                    fs.updated_at AS modify_time,\n                    (\n                        SELECT\n                            sum((\n                                                CASE \n                                                WHEN (cu.`code`='CNY') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"CNY\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='GBP') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"GBP\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='AUD') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"AUD\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='NZD') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"NZD\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='EUR') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"EUR\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='CAD') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"CAD\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='SUR') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"SUR\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='JPY') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"JPY\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='ZAR') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"ZAR\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='NOK') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"NOK\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='PHP') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"PHP\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='SEK') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"SEK\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='CHF') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"CHF\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='DKK') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"DKK\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='HKD') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"HKD\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='USD') THEN  opii.`amount`\n                                                END\n                                                )) has_paid\n                        FROM\n                            `bi`.`order_product_item` opii\n                        LEFT JOIN `bi`.`order` AS o ON opii.order_id= o.order_id    \n                        LEFT JOIN `ori_new`.`financial_bill` AS fb ON opii.bill_id= fb.id\n                                                LEFT JOIN `bi`.`order_product` AS opp ON opii.order_product_id= opp.order_product_id\n                                                LEFT JOIN `ori_new`.`tff_provider` tp on opp.provider_id=tp.provider_id\n                                                LEFT JOIN `bi`.`currency` cu on tp.currency_id=cu.currency_id\n                        WHERE\n                            opii.order_product_id = op.order_product_id\n                        AND (\n                            opii.`bill_status` = 'Finished'\n                            OR opii.`bill_status` = 'Paid'\n                        )\n                    ) has_paid,\n                    (\n                        SELECT\n                            fb.updated_at\n                        FROM\n                            `ori_new`.`financial_bill` fb\n                        LEFT JOIN `bi`.`order_product_item` opii  ON opii.bill_id= fb.id\n                        WHERE\n                            opii.order_product_id = op.order_product_id\n                        AND opii.`bill_status` = 'Paid'\n                        limit 1\n                    ) `pay_pay_time`,\n                    (\n                        SELECT\n                            sum(opa.product_retail) AS total_retail\n                        FROM\n                            `bi`.`order_product` opa\n                        WHERE\n                            opa.order_id = op.order_id\n                        AND opa.product_line != 'combine'\n                    ) total_retail,\n                    (\n                        SELECT\n                            sum(opa.insurance_retail) AS insurance_total\n                        FROM\n                            `bi`.`order_product` opa\n                        WHERE\n                            opa.order_id = op.order_id\n                        AND opa.product_line != 'combine'\n                    ) insurance_total,\n                    (\n                        SELECT\n                            count(opa.order_product_id) AS op_num\n                        FROM\n                            `bi`.`order_product` opa\n                        WHERE\n                            opa.order_id = op.order_id\n                    ) op_num\n                FROM\n                    `bi`.`order_product` op\n                LEFT JOIN `bi`.`order_product_item` opi ON op.order_product_id = opi.order_product_id\n                LEFT JOIN `ori_new`.financial_settlement AS fs ON fs.order_id = op.order_id\n                LEFT JOIN `ori_new`.financial_payment_method AS p ON fs.payment_method_id = p.payment_method_id\n                WHERE\n                    op.order_product_id in ({0})\n                AND op.product_line != 'combine'\n```\n\n\n# 用过的命令\n```\nsudo awk -F '[ ;]+' '{if($2>2) print $1,$2}' test.txt | awk  '{print $1}' |xargs  |tr \"\\n\" \" \"|sed 's/ /,/g'\nsudo sed -i 's/api.bi.tff.com/127.0.0.1:5003/g' `find ./dist/ -name '*js'`\n```\n","source":"_posts/monthly.md","raw":"---\ntitle: 重新实现monthly步骤\ndate: 2019-03-25 09:41:10\ncategories: \n- 服务端语言\n- python\n---\n# 1 bi新建已收、已付、应收、应付表\n```\nCREATE TABLE `order_product_set_pay`(\n`id` int(10) unsigned NOT NULL,\n`order_product_id` int(10) unsigned NOT NULL,\n`parent_order_product_id` int(10) unsigned DEFAULT '0' COMMENT 'parent order_product_id',\n`has_settlement` decimal(10,2) NOT NULL DEFAULT '0.00',\n`should_settlement` decimal(10,2) NOT NULL DEFAULT '0.00',\n`has_pay` decimal(10,2) NOT NULL DEFAULT '0.00',\n`should_pay` decimal(10,2) NOT NULL DEFAULT '0.00',\n`settlement_pay_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n`pay_pay_status` varchar(255) NOT NULL DEFAULT 'Pending',\n`pay_pay_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\nPRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\nalter table `order_product_set_pay` drop primary key;\nalter table `order_product_set_pay` add `settlement_id` int(10) unsigned NOT NULL;\n```\n# 2 从bi表中查询数据\n1 已收\n（总收）/比例\n比例 = \n\n# mysql查询优化\n**优化结果**\n```\n SELECT\n                    op.order_product_id,\n                    op.parent_order_product_id,\n                    op.product_retail,\n                    op.product_discount,\n                    op.insurance_retail,\n                    op.order_id,\n                    op.product_cost,\n                    opi.`bill_status` AS bill_status,\n                    fs.settlement_id,\n                    fs.type,\n                    fs.`status`,\n                    fs.paid_usd_amount AS should_usd,\n                    fs.updated_at AS modify_time,\n                    (\n                        SELECT\n                            sum((\n                                                CASE \n                                                WHEN (cu.`code`='CNY') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"CNY\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='GBP') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"GBP\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='AUD') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"AUD\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='NZD') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"NZD\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='EUR') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"EUR\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='CAD') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"CAD\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='SUR') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"SUR\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='JPY') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"JPY\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='ZAR') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"ZAR\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='NOK') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"NOK\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='PHP') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"PHP\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='SEK') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"SEK\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='CHF') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"CHF\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='DKK') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"DKK\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='HKD') THEN\n                                                    ROUND((opii.`amount`)/LEFT(SUBSTRING_INDEX(o.rate_info, '\"HKD\":', - 1), 6), 2)\n                                                WHEN (cu.`code`='USD') THEN  opii.`amount`\n                                                END\n                                                )) has_paid\n                        FROM\n                            `bi`.`order_product_item` opii\n                        LEFT JOIN `bi`.`order` AS o ON opii.order_id= o.order_id    \n                        LEFT JOIN `ori_new`.`financial_bill` AS fb ON opii.bill_id= fb.id\n                                                LEFT JOIN `bi`.`order_product` AS opp ON opii.order_product_id= opp.order_product_id\n                                                LEFT JOIN `ori_new`.`tff_provider` tp on opp.provider_id=tp.provider_id\n                                                LEFT JOIN `bi`.`currency` cu on tp.currency_id=cu.currency_id\n                        WHERE\n                            opii.order_product_id = op.order_product_id\n                        AND (\n                            opii.`bill_status` = 'Finished'\n                            OR opii.`bill_status` = 'Paid'\n                        )\n                    ) has_paid,\n                    (\n                        SELECT\n                            fb.updated_at\n                        FROM\n                            `ori_new`.`financial_bill` fb\n                        LEFT JOIN `bi`.`order_product_item` opii  ON opii.bill_id= fb.id\n                        WHERE\n                            opii.order_product_id = op.order_product_id\n                        AND opii.`bill_status` = 'Paid'\n                        limit 1\n                    ) `pay_pay_time`,\n                    (\n                        SELECT\n                            sum(opa.product_retail) AS total_retail\n                        FROM\n                            `bi`.`order_product` opa\n                        WHERE\n                            opa.order_id = op.order_id\n                        AND opa.product_line != 'combine'\n                    ) total_retail,\n                    (\n                        SELECT\n                            sum(opa.insurance_retail) AS insurance_total\n                        FROM\n                            `bi`.`order_product` opa\n                        WHERE\n                            opa.order_id = op.order_id\n                        AND opa.product_line != 'combine'\n                    ) insurance_total,\n                    (\n                        SELECT\n                            count(opa.order_product_id) AS op_num\n                        FROM\n                            `bi`.`order_product` opa\n                        WHERE\n                            opa.order_id = op.order_id\n                    ) op_num\n                FROM\n                    `bi`.`order_product` op\n                LEFT JOIN `bi`.`order_product_item` opi ON op.order_product_id = opi.order_product_id\n                LEFT JOIN `ori_new`.financial_settlement AS fs ON fs.order_id = op.order_id\n                LEFT JOIN `ori_new`.financial_payment_method AS p ON fs.payment_method_id = p.payment_method_id\n                WHERE\n                    op.order_product_id in ({0})\n                AND op.product_line != 'combine'\n```\n\n\n# 用过的命令\n```\nsudo awk -F '[ ;]+' '{if($2>2) print $1,$2}' test.txt | awk  '{print $1}' |xargs  |tr \"\\n\" \" \"|sed 's/ /,/g'\nsudo sed -i 's/api.bi.tff.com/127.0.0.1:5003/g' `find ./dist/ -name '*js'`\n```\n","slug":"monthly","published":1,"updated":"2021-07-23T01:58:27.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke3003rl0xoc375ch7q","content":"<h1 id=\"1-bi新建已收、已付、应收、应付表\"><a href=\"#1-bi新建已收、已付、应收、应付表\" class=\"headerlink\" title=\"1 bi新建已收、已付、应收、应付表\"></a>1 bi新建已收、已付、应收、应付表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &#96;order_product_set_pay&#96;(</span><br><span class=\"line\">&#96;id&#96; int(10) unsigned NOT NULL,</span><br><span class=\"line\">&#96;order_product_id&#96; int(10) unsigned NOT NULL,</span><br><span class=\"line\">&#96;parent_order_product_id&#96; int(10) unsigned DEFAULT &#39;0&#39; COMMENT &#39;parent order_product_id&#39;,</span><br><span class=\"line\">&#96;has_settlement&#96; decimal(10,2) NOT NULL DEFAULT &#39;0.00&#39;,</span><br><span class=\"line\">&#96;should_settlement&#96; decimal(10,2) NOT NULL DEFAULT &#39;0.00&#39;,</span><br><span class=\"line\">&#96;has_pay&#96; decimal(10,2) NOT NULL DEFAULT &#39;0.00&#39;,</span><br><span class=\"line\">&#96;should_pay&#96; decimal(10,2) NOT NULL DEFAULT &#39;0.00&#39;,</span><br><span class=\"line\">&#96;settlement_pay_time&#96; timestamp NOT NULL DEFAULT &#39;0000-00-00 00:00:00&#39;,</span><br><span class=\"line\">&#96;pay_pay_status&#96; varchar(255) NOT NULL DEFAULT &#39;Pending&#39;,</span><br><span class=\"line\">&#96;pay_pay_time&#96; timestamp NOT NULL DEFAULT &#39;0000-00-00 00:00:00&#39;,</span><br><span class=\"line\">PRIMARY KEY (&#96;id&#96;)</span><br><span class=\"line\">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">alter table &#96;order_product_set_pay&#96; drop primary key;</span><br><span class=\"line\">alter table &#96;order_product_set_pay&#96; add &#96;settlement_id&#96; int(10) unsigned NOT NULL;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-从bi表中查询数据\"><a href=\"#2-从bi表中查询数据\" class=\"headerlink\" title=\"2 从bi表中查询数据\"></a>2 从bi表中查询数据</h1><p>1 已收<br>（总收）/比例<br>比例 = </p>\n<h1 id=\"mysql查询优化\"><a href=\"#mysql查询优化\" class=\"headerlink\" title=\"mysql查询优化\"></a>mysql查询优化</h1><p><strong>优化结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">                   op.order_product_id,</span><br><span class=\"line\">                   op.parent_order_product_id,</span><br><span class=\"line\">                   op.product_retail,</span><br><span class=\"line\">                   op.product_discount,</span><br><span class=\"line\">                   op.insurance_retail,</span><br><span class=\"line\">                   op.order_id,</span><br><span class=\"line\">                   op.product_cost,</span><br><span class=\"line\">                   opi.&#96;bill_status&#96; AS bill_status,</span><br><span class=\"line\">                   fs.settlement_id,</span><br><span class=\"line\">                   fs.type,</span><br><span class=\"line\">                   fs.&#96;status&#96;,</span><br><span class=\"line\">                   fs.paid_usd_amount AS should_usd,</span><br><span class=\"line\">                   fs.updated_at AS modify_time,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           sum((</span><br><span class=\"line\">                                               CASE </span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;CNY&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;CNY&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;GBP&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;GBP&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;AUD&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;AUD&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;NZD&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;NZD&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;EUR&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;EUR&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;CAD&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;CAD&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;SUR&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;SUR&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;JPY&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;JPY&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;ZAR&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;ZAR&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;NOK&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;NOK&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;PHP&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;PHP&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;SEK&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;SEK&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;CHF&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;CHF&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;DKK&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;DKK&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;HKD&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;HKD&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;USD&#39;) THEN  opii.&#96;amount&#96;</span><br><span class=\"line\">                                               END</span><br><span class=\"line\">                                               )) has_paid</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;bi&#96;.&#96;order_product_item&#96; opii</span><br><span class=\"line\">                       LEFT JOIN &#96;bi&#96;.&#96;order&#96; AS o ON opii.order_id&#x3D; o.order_id    </span><br><span class=\"line\">                       LEFT JOIN &#96;ori_new&#96;.&#96;financial_bill&#96; AS fb ON opii.bill_id&#x3D; fb.id</span><br><span class=\"line\">                                               LEFT JOIN &#96;bi&#96;.&#96;order_product&#96; AS opp ON opii.order_product_id&#x3D; opp.order_product_id</span><br><span class=\"line\">                                               LEFT JOIN &#96;ori_new&#96;.&#96;tff_provider&#96; tp on opp.provider_id&#x3D;tp.provider_id</span><br><span class=\"line\">                                               LEFT JOIN &#96;bi&#96;.&#96;currency&#96; cu on tp.currency_id&#x3D;cu.currency_id</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opii.order_product_id &#x3D; op.order_product_id</span><br><span class=\"line\">                       AND (</span><br><span class=\"line\">                           opii.&#96;bill_status&#96; &#x3D; &#39;Finished&#39;</span><br><span class=\"line\">                           OR opii.&#96;bill_status&#96; &#x3D; &#39;Paid&#39;</span><br><span class=\"line\">                       )</span><br><span class=\"line\">                   ) has_paid,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           fb.updated_at</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;ori_new&#96;.&#96;financial_bill&#96; fb</span><br><span class=\"line\">                       LEFT JOIN &#96;bi&#96;.&#96;order_product_item&#96; opii  ON opii.bill_id&#x3D; fb.id</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opii.order_product_id &#x3D; op.order_product_id</span><br><span class=\"line\">                       AND opii.&#96;bill_status&#96; &#x3D; &#39;Paid&#39;</span><br><span class=\"line\">                       limit 1</span><br><span class=\"line\">                   ) &#96;pay_pay_time&#96;,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           sum(opa.product_retail) AS total_retail</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;bi&#96;.&#96;order_product&#96; opa</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opa.order_id &#x3D; op.order_id</span><br><span class=\"line\">                       AND opa.product_line !&#x3D; &#39;combine&#39;</span><br><span class=\"line\">                   ) total_retail,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           sum(opa.insurance_retail) AS insurance_total</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;bi&#96;.&#96;order_product&#96; opa</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opa.order_id &#x3D; op.order_id</span><br><span class=\"line\">                       AND opa.product_line !&#x3D; &#39;combine&#39;</span><br><span class=\"line\">                   ) insurance_total,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           count(opa.order_product_id) AS op_num</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;bi&#96;.&#96;order_product&#96; opa</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opa.order_id &#x3D; op.order_id</span><br><span class=\"line\">                   ) op_num</span><br><span class=\"line\">               FROM</span><br><span class=\"line\">                   &#96;bi&#96;.&#96;order_product&#96; op</span><br><span class=\"line\">               LEFT JOIN &#96;bi&#96;.&#96;order_product_item&#96; opi ON op.order_product_id &#x3D; opi.order_product_id</span><br><span class=\"line\">               LEFT JOIN &#96;ori_new&#96;.financial_settlement AS fs ON fs.order_id &#x3D; op.order_id</span><br><span class=\"line\">               LEFT JOIN &#96;ori_new&#96;.financial_payment_method AS p ON fs.payment_method_id &#x3D; p.payment_method_id</span><br><span class=\"line\">               WHERE</span><br><span class=\"line\">                   op.order_product_id in (&#123;0&#125;)</span><br><span class=\"line\">               AND op.product_line !&#x3D; &#39;combine&#39;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"用过的命令\"><a href=\"#用过的命令\" class=\"headerlink\" title=\"用过的命令\"></a>用过的命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo awk -F &#39;[ ;]+&#39; &#39;&#123;if($2&gt;2) print $1,$2&#125;&#39; test.txt | awk  &#39;&#123;print $1&#125;&#39; |xargs  |tr &quot;\\n&quot; &quot; &quot;|sed &#39;s&#x2F; &#x2F;,&#x2F;g&#39;</span><br><span class=\"line\">sudo sed -i &#39;s&#x2F;api.bi.tff.com&#x2F;127.0.0.1:5003&#x2F;g&#39; &#96;find .&#x2F;dist&#x2F; -name &#39;*js&#39;&#96;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-bi新建已收、已付、应收、应付表\"><a href=\"#1-bi新建已收、已付、应收、应付表\" class=\"headerlink\" title=\"1 bi新建已收、已付、应收、应付表\"></a>1 bi新建已收、已付、应收、应付表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &#96;order_product_set_pay&#96;(</span><br><span class=\"line\">&#96;id&#96; int(10) unsigned NOT NULL,</span><br><span class=\"line\">&#96;order_product_id&#96; int(10) unsigned NOT NULL,</span><br><span class=\"line\">&#96;parent_order_product_id&#96; int(10) unsigned DEFAULT &#39;0&#39; COMMENT &#39;parent order_product_id&#39;,</span><br><span class=\"line\">&#96;has_settlement&#96; decimal(10,2) NOT NULL DEFAULT &#39;0.00&#39;,</span><br><span class=\"line\">&#96;should_settlement&#96; decimal(10,2) NOT NULL DEFAULT &#39;0.00&#39;,</span><br><span class=\"line\">&#96;has_pay&#96; decimal(10,2) NOT NULL DEFAULT &#39;0.00&#39;,</span><br><span class=\"line\">&#96;should_pay&#96; decimal(10,2) NOT NULL DEFAULT &#39;0.00&#39;,</span><br><span class=\"line\">&#96;settlement_pay_time&#96; timestamp NOT NULL DEFAULT &#39;0000-00-00 00:00:00&#39;,</span><br><span class=\"line\">&#96;pay_pay_status&#96; varchar(255) NOT NULL DEFAULT &#39;Pending&#39;,</span><br><span class=\"line\">&#96;pay_pay_time&#96; timestamp NOT NULL DEFAULT &#39;0000-00-00 00:00:00&#39;,</span><br><span class=\"line\">PRIMARY KEY (&#96;id&#96;)</span><br><span class=\"line\">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">alter table &#96;order_product_set_pay&#96; drop primary key;</span><br><span class=\"line\">alter table &#96;order_product_set_pay&#96; add &#96;settlement_id&#96; int(10) unsigned NOT NULL;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-从bi表中查询数据\"><a href=\"#2-从bi表中查询数据\" class=\"headerlink\" title=\"2 从bi表中查询数据\"></a>2 从bi表中查询数据</h1><p>1 已收<br>（总收）/比例<br>比例 = </p>\n<h1 id=\"mysql查询优化\"><a href=\"#mysql查询优化\" class=\"headerlink\" title=\"mysql查询优化\"></a>mysql查询优化</h1><p><strong>优化结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">                   op.order_product_id,</span><br><span class=\"line\">                   op.parent_order_product_id,</span><br><span class=\"line\">                   op.product_retail,</span><br><span class=\"line\">                   op.product_discount,</span><br><span class=\"line\">                   op.insurance_retail,</span><br><span class=\"line\">                   op.order_id,</span><br><span class=\"line\">                   op.product_cost,</span><br><span class=\"line\">                   opi.&#96;bill_status&#96; AS bill_status,</span><br><span class=\"line\">                   fs.settlement_id,</span><br><span class=\"line\">                   fs.type,</span><br><span class=\"line\">                   fs.&#96;status&#96;,</span><br><span class=\"line\">                   fs.paid_usd_amount AS should_usd,</span><br><span class=\"line\">                   fs.updated_at AS modify_time,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           sum((</span><br><span class=\"line\">                                               CASE </span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;CNY&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;CNY&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;GBP&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;GBP&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;AUD&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;AUD&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;NZD&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;NZD&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;EUR&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;EUR&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;CAD&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;CAD&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;SUR&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;SUR&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;JPY&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;JPY&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;ZAR&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;ZAR&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;NOK&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;NOK&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;PHP&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;PHP&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;SEK&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;SEK&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;CHF&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;CHF&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;DKK&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;DKK&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;HKD&#39;) THEN</span><br><span class=\"line\">                                                   ROUND((opii.&#96;amount&#96;)&#x2F;LEFT(SUBSTRING_INDEX(o.rate_info, &#39;&quot;HKD&quot;:&#39;, - 1), 6), 2)</span><br><span class=\"line\">                                               WHEN (cu.&#96;code&#96;&#x3D;&#39;USD&#39;) THEN  opii.&#96;amount&#96;</span><br><span class=\"line\">                                               END</span><br><span class=\"line\">                                               )) has_paid</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;bi&#96;.&#96;order_product_item&#96; opii</span><br><span class=\"line\">                       LEFT JOIN &#96;bi&#96;.&#96;order&#96; AS o ON opii.order_id&#x3D; o.order_id    </span><br><span class=\"line\">                       LEFT JOIN &#96;ori_new&#96;.&#96;financial_bill&#96; AS fb ON opii.bill_id&#x3D; fb.id</span><br><span class=\"line\">                                               LEFT JOIN &#96;bi&#96;.&#96;order_product&#96; AS opp ON opii.order_product_id&#x3D; opp.order_product_id</span><br><span class=\"line\">                                               LEFT JOIN &#96;ori_new&#96;.&#96;tff_provider&#96; tp on opp.provider_id&#x3D;tp.provider_id</span><br><span class=\"line\">                                               LEFT JOIN &#96;bi&#96;.&#96;currency&#96; cu on tp.currency_id&#x3D;cu.currency_id</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opii.order_product_id &#x3D; op.order_product_id</span><br><span class=\"line\">                       AND (</span><br><span class=\"line\">                           opii.&#96;bill_status&#96; &#x3D; &#39;Finished&#39;</span><br><span class=\"line\">                           OR opii.&#96;bill_status&#96; &#x3D; &#39;Paid&#39;</span><br><span class=\"line\">                       )</span><br><span class=\"line\">                   ) has_paid,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           fb.updated_at</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;ori_new&#96;.&#96;financial_bill&#96; fb</span><br><span class=\"line\">                       LEFT JOIN &#96;bi&#96;.&#96;order_product_item&#96; opii  ON opii.bill_id&#x3D; fb.id</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opii.order_product_id &#x3D; op.order_product_id</span><br><span class=\"line\">                       AND opii.&#96;bill_status&#96; &#x3D; &#39;Paid&#39;</span><br><span class=\"line\">                       limit 1</span><br><span class=\"line\">                   ) &#96;pay_pay_time&#96;,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           sum(opa.product_retail) AS total_retail</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;bi&#96;.&#96;order_product&#96; opa</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opa.order_id &#x3D; op.order_id</span><br><span class=\"line\">                       AND opa.product_line !&#x3D; &#39;combine&#39;</span><br><span class=\"line\">                   ) total_retail,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           sum(opa.insurance_retail) AS insurance_total</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;bi&#96;.&#96;order_product&#96; opa</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opa.order_id &#x3D; op.order_id</span><br><span class=\"line\">                       AND opa.product_line !&#x3D; &#39;combine&#39;</span><br><span class=\"line\">                   ) insurance_total,</span><br><span class=\"line\">                   (</span><br><span class=\"line\">                       SELECT</span><br><span class=\"line\">                           count(opa.order_product_id) AS op_num</span><br><span class=\"line\">                       FROM</span><br><span class=\"line\">                           &#96;bi&#96;.&#96;order_product&#96; opa</span><br><span class=\"line\">                       WHERE</span><br><span class=\"line\">                           opa.order_id &#x3D; op.order_id</span><br><span class=\"line\">                   ) op_num</span><br><span class=\"line\">               FROM</span><br><span class=\"line\">                   &#96;bi&#96;.&#96;order_product&#96; op</span><br><span class=\"line\">               LEFT JOIN &#96;bi&#96;.&#96;order_product_item&#96; opi ON op.order_product_id &#x3D; opi.order_product_id</span><br><span class=\"line\">               LEFT JOIN &#96;ori_new&#96;.financial_settlement AS fs ON fs.order_id &#x3D; op.order_id</span><br><span class=\"line\">               LEFT JOIN &#96;ori_new&#96;.financial_payment_method AS p ON fs.payment_method_id &#x3D; p.payment_method_id</span><br><span class=\"line\">               WHERE</span><br><span class=\"line\">                   op.order_product_id in (&#123;0&#125;)</span><br><span class=\"line\">               AND op.product_line !&#x3D; &#39;combine&#39;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"用过的命令\"><a href=\"#用过的命令\" class=\"headerlink\" title=\"用过的命令\"></a>用过的命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo awk -F &#39;[ ;]+&#39; &#39;&#123;if($2&gt;2) print $1,$2&#125;&#39; test.txt | awk  &#39;&#123;print $1&#125;&#39; |xargs  |tr &quot;\\n&quot; &quot; &quot;|sed &#39;s&#x2F; &#x2F;,&#x2F;g&#39;</span><br><span class=\"line\">sudo sed -i &#39;s&#x2F;api.bi.tff.com&#x2F;127.0.0.1:5003&#x2F;g&#39; &#96;find .&#x2F;dist&#x2F; -name &#39;*js&#39;&#96;</span><br></pre></td></tr></table></figure>\n"},{"title":"Mysql分表","date":"2019-04-08T10:27:44.000Z","_content":"","source":"_posts/mysqlMerge.md","raw":"---\ntitle: Mysql分表\ndate: 2019-04-08 18:27:44\ntags:\ncategories: \n- 数据库\n- mysql\n---\n","slug":"mysqlMerge","published":1,"updated":"2021-07-23T01:58:27.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke3003sl0xofihc6ncj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"mysql数据库维护","date":"2019-03-28T06:03:27.000Z","_content":"","source":"_posts/mysql数据库维护.md","raw":"---\ntitle: mysql数据库维护\ndate: 2019-03-28 14:03:27\ncategories: \n- 数据库\n- mysql\n---\n","slug":"mysql数据库维护","published":1,"updated":"2021-07-23T01:58:27.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke4003wl0xohve38yoj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"操作系统（1）-基础和vim操作","date":"2021-07-20T08:34:10.000Z","_content":"本系列来源于蓝桥：https://www.lanqiao.cn/courses/2610    \n同系列文已发布在[CSDN](https://blog.csdn.net/qq_28391061/article/details/118521068)\n#### 命令行中的shell通配符\n|字符  | 含义 |\n|--|--|\n|*  |匹配0或多个字符  |\n|?  |匹配任意一个字符  |\n|[list] |匹配 list 中的任意单一字符  |\n|[^list] | 匹配 除list 中的任意单一字符以外的字符 |\n|[c1-c2] |匹配 c1-c2之间的任意单一字符  |\n|{string1, string2...}|匹配 string1 或 string2 (或更多)其一字符串  |\n|{c1..c2}|匹配 c1-c2 中全部字符 如{1..10}  |\n### 示例\n#### 创建用户lilei\nsudo adduser lilei\n#### 将lilei加入sudo组\nsudo usermod -G sudo lilei\n#### 删除用户lilei\nsudo deluser lilei --remove-home\n### 问题\n#### ls -l列出的每一行是什么意思？ \n例如：lrwxrwxrwx 1 root      root        14 7月   6 17:12 anaconda3 -> /opt/anaconda3\n| 示例 | 含义 |\n|--|--|\n|lrwxrwxrwx  |文件类型和权限  |\n|2|文件和权限  |\n|root|所有者  |\n|root|所属用户组  |\n|14|文件大小  |\n|7月   6 17:12 |最后修改时间  |\n|anaconda3 -> /opt/anaconda3|文件名  |\n#### vim查漏补缺\n**添加或修改**\n```\nA在行末添加文本\na在光标之后插入文本\n```\n**删除**\n```\nx在正常(normal)模式下可删除光标所在的一个字符\ndw可删除一个单词，从光标当前位置到下一个单词起始处,d2w删除两个\nde从光标当前位置到单词结尾，d2e删除两个\nd$从当前光标删除至行末\n```\n**移动**\n```\n2w向前移动2个单词\n3e光标移动到第三个单词的末尾\n0移动光标到行首\n```\n**撤销**\n```\nU撤销对整行的修改\nCTRL+r重做，即撤销被撤销的命令\n```\n**置入**\n```\np将最后一次删除的内容置入光标下一行\n```\n**替换**\n```\nr替换掉当前光标所在字符，例如rc代表把当前光标所谓位置字符替换为c\nR连续替换多个字符\nce改变文本直到一个单词的末尾\nc$替换当前光标到行末的内容\ns/old/new/可替换当前光标所在行的第一个字符串\ns/old/new/g替换光标坐在行匹配到的所有字符串\nm,ns/old/new/g代表替换m到n行之间出现的每个匹配串\n%s/old/new/g替换整个文件中出现的每个匹配串\n%s/old/new/g找到整个文件中的每个匹配串并提示是否替换\n```\n**定位及文件状态**\n```\nctrl+g显示当前编辑文件中当前光标所在行位置以及文件状态信息\n行号+G可以直接跳转到该行（等同于:+行号）\n```\n**搜索类命令**\n```\n/后n查找下一个,N查找上一个\nctrl+o回到上一次查找的位置，可以重复按\n%可以查找配对的括号:)]}\n```\n**执行外部命令**\n```\n:!+命令可以执行外部命令，例如:!ls\n```\n**保存**\n```\nw+文件名另存为某文件\nv motion :w filename，选择性的保存文件，按v之后高亮选择文件，按:w filename保存到文件中\n```\n**提取和合并文件**\n```\n:r FILENAME在光标中插入FILENAME文件里的内容\n:r !ls 将ls命令的结果插入当前光标之后 \n```\n**复制粘贴**\n```\nv光标移动选择文本，y复制文本，p粘贴文本\n```\n**设置**\n```\n:set ic, 设置查找时忽略大小写(ignore case)，取消设置set noic\n:set hls is, 匹配项高亮显示,取消设置 nohlsearch\n```\n## Linux进程\n### fork\nfork是一个系统调用，主要作用就会为当前进程创建一个新的进程，这个新的进程就是它的子进程，这个子进程除了父进程的返回值和pid以外其他的都一模一样，如进程的执行代码段，内存信息，文件描述，寄存器状态等等\n### exec\nexec也是系统调用，作用是切换子进程中的执行程序，也就是替换其从父进程复制过来的代码段与数据段\n```\nps －fxo user,ppid,pid,pgid,command\n```\n### 进程组与sessions\n一般情况，进程组的 PGID 等同于进程组的第一个成员的 PID，并且这样的进程称为该进程组的领导者,也就是领导进程，进程一般通过使用 getpgrp() 系统调用来寻找其所在组的 PGID，领导进程可以先终结，此时进程组依然存在，并持有相同的PGID，直到进程组中最后一个进程终结\n### 进程工作管理\n& 命令后台运行    \nctrl+z 使正在执行中的命令到后台运行    \n#### jobs命令详解\njobs命令查看被停止并被放置在后台的工作，一共四列    \n| 示例 | 含义 |\n|--|--|\n|  [1]|放置在后台的job的编号  |\n|+|+表示最近刚被放置到后台的job,-表示倒数第二个被放置到后台的job,其他不会有修饰|\n|suspended|表示状态|\n|tail -f TEST|命令|\n#### fg\n将后台的工作拿到前台来    \n直接使用fg表示提取预设工作，fg %2表示提取job编号为2的任务\n#### kill\nkill -signal %jobnumber    \nkill -signal pid\nkill常用信号值\n|信号值|作用  |\n|--|--|\n| -1 |重新读取参数运行，类似于restart  |\n|-2|如同ctrl+c的操作退出|\n|-9|强制终止该任务|\n|-15|正常的方式终止该任务|\n\n","source":"_posts/opratingSystem_01.md","raw":"---\ntitle: 操作系统（1）-基础和vim操作\ndate: 2021-07-20 16:34:10\ntags: \n- 学习\ncategories: \n- 操作系统\n---\n本系列来源于蓝桥：https://www.lanqiao.cn/courses/2610    \n同系列文已发布在[CSDN](https://blog.csdn.net/qq_28391061/article/details/118521068)\n#### 命令行中的shell通配符\n|字符  | 含义 |\n|--|--|\n|*  |匹配0或多个字符  |\n|?  |匹配任意一个字符  |\n|[list] |匹配 list 中的任意单一字符  |\n|[^list] | 匹配 除list 中的任意单一字符以外的字符 |\n|[c1-c2] |匹配 c1-c2之间的任意单一字符  |\n|{string1, string2...}|匹配 string1 或 string2 (或更多)其一字符串  |\n|{c1..c2}|匹配 c1-c2 中全部字符 如{1..10}  |\n### 示例\n#### 创建用户lilei\nsudo adduser lilei\n#### 将lilei加入sudo组\nsudo usermod -G sudo lilei\n#### 删除用户lilei\nsudo deluser lilei --remove-home\n### 问题\n#### ls -l列出的每一行是什么意思？ \n例如：lrwxrwxrwx 1 root      root        14 7月   6 17:12 anaconda3 -> /opt/anaconda3\n| 示例 | 含义 |\n|--|--|\n|lrwxrwxrwx  |文件类型和权限  |\n|2|文件和权限  |\n|root|所有者  |\n|root|所属用户组  |\n|14|文件大小  |\n|7月   6 17:12 |最后修改时间  |\n|anaconda3 -> /opt/anaconda3|文件名  |\n#### vim查漏补缺\n**添加或修改**\n```\nA在行末添加文本\na在光标之后插入文本\n```\n**删除**\n```\nx在正常(normal)模式下可删除光标所在的一个字符\ndw可删除一个单词，从光标当前位置到下一个单词起始处,d2w删除两个\nde从光标当前位置到单词结尾，d2e删除两个\nd$从当前光标删除至行末\n```\n**移动**\n```\n2w向前移动2个单词\n3e光标移动到第三个单词的末尾\n0移动光标到行首\n```\n**撤销**\n```\nU撤销对整行的修改\nCTRL+r重做，即撤销被撤销的命令\n```\n**置入**\n```\np将最后一次删除的内容置入光标下一行\n```\n**替换**\n```\nr替换掉当前光标所在字符，例如rc代表把当前光标所谓位置字符替换为c\nR连续替换多个字符\nce改变文本直到一个单词的末尾\nc$替换当前光标到行末的内容\ns/old/new/可替换当前光标所在行的第一个字符串\ns/old/new/g替换光标坐在行匹配到的所有字符串\nm,ns/old/new/g代表替换m到n行之间出现的每个匹配串\n%s/old/new/g替换整个文件中出现的每个匹配串\n%s/old/new/g找到整个文件中的每个匹配串并提示是否替换\n```\n**定位及文件状态**\n```\nctrl+g显示当前编辑文件中当前光标所在行位置以及文件状态信息\n行号+G可以直接跳转到该行（等同于:+行号）\n```\n**搜索类命令**\n```\n/后n查找下一个,N查找上一个\nctrl+o回到上一次查找的位置，可以重复按\n%可以查找配对的括号:)]}\n```\n**执行外部命令**\n```\n:!+命令可以执行外部命令，例如:!ls\n```\n**保存**\n```\nw+文件名另存为某文件\nv motion :w filename，选择性的保存文件，按v之后高亮选择文件，按:w filename保存到文件中\n```\n**提取和合并文件**\n```\n:r FILENAME在光标中插入FILENAME文件里的内容\n:r !ls 将ls命令的结果插入当前光标之后 \n```\n**复制粘贴**\n```\nv光标移动选择文本，y复制文本，p粘贴文本\n```\n**设置**\n```\n:set ic, 设置查找时忽略大小写(ignore case)，取消设置set noic\n:set hls is, 匹配项高亮显示,取消设置 nohlsearch\n```\n## Linux进程\n### fork\nfork是一个系统调用，主要作用就会为当前进程创建一个新的进程，这个新的进程就是它的子进程，这个子进程除了父进程的返回值和pid以外其他的都一模一样，如进程的执行代码段，内存信息，文件描述，寄存器状态等等\n### exec\nexec也是系统调用，作用是切换子进程中的执行程序，也就是替换其从父进程复制过来的代码段与数据段\n```\nps －fxo user,ppid,pid,pgid,command\n```\n### 进程组与sessions\n一般情况，进程组的 PGID 等同于进程组的第一个成员的 PID，并且这样的进程称为该进程组的领导者,也就是领导进程，进程一般通过使用 getpgrp() 系统调用来寻找其所在组的 PGID，领导进程可以先终结，此时进程组依然存在，并持有相同的PGID，直到进程组中最后一个进程终结\n### 进程工作管理\n& 命令后台运行    \nctrl+z 使正在执行中的命令到后台运行    \n#### jobs命令详解\njobs命令查看被停止并被放置在后台的工作，一共四列    \n| 示例 | 含义 |\n|--|--|\n|  [1]|放置在后台的job的编号  |\n|+|+表示最近刚被放置到后台的job,-表示倒数第二个被放置到后台的job,其他不会有修饰|\n|suspended|表示状态|\n|tail -f TEST|命令|\n#### fg\n将后台的工作拿到前台来    \n直接使用fg表示提取预设工作，fg %2表示提取job编号为2的任务\n#### kill\nkill -signal %jobnumber    \nkill -signal pid\nkill常用信号值\n|信号值|作用  |\n|--|--|\n| -1 |重新读取参数运行，类似于restart  |\n|-2|如同ctrl+c的操作退出|\n|-9|强制终止该任务|\n|-15|正常的方式终止该任务|\n\n","slug":"opratingSystem_01","published":1,"updated":"2021-07-23T02:14:39.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke5003xl0xogvk2dv56","content":"<p>本系列来源于蓝桥：<a href=\"https://www.lanqiao.cn/courses/2610\" target=\"_blank\" rel=\"noopener\">https://www.lanqiao.cn/courses/2610</a><br>同系列文已发布在<a href=\"https://blog.csdn.net/qq_28391061/article/details/118521068\" target=\"_blank\" rel=\"noopener\">CSDN</a></p>\n<h4 id=\"命令行中的shell通配符\"><a href=\"#命令行中的shell通配符\" class=\"headerlink\" title=\"命令行中的shell通配符\"></a>命令行中的shell通配符</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配0或多个字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配任意一个字符</td>\n</tr>\n<tr>\n<td>[list]</td>\n<td>匹配 list 中的任意单一字符</td>\n</tr>\n<tr>\n<td>[^list]</td>\n<td>匹配 除list 中的任意单一字符以外的字符</td>\n</tr>\n<tr>\n<td>[c1-c2]</td>\n<td>匹配 c1-c2之间的任意单一字符</td>\n</tr>\n<tr>\n<td>{string1, string2…}</td>\n<td>匹配 string1 或 string2 (或更多)其一字符串</td>\n</tr>\n<tr>\n<td>{c1..c2}</td>\n<td>匹配 c1-c2 中全部字符 如{1..10}</td>\n</tr>\n<tr>\n<td>### 示例</td>\n<td></td>\n</tr>\n<tr>\n<td>#### 创建用户lilei</td>\n<td></td>\n</tr>\n<tr>\n<td>sudo adduser lilei</td>\n<td></td>\n</tr>\n<tr>\n<td>#### 将lilei加入sudo组</td>\n<td></td>\n</tr>\n<tr>\n<td>sudo usermod -G sudo lilei</td>\n<td></td>\n</tr>\n<tr>\n<td>#### 删除用户lilei</td>\n<td></td>\n</tr>\n<tr>\n<td>sudo deluser lilei –remove-home</td>\n<td></td>\n</tr>\n<tr>\n<td>### 问题</td>\n<td></td>\n</tr>\n<tr>\n<td>#### ls -l列出的每一行是什么意思？</td>\n<td></td>\n</tr>\n<tr>\n<td>例如：lrwxrwxrwx 1 root      root        14 7月   6 17:12 anaconda3 -&gt; /opt/anaconda3</td>\n<td></td>\n</tr>\n<tr>\n<td>示例</td>\n<td>含义</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>lrwxrwxrwx</td>\n<td>文件类型和权限</td>\n</tr>\n<tr>\n<td>2</td>\n<td>文件和权限</td>\n</tr>\n<tr>\n<td>root</td>\n<td>所有者</td>\n</tr>\n<tr>\n<td>root</td>\n<td>所属用户组</td>\n</tr>\n<tr>\n<td>14</td>\n<td>文件大小</td>\n</tr>\n<tr>\n<td>7月   6 17:12</td>\n<td>最后修改时间</td>\n</tr>\n<tr>\n<td>anaconda3 -&gt; /opt/anaconda3</td>\n<td>文件名</td>\n</tr>\n<tr>\n<td>#### vim查漏补缺</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>添加或修改</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A在行末添加文本</span><br><span class=\"line\">a在光标之后插入文本</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>删除</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x在正常(normal)模式下可删除光标所在的一个字符</span><br><span class=\"line\">dw可删除一个单词，从光标当前位置到下一个单词起始处,d2w删除两个</span><br><span class=\"line\">de从光标当前位置到单词结尾，d2e删除两个</span><br><span class=\"line\">d$从当前光标删除至行末</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>移动</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2w向前移动2个单词</span><br><span class=\"line\">3e光标移动到第三个单词的末尾</span><br><span class=\"line\">0移动光标到行首</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>撤销</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U撤销对整行的修改</span><br><span class=\"line\">CTRL+r重做，即撤销被撤销的命令</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>置入</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p将最后一次删除的内容置入光标下一行</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>替换</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r替换掉当前光标所在字符，例如rc代表把当前光标所谓位置字符替换为c</span><br><span class=\"line\">R连续替换多个字符</span><br><span class=\"line\">ce改变文本直到一个单词的末尾</span><br><span class=\"line\">c$替换当前光标到行末的内容</span><br><span class=\"line\">s&#x2F;old&#x2F;new&#x2F;可替换当前光标所在行的第一个字符串</span><br><span class=\"line\">s&#x2F;old&#x2F;new&#x2F;g替换光标坐在行匹配到的所有字符串</span><br><span class=\"line\">m,ns&#x2F;old&#x2F;new&#x2F;g代表替换m到n行之间出现的每个匹配串</span><br><span class=\"line\">%s&#x2F;old&#x2F;new&#x2F;g替换整个文件中出现的每个匹配串</span><br><span class=\"line\">%s&#x2F;old&#x2F;new&#x2F;g找到整个文件中的每个匹配串并提示是否替换</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>定位及文件状态</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+g显示当前编辑文件中当前光标所在行位置以及文件状态信息</span><br><span class=\"line\">行号+G可以直接跳转到该行（等同于:+行号）</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>搜索类命令</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;后n查找下一个,N查找上一个</span><br><span class=\"line\">ctrl+o回到上一次查找的位置，可以重复按</span><br><span class=\"line\">%可以查找配对的括号:)]&#125;</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>执行外部命令</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:!+命令可以执行外部命令，例如:!ls</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>保存</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w+文件名另存为某文件</span><br><span class=\"line\">v motion :w filename，选择性的保存文件，按v之后高亮选择文件，按:w filename保存到文件中</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>提取和合并文件</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:r FILENAME在光标中插入FILENAME文件里的内容</span><br><span class=\"line\">:r !ls 将ls命令的结果插入当前光标之后</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>复制粘贴</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v光标移动选择文本，y复制文本，p粘贴文本</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>设置</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set ic, 设置查找时忽略大小写(ignore case)，取消设置set noic</span><br><span class=\"line\">:set hls is, 匹配项高亮显示,取消设置 nohlsearch</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td>## Linux进程</td>\n<td></td>\n</tr>\n<tr>\n<td>### fork</td>\n<td></td>\n</tr>\n<tr>\n<td>fork是一个系统调用，主要作用就会为当前进程创建一个新的进程，这个新的进程就是它的子进程，这个子进程除了父进程的返回值和pid以外其他的都一模一样，如进程的执行代码段，内存信息，文件描述，寄存器状态等等</td>\n<td></td>\n</tr>\n<tr>\n<td>### exec</td>\n<td></td>\n</tr>\n<tr>\n<td>exec也是系统调用，作用是切换子进程中的执行程序，也就是替换其从父进程复制过来的代码段与数据段</td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps －fxo user,ppid,pid,pgid,command</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td>### 进程组与sessions</td>\n<td></td>\n</tr>\n<tr>\n<td>一般情况，进程组的 PGID 等同于进程组的第一个成员的 PID，并且这样的进程称为该进程组的领导者,也就是领导进程，进程一般通过使用 getpgrp() 系统调用来寻找其所在组的 PGID，领导进程可以先终结，此时进程组依然存在，并持有相同的PGID，直到进程组中最后一个进程终结</td>\n<td></td>\n</tr>\n<tr>\n<td>### 进程工作管理</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp; 命令后台运行</td>\n<td></td>\n</tr>\n<tr>\n<td>ctrl+z 使正在执行中的命令到后台运行</td>\n<td></td>\n</tr>\n<tr>\n<td>#### jobs命令详解</td>\n<td></td>\n</tr>\n<tr>\n<td>jobs命令查看被停止并被放置在后台的工作，一共四列</td>\n<td></td>\n</tr>\n<tr>\n<td>示例</td>\n<td>含义</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>[1]</td>\n<td>放置在后台的job的编号</td>\n</tr>\n<tr>\n<td>+</td>\n<td>+表示最近刚被放置到后台的job,-表示倒数第二个被放置到后台的job,其他不会有修饰</td>\n</tr>\n<tr>\n<td>suspended</td>\n<td>表示状态</td>\n</tr>\n<tr>\n<td>tail -f TEST</td>\n<td>命令</td>\n</tr>\n<tr>\n<td>#### fg</td>\n<td></td>\n</tr>\n<tr>\n<td>将后台的工作拿到前台来</td>\n<td></td>\n</tr>\n<tr>\n<td>直接使用fg表示提取预设工作，fg %2表示提取job编号为2的任务</td>\n<td></td>\n</tr>\n<tr>\n<td>#### kill</td>\n<td></td>\n</tr>\n<tr>\n<td>kill -signal %jobnumber</td>\n<td></td>\n</tr>\n<tr>\n<td>kill -signal pid</td>\n<td></td>\n</tr>\n<tr>\n<td>kill常用信号值</td>\n<td></td>\n</tr>\n<tr>\n<td>信号值</td>\n<td>作用</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>-1</td>\n<td>重新读取参数运行，类似于restart</td>\n</tr>\n<tr>\n<td>-2</td>\n<td>如同ctrl+c的操作退出</td>\n</tr>\n<tr>\n<td>-9</td>\n<td>强制终止该任务</td>\n</tr>\n<tr>\n<td>-15</td>\n<td>正常的方式终止该任务</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>本系列来源于蓝桥：<a href=\"https://www.lanqiao.cn/courses/2610\" target=\"_blank\" rel=\"noopener\">https://www.lanqiao.cn/courses/2610</a><br>同系列文已发布在<a href=\"https://blog.csdn.net/qq_28391061/article/details/118521068\" target=\"_blank\" rel=\"noopener\">CSDN</a></p>\n<h4 id=\"命令行中的shell通配符\"><a href=\"#命令行中的shell通配符\" class=\"headerlink\" title=\"命令行中的shell通配符\"></a>命令行中的shell通配符</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配0或多个字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配任意一个字符</td>\n</tr>\n<tr>\n<td>[list]</td>\n<td>匹配 list 中的任意单一字符</td>\n</tr>\n<tr>\n<td>[^list]</td>\n<td>匹配 除list 中的任意单一字符以外的字符</td>\n</tr>\n<tr>\n<td>[c1-c2]</td>\n<td>匹配 c1-c2之间的任意单一字符</td>\n</tr>\n<tr>\n<td>{string1, string2…}</td>\n<td>匹配 string1 或 string2 (或更多)其一字符串</td>\n</tr>\n<tr>\n<td>{c1..c2}</td>\n<td>匹配 c1-c2 中全部字符 如{1..10}</td>\n</tr>\n<tr>\n<td>### 示例</td>\n<td></td>\n</tr>\n<tr>\n<td>#### 创建用户lilei</td>\n<td></td>\n</tr>\n<tr>\n<td>sudo adduser lilei</td>\n<td></td>\n</tr>\n<tr>\n<td>#### 将lilei加入sudo组</td>\n<td></td>\n</tr>\n<tr>\n<td>sudo usermod -G sudo lilei</td>\n<td></td>\n</tr>\n<tr>\n<td>#### 删除用户lilei</td>\n<td></td>\n</tr>\n<tr>\n<td>sudo deluser lilei –remove-home</td>\n<td></td>\n</tr>\n<tr>\n<td>### 问题</td>\n<td></td>\n</tr>\n<tr>\n<td>#### ls -l列出的每一行是什么意思？</td>\n<td></td>\n</tr>\n<tr>\n<td>例如：lrwxrwxrwx 1 root      root        14 7月   6 17:12 anaconda3 -&gt; /opt/anaconda3</td>\n<td></td>\n</tr>\n<tr>\n<td>示例</td>\n<td>含义</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>lrwxrwxrwx</td>\n<td>文件类型和权限</td>\n</tr>\n<tr>\n<td>2</td>\n<td>文件和权限</td>\n</tr>\n<tr>\n<td>root</td>\n<td>所有者</td>\n</tr>\n<tr>\n<td>root</td>\n<td>所属用户组</td>\n</tr>\n<tr>\n<td>14</td>\n<td>文件大小</td>\n</tr>\n<tr>\n<td>7月   6 17:12</td>\n<td>最后修改时间</td>\n</tr>\n<tr>\n<td>anaconda3 -&gt; /opt/anaconda3</td>\n<td>文件名</td>\n</tr>\n<tr>\n<td>#### vim查漏补缺</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>添加或修改</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A在行末添加文本</span><br><span class=\"line\">a在光标之后插入文本</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>删除</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x在正常(normal)模式下可删除光标所在的一个字符</span><br><span class=\"line\">dw可删除一个单词，从光标当前位置到下一个单词起始处,d2w删除两个</span><br><span class=\"line\">de从光标当前位置到单词结尾，d2e删除两个</span><br><span class=\"line\">d$从当前光标删除至行末</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>移动</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2w向前移动2个单词</span><br><span class=\"line\">3e光标移动到第三个单词的末尾</span><br><span class=\"line\">0移动光标到行首</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>撤销</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U撤销对整行的修改</span><br><span class=\"line\">CTRL+r重做，即撤销被撤销的命令</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>置入</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p将最后一次删除的内容置入光标下一行</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>替换</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r替换掉当前光标所在字符，例如rc代表把当前光标所谓位置字符替换为c</span><br><span class=\"line\">R连续替换多个字符</span><br><span class=\"line\">ce改变文本直到一个单词的末尾</span><br><span class=\"line\">c$替换当前光标到行末的内容</span><br><span class=\"line\">s&#x2F;old&#x2F;new&#x2F;可替换当前光标所在行的第一个字符串</span><br><span class=\"line\">s&#x2F;old&#x2F;new&#x2F;g替换光标坐在行匹配到的所有字符串</span><br><span class=\"line\">m,ns&#x2F;old&#x2F;new&#x2F;g代表替换m到n行之间出现的每个匹配串</span><br><span class=\"line\">%s&#x2F;old&#x2F;new&#x2F;g替换整个文件中出现的每个匹配串</span><br><span class=\"line\">%s&#x2F;old&#x2F;new&#x2F;g找到整个文件中的每个匹配串并提示是否替换</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>定位及文件状态</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+g显示当前编辑文件中当前光标所在行位置以及文件状态信息</span><br><span class=\"line\">行号+G可以直接跳转到该行（等同于:+行号）</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>搜索类命令</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;后n查找下一个,N查找上一个</span><br><span class=\"line\">ctrl+o回到上一次查找的位置，可以重复按</span><br><span class=\"line\">%可以查找配对的括号:)]&#125;</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>执行外部命令</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:!+命令可以执行外部命令，例如:!ls</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>保存</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w+文件名另存为某文件</span><br><span class=\"line\">v motion :w filename，选择性的保存文件，按v之后高亮选择文件，按:w filename保存到文件中</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>提取和合并文件</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:r FILENAME在光标中插入FILENAME文件里的内容</span><br><span class=\"line\">:r !ls 将ls命令的结果插入当前光标之后</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>复制粘贴</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v光标移动选择文本，y复制文本，p粘贴文本</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>设置</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set ic, 设置查找时忽略大小写(ignore case)，取消设置set noic</span><br><span class=\"line\">:set hls is, 匹配项高亮显示,取消设置 nohlsearch</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td>## Linux进程</td>\n<td></td>\n</tr>\n<tr>\n<td>### fork</td>\n<td></td>\n</tr>\n<tr>\n<td>fork是一个系统调用，主要作用就会为当前进程创建一个新的进程，这个新的进程就是它的子进程，这个子进程除了父进程的返回值和pid以外其他的都一模一样，如进程的执行代码段，内存信息，文件描述，寄存器状态等等</td>\n<td></td>\n</tr>\n<tr>\n<td>### exec</td>\n<td></td>\n</tr>\n<tr>\n<td>exec也是系统调用，作用是切换子进程中的执行程序，也就是替换其从父进程复制过来的代码段与数据段</td>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps －fxo user,ppid,pid,pgid,command</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n<tr>\n<td>### 进程组与sessions</td>\n<td></td>\n</tr>\n<tr>\n<td>一般情况，进程组的 PGID 等同于进程组的第一个成员的 PID，并且这样的进程称为该进程组的领导者,也就是领导进程，进程一般通过使用 getpgrp() 系统调用来寻找其所在组的 PGID，领导进程可以先终结，此时进程组依然存在，并持有相同的PGID，直到进程组中最后一个进程终结</td>\n<td></td>\n</tr>\n<tr>\n<td>### 进程工作管理</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp; 命令后台运行</td>\n<td></td>\n</tr>\n<tr>\n<td>ctrl+z 使正在执行中的命令到后台运行</td>\n<td></td>\n</tr>\n<tr>\n<td>#### jobs命令详解</td>\n<td></td>\n</tr>\n<tr>\n<td>jobs命令查看被停止并被放置在后台的工作，一共四列</td>\n<td></td>\n</tr>\n<tr>\n<td>示例</td>\n<td>含义</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>[1]</td>\n<td>放置在后台的job的编号</td>\n</tr>\n<tr>\n<td>+</td>\n<td>+表示最近刚被放置到后台的job,-表示倒数第二个被放置到后台的job,其他不会有修饰</td>\n</tr>\n<tr>\n<td>suspended</td>\n<td>表示状态</td>\n</tr>\n<tr>\n<td>tail -f TEST</td>\n<td>命令</td>\n</tr>\n<tr>\n<td>#### fg</td>\n<td></td>\n</tr>\n<tr>\n<td>将后台的工作拿到前台来</td>\n<td></td>\n</tr>\n<tr>\n<td>直接使用fg表示提取预设工作，fg %2表示提取job编号为2的任务</td>\n<td></td>\n</tr>\n<tr>\n<td>#### kill</td>\n<td></td>\n</tr>\n<tr>\n<td>kill -signal %jobnumber</td>\n<td></td>\n</tr>\n<tr>\n<td>kill -signal pid</td>\n<td></td>\n</tr>\n<tr>\n<td>kill常用信号值</td>\n<td></td>\n</tr>\n<tr>\n<td>信号值</td>\n<td>作用</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>-1</td>\n<td>重新读取参数运行，类似于restart</td>\n</tr>\n<tr>\n<td>-2</td>\n<td>如同ctrl+c的操作退出</td>\n</tr>\n<tr>\n<td>-9</td>\n<td>强制终止该任务</td>\n</tr>\n<tr>\n<td>-15</td>\n<td>正常的方式终止该任务</td>\n</tr>\n</tbody></table>\n"},{"title":"mysql必知必会学习笔记-1-基础概念","date":"2021-04-02T10:27:44.000Z","_content":"## 概念\n### 定义\n#### 数据库\n数据库是用来保存有组织的数据的容器\n#### 表\n某种特定类型数据的结构化清单（在类似mongodb等nosql数据库中，表的类型和字段都不是固定的）\n#### 列\n表中的一个字段，所有的表都是由一个或多个列组成的\n#### 数据类型\n所容许的数据类型，每个表列都有\n相应的数据类型，它限制或容许改列中存储的数据\n#### 行\n表中的一个记录\n#### 主键\n一列（或一组列），其值能够唯一区分表中的每一行\n**主键建议**\n（1）不更新主键列中的值    \n（2）不重用组件列的值    \n（3）不在主键列中使用可能会更改的值\n#### mysql命令行连接参数\n经常使用的参数:\n|参数| 解释 |\n|--|--|\n| u | 用户名 |\n|h|host|\n|P|端口号|\n|p|密码|\n\n\n\n","source":"_posts/mysqlMustKnown_01.md","raw":"---\ntitle: mysql必知必会学习笔记-1-基础概念\ndate: 2021-04-02 18:27:44\ntags: \n- 学习\ncategories: \n- 数据库\n- mysql\n---\n## 概念\n### 定义\n#### 数据库\n数据库是用来保存有组织的数据的容器\n#### 表\n某种特定类型数据的结构化清单（在类似mongodb等nosql数据库中，表的类型和字段都不是固定的）\n#### 列\n表中的一个字段，所有的表都是由一个或多个列组成的\n#### 数据类型\n所容许的数据类型，每个表列都有\n相应的数据类型，它限制或容许改列中存储的数据\n#### 行\n表中的一个记录\n#### 主键\n一列（或一组列），其值能够唯一区分表中的每一行\n**主键建议**\n（1）不更新主键列中的值    \n（2）不重用组件列的值    \n（3）不在主键列中使用可能会更改的值\n#### mysql命令行连接参数\n经常使用的参数:\n|参数| 解释 |\n|--|--|\n| u | 用户名 |\n|h|host|\n|P|端口号|\n|p|密码|\n\n\n\n","slug":"mysqlMustKnown_01","published":1,"updated":"2021-07-23T02:18:03.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke70040l0xodidygxr6","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>数据库是用来保存有组织的数据的容器</p>\n<h4 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h4><p>某种特定类型数据的结构化清单（在类似mongodb等nosql数据库中，表的类型和字段都不是固定的）</p>\n<h4 id=\"列\"><a href=\"#列\" class=\"headerlink\" title=\"列\"></a>列</h4><p>表中的一个字段，所有的表都是由一个或多个列组成的</p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>所容许的数据类型，每个表列都有<br>相应的数据类型，它限制或容许改列中存储的数据</p>\n<h4 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h4><p>表中的一个记录</p>\n<h4 id=\"主键\"><a href=\"#主键\" class=\"headerlink\" title=\"主键\"></a>主键</h4><p>一列（或一组列），其值能够唯一区分表中的每一行<br><strong>主键建议</strong><br>（1）不更新主键列中的值<br>（2）不重用组件列的值<br>（3）不在主键列中使用可能会更改的值</p>\n<h4 id=\"mysql命令行连接参数\"><a href=\"#mysql命令行连接参数\" class=\"headerlink\" title=\"mysql命令行连接参数\"></a>mysql命令行连接参数</h4><p>经常使用的参数:<br>|参数| 解释 |<br>|–|–|<br>| u | 用户名 |<br>|h|host|<br>|P|端口号|<br>|p|密码|</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>数据库是用来保存有组织的数据的容器</p>\n<h4 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h4><p>某种特定类型数据的结构化清单（在类似mongodb等nosql数据库中，表的类型和字段都不是固定的）</p>\n<h4 id=\"列\"><a href=\"#列\" class=\"headerlink\" title=\"列\"></a>列</h4><p>表中的一个字段，所有的表都是由一个或多个列组成的</p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>所容许的数据类型，每个表列都有<br>相应的数据类型，它限制或容许改列中存储的数据</p>\n<h4 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h4><p>表中的一个记录</p>\n<h4 id=\"主键\"><a href=\"#主键\" class=\"headerlink\" title=\"主键\"></a>主键</h4><p>一列（或一组列），其值能够唯一区分表中的每一行<br><strong>主键建议</strong><br>（1）不更新主键列中的值<br>（2）不重用组件列的值<br>（3）不在主键列中使用可能会更改的值</p>\n<h4 id=\"mysql命令行连接参数\"><a href=\"#mysql命令行连接参数\" class=\"headerlink\" title=\"mysql命令行连接参数\"></a>mysql命令行连接参数</h4><p>经常使用的参数:<br>|参数| 解释 |<br>|–|–|<br>| u | 用户名 |<br>|h|host|<br>|P|端口号|<br>|p|密码|</p>\n"},{"title":"操作系统（2）-进程管理","date":"2021-07-20T08:34:10.000Z","_content":"蓝桥操作系统课程的学习笔记\n# top\n实时查看进程的状态     \n**top第一行**\n|内容| 解释 |\n|--|--|\n| top | 表示当前程序的名称 |\n|14:11:28|当前系统的时间|\n|up 231 days, 20:31|表示改机器已经启动了多长时间|\n|1 user|表示当前系统只有一个用户|\n|load average: 0.24, 0.32, 0.19|分别对应1、5、15分钟内cpu的平均负载|\n**top第二行**\n|内容| 解释 |\n|--|--|\n| Tasks: 26 toal | 进程总数 |\n|1 running|1个正在运行的进程|\n|25 sleeping|25个正在睡眠的进程数|\n|0 stopped|没有停止的进程数|\n|0 zombie|没有僵尸进程数|\n**top第三行**\n基本是cpu使用情况的统计\n|内容| 解释 |\n|--|--|\n| Cpu(s):1.0%us | 用户空间进程占用cpu百分比 |\n|1.0% sy|内核空间运行占用cpu百分比|\n|0.0%ni|用户进程空间内改变过优先级的进程占用CPU百分比|\n|9709% id|空闲CPU百分比|\n|0.0% wa|等待输入输出的cpu时间百分比|\n|0.1%hi|硬中断（Hardware IRQ）占用CPU的百分比|\n|0.0% si|软中断（Software IRQ）占用CPU的百分比|\n|0.0% st| (Steal time)是hypervisor等虚拟服务中，虚拟cpu等待实际cpu的时间的百分比|\n**top第四行数据**\n内存使用情况的统计    \n|内容| 解释 |\n|--|--|\n| 821324 total | 物理内存总量 |\n| 811324 used| 使用的物理内存总量 |\n| 10000 free| 空闲内存总量 |\n| 212088 buffers| 用作内核缓存的内存量 |\n**top第五行数据**\n交换区的使用情况的统计    \n| 内容 |解释  |\n|--|--|\n| total | 交换区总量 |\n|used|使用的交换区总量|\n|free|空闲交换区总量|\n|cached|缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖|\n### top进程情况\n|列名|解释  |\n|--|--|\n|  PID|  进程ID|\n|USER|该进程的所属用户|\n|PR|该进程执行的优先级priority值（动态优先级，实际的优先级值，读取自宏MAX_PRIO,值为140，取值范围为0-139,值越小优先级越高。0-99是实时进程的值，100-139是给用户的 PR=20 + NICE值）|\n|NI|该进程的nice值(每个进程都有一个介于 -20 到 19 之间的 nice 值。默认情况下，进程的 nice 值为 0。-20优先级最高，19优先级最低。 进程的 nice 值，可以通过 nice 命令和 renice 命令修改，进而调整进程的运行顺序。 nice命令 nice 命令 可以给要启动的进程赋予 NI 值，但是不能修改已运行进程的 NI 值)|\n|VIRT|该进程任务所使用的虚拟内存的总数（包含所有的代码，数据，共享库和被换出的swap空间的页面等所占据空间的总数）|\n|RES|该进程所使用的物理内存数，也称之为驻留内存数|\n|SHR|该进程共享内存的大小|\n|S|该进程的状态S=sleeping R=running Z=zombie|\n|%CPU|该进程cpu的利用率|\n|%MEM|该进程内存的利用率|\n|TIME+|该进程活跃的总时间|\n|COMMAND|该进程运行的名字|\n### top工具的交互命令\n|常用交互命令|解释  |\n|--|--|\n|q  |退出程序  |\n|I|切换显示平均负载和启动时间的信息|\n|P|根据CPU使用百分比进行大小排序|\n|M|根据驻留内存大小进行排序|\n|i|忽略闲置和僵死的进程，开关式命令|\n|k|终止一个命令，系统提示输入PID及发送的信号值。一般终止进程用15信号，不能正常结束则使用9信号。安全模式下该命令被屏蔽|\n\n# ps\nps也是最常用的查看进程的工具之一\n|内容| 解释 |\n|--|--|\n| USER |进程的拥有者用户  |\n|PID|进程的id|\n\n### 查看物理CPU的个数\n```\ncat /proc/cpuinfo |grep \"physical id\"|sort |uniq|wc -l\n```\n\n### 每个cpu的核心数\n```\ncat /proc/cpuinfo |grep \"physical id\"|grep \"0\"|wc -l\n```\n# ps\n静态查看当前的进程信息\n# pstree\n查看当前活跃进程的树形结构\n|参数|含义  |\n|--|--|\n|  p|同时列出每个process的pid  |\n|  u|同时列出每个process的所属账户名称  |\n# 进程的执行顺序\n进程的优先级由pr和nice值来控制和体现，nice值的取值范围是-20到19，可以通过nice命令进行操控\n```\nnice -n -5 vim &  //-n后跟需要设置的谦让值，正数需要管理员权限，负数不需要\nrenice -5 pid\n```\n","source":"_posts/opratingSystem_02.md","raw":"---\ntitle: 操作系统（2）-进程管理\ndate: 2021-07-20 16:34:10\ntags: \n- 学习\ncategories: \n- 操作系统\n---\n蓝桥操作系统课程的学习笔记\n# top\n实时查看进程的状态     \n**top第一行**\n|内容| 解释 |\n|--|--|\n| top | 表示当前程序的名称 |\n|14:11:28|当前系统的时间|\n|up 231 days, 20:31|表示改机器已经启动了多长时间|\n|1 user|表示当前系统只有一个用户|\n|load average: 0.24, 0.32, 0.19|分别对应1、5、15分钟内cpu的平均负载|\n**top第二行**\n|内容| 解释 |\n|--|--|\n| Tasks: 26 toal | 进程总数 |\n|1 running|1个正在运行的进程|\n|25 sleeping|25个正在睡眠的进程数|\n|0 stopped|没有停止的进程数|\n|0 zombie|没有僵尸进程数|\n**top第三行**\n基本是cpu使用情况的统计\n|内容| 解释 |\n|--|--|\n| Cpu(s):1.0%us | 用户空间进程占用cpu百分比 |\n|1.0% sy|内核空间运行占用cpu百分比|\n|0.0%ni|用户进程空间内改变过优先级的进程占用CPU百分比|\n|9709% id|空闲CPU百分比|\n|0.0% wa|等待输入输出的cpu时间百分比|\n|0.1%hi|硬中断（Hardware IRQ）占用CPU的百分比|\n|0.0% si|软中断（Software IRQ）占用CPU的百分比|\n|0.0% st| (Steal time)是hypervisor等虚拟服务中，虚拟cpu等待实际cpu的时间的百分比|\n**top第四行数据**\n内存使用情况的统计    \n|内容| 解释 |\n|--|--|\n| 821324 total | 物理内存总量 |\n| 811324 used| 使用的物理内存总量 |\n| 10000 free| 空闲内存总量 |\n| 212088 buffers| 用作内核缓存的内存量 |\n**top第五行数据**\n交换区的使用情况的统计    \n| 内容 |解释  |\n|--|--|\n| total | 交换区总量 |\n|used|使用的交换区总量|\n|free|空闲交换区总量|\n|cached|缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖|\n### top进程情况\n|列名|解释  |\n|--|--|\n|  PID|  进程ID|\n|USER|该进程的所属用户|\n|PR|该进程执行的优先级priority值（动态优先级，实际的优先级值，读取自宏MAX_PRIO,值为140，取值范围为0-139,值越小优先级越高。0-99是实时进程的值，100-139是给用户的 PR=20 + NICE值）|\n|NI|该进程的nice值(每个进程都有一个介于 -20 到 19 之间的 nice 值。默认情况下，进程的 nice 值为 0。-20优先级最高，19优先级最低。 进程的 nice 值，可以通过 nice 命令和 renice 命令修改，进而调整进程的运行顺序。 nice命令 nice 命令 可以给要启动的进程赋予 NI 值，但是不能修改已运行进程的 NI 值)|\n|VIRT|该进程任务所使用的虚拟内存的总数（包含所有的代码，数据，共享库和被换出的swap空间的页面等所占据空间的总数）|\n|RES|该进程所使用的物理内存数，也称之为驻留内存数|\n|SHR|该进程共享内存的大小|\n|S|该进程的状态S=sleeping R=running Z=zombie|\n|%CPU|该进程cpu的利用率|\n|%MEM|该进程内存的利用率|\n|TIME+|该进程活跃的总时间|\n|COMMAND|该进程运行的名字|\n### top工具的交互命令\n|常用交互命令|解释  |\n|--|--|\n|q  |退出程序  |\n|I|切换显示平均负载和启动时间的信息|\n|P|根据CPU使用百分比进行大小排序|\n|M|根据驻留内存大小进行排序|\n|i|忽略闲置和僵死的进程，开关式命令|\n|k|终止一个命令，系统提示输入PID及发送的信号值。一般终止进程用15信号，不能正常结束则使用9信号。安全模式下该命令被屏蔽|\n\n# ps\nps也是最常用的查看进程的工具之一\n|内容| 解释 |\n|--|--|\n| USER |进程的拥有者用户  |\n|PID|进程的id|\n\n### 查看物理CPU的个数\n```\ncat /proc/cpuinfo |grep \"physical id\"|sort |uniq|wc -l\n```\n\n### 每个cpu的核心数\n```\ncat /proc/cpuinfo |grep \"physical id\"|grep \"0\"|wc -l\n```\n# ps\n静态查看当前的进程信息\n# pstree\n查看当前活跃进程的树形结构\n|参数|含义  |\n|--|--|\n|  p|同时列出每个process的pid  |\n|  u|同时列出每个process的所属账户名称  |\n# 进程的执行顺序\n进程的优先级由pr和nice值来控制和体现，nice值的取值范围是-20到19，可以通过nice命令进行操控\n```\nnice -n -5 vim &  //-n后跟需要设置的谦让值，正数需要管理员权限，负数不需要\nrenice -5 pid\n```\n","slug":"opratingSystem_02","published":1,"updated":"2021-07-23T02:15:28.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke70043l0xob4uk2tf3","content":"<p>蓝桥操作系统课程的学习笔记</p>\n<h1 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h1><p>实时查看进程的状态<br><strong>top第一行</strong><br>|内容| 解释 |<br>|–|–|<br>| top | 表示当前程序的名称 |<br>|14:11:28|当前系统的时间|<br>|up 231 days, 20:31|表示改机器已经启动了多长时间|<br>|1 user|表示当前系统只有一个用户|<br>|load average: 0.24, 0.32, 0.19|分别对应1、5、15分钟内cpu的平均负载|<br><strong>top第二行</strong><br>|内容| 解释 |<br>|–|–|<br>| Tasks: 26 toal | 进程总数 |<br>|1 running|1个正在运行的进程|<br>|25 sleeping|25个正在睡眠的进程数|<br>|0 stopped|没有停止的进程数|<br>|0 zombie|没有僵尸进程数|<br><strong>top第三行</strong><br>基本是cpu使用情况的统计<br>|内容| 解释 |<br>|–|–|<br>| Cpu(s):1.0%us | 用户空间进程占用cpu百分比 |<br>|1.0% sy|内核空间运行占用cpu百分比|<br>|0.0%ni|用户进程空间内改变过优先级的进程占用CPU百分比|<br>|9709% id|空闲CPU百分比|<br>|0.0% wa|等待输入输出的cpu时间百分比|<br>|0.1%hi|硬中断（Hardware IRQ）占用CPU的百分比|<br>|0.0% si|软中断（Software IRQ）占用CPU的百分比|<br>|0.0% st| (Steal time)是hypervisor等虚拟服务中，虚拟cpu等待实际cpu的时间的百分比|<br><strong>top第四行数据</strong><br>内存使用情况的统计<br>|内容| 解释 |<br>|–|–|<br>| 821324 total | 物理内存总量 |<br>| 811324 used| 使用的物理内存总量 |<br>| 10000 free| 空闲内存总量 |<br>| 212088 buffers| 用作内核缓存的内存量 |<br><strong>top第五行数据</strong><br>交换区的使用情况的统计<br>| 内容 |解释  |<br>|–|–|<br>| total | 交换区总量 |<br>|used|使用的交换区总量|<br>|free|空闲交换区总量|<br>|cached|缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖|</p>\n<h3 id=\"top进程情况\"><a href=\"#top进程情况\" class=\"headerlink\" title=\"top进程情况\"></a>top进程情况</h3><table>\n<thead>\n<tr>\n<th>列名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PID</td>\n<td>进程ID</td>\n</tr>\n<tr>\n<td>USER</td>\n<td>该进程的所属用户</td>\n</tr>\n<tr>\n<td>PR</td>\n<td>该进程执行的优先级priority值（动态优先级，实际的优先级值，读取自宏MAX_PRIO,值为140，取值范围为0-139,值越小优先级越高。0-99是实时进程的值，100-139是给用户的 PR=20 + NICE值）</td>\n</tr>\n<tr>\n<td>NI</td>\n<td>该进程的nice值(每个进程都有一个介于 -20 到 19 之间的 nice 值。默认情况下，进程的 nice 值为 0。-20优先级最高，19优先级最低。 进程的 nice 值，可以通过 nice 命令和 renice 命令修改，进而调整进程的运行顺序。 nice命令 nice 命令 可以给要启动的进程赋予 NI 值，但是不能修改已运行进程的 NI 值)</td>\n</tr>\n<tr>\n<td>VIRT</td>\n<td>该进程任务所使用的虚拟内存的总数（包含所有的代码，数据，共享库和被换出的swap空间的页面等所占据空间的总数）</td>\n</tr>\n<tr>\n<td>RES</td>\n<td>该进程所使用的物理内存数，也称之为驻留内存数</td>\n</tr>\n<tr>\n<td>SHR</td>\n<td>该进程共享内存的大小</td>\n</tr>\n<tr>\n<td>S</td>\n<td>该进程的状态S=sleeping R=running Z=zombie</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>该进程cpu的利用率</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>该进程内存的利用率</td>\n</tr>\n<tr>\n<td>TIME+</td>\n<td>该进程活跃的总时间</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>该进程运行的名字</td>\n</tr>\n<tr>\n<td>### top工具的交互命令</td>\n<td></td>\n</tr>\n<tr>\n<td>常用交互命令</td>\n<td>解释</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出程序</td>\n</tr>\n<tr>\n<td>I</td>\n<td>切换显示平均负载和启动时间的信息</td>\n</tr>\n<tr>\n<td>P</td>\n<td>根据CPU使用百分比进行大小排序</td>\n</tr>\n<tr>\n<td>M</td>\n<td>根据驻留内存大小进行排序</td>\n</tr>\n<tr>\n<td>i</td>\n<td>忽略闲置和僵死的进程，开关式命令</td>\n</tr>\n<tr>\n<td>k</td>\n<td>终止一个命令，系统提示输入PID及发送的信号值。一般终止进程用15信号，不能正常结束则使用9信号。安全模式下该命令被屏蔽</td>\n</tr>\n</tbody></table>\n<h1 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h1><p>ps也是最常用的查看进程的工具之一<br>|内容| 解释 |<br>|–|–|<br>| USER |进程的拥有者用户  |<br>|PID|进程的id|</p>\n<h3 id=\"查看物理CPU的个数\"><a href=\"#查看物理CPU的个数\" class=\"headerlink\" title=\"查看物理CPU的个数\"></a>查看物理CPU的个数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;proc&#x2F;cpuinfo |grep &quot;physical id&quot;|sort |uniq|wc -l</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"每个cpu的核心数\"><a href=\"#每个cpu的核心数\" class=\"headerlink\" title=\"每个cpu的核心数\"></a>每个cpu的核心数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;proc&#x2F;cpuinfo |grep &quot;physical id&quot;|grep &quot;0&quot;|wc -l</span><br></pre></td></tr></table></figure>\n<h1 id=\"ps-1\"><a href=\"#ps-1\" class=\"headerlink\" title=\"ps\"></a>ps</h1><p>静态查看当前的进程信息</p>\n<h1 id=\"pstree\"><a href=\"#pstree\" class=\"headerlink\" title=\"pstree\"></a>pstree</h1><p>查看当前活跃进程的树形结构<br>|参数|含义  |<br>|–|–|<br>|  p|同时列出每个process的pid  |<br>|  u|同时列出每个process的所属账户名称  |</p>\n<h1 id=\"进程的执行顺序\"><a href=\"#进程的执行顺序\" class=\"headerlink\" title=\"进程的执行顺序\"></a>进程的执行顺序</h1><p>进程的优先级由pr和nice值来控制和体现，nice值的取值范围是-20到19，可以通过nice命令进行操控</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nice -n -5 vim &amp;  &#x2F;&#x2F;-n后跟需要设置的谦让值，正数需要管理员权限，负数不需要</span><br><span class=\"line\">renice -5 pid</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>蓝桥操作系统课程的学习笔记</p>\n<h1 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h1><p>实时查看进程的状态<br><strong>top第一行</strong><br>|内容| 解释 |<br>|–|–|<br>| top | 表示当前程序的名称 |<br>|14:11:28|当前系统的时间|<br>|up 231 days, 20:31|表示改机器已经启动了多长时间|<br>|1 user|表示当前系统只有一个用户|<br>|load average: 0.24, 0.32, 0.19|分别对应1、5、15分钟内cpu的平均负载|<br><strong>top第二行</strong><br>|内容| 解释 |<br>|–|–|<br>| Tasks: 26 toal | 进程总数 |<br>|1 running|1个正在运行的进程|<br>|25 sleeping|25个正在睡眠的进程数|<br>|0 stopped|没有停止的进程数|<br>|0 zombie|没有僵尸进程数|<br><strong>top第三行</strong><br>基本是cpu使用情况的统计<br>|内容| 解释 |<br>|–|–|<br>| Cpu(s):1.0%us | 用户空间进程占用cpu百分比 |<br>|1.0% sy|内核空间运行占用cpu百分比|<br>|0.0%ni|用户进程空间内改变过优先级的进程占用CPU百分比|<br>|9709% id|空闲CPU百分比|<br>|0.0% wa|等待输入输出的cpu时间百分比|<br>|0.1%hi|硬中断（Hardware IRQ）占用CPU的百分比|<br>|0.0% si|软中断（Software IRQ）占用CPU的百分比|<br>|0.0% st| (Steal time)是hypervisor等虚拟服务中，虚拟cpu等待实际cpu的时间的百分比|<br><strong>top第四行数据</strong><br>内存使用情况的统计<br>|内容| 解释 |<br>|–|–|<br>| 821324 total | 物理内存总量 |<br>| 811324 used| 使用的物理内存总量 |<br>| 10000 free| 空闲内存总量 |<br>| 212088 buffers| 用作内核缓存的内存量 |<br><strong>top第五行数据</strong><br>交换区的使用情况的统计<br>| 内容 |解释  |<br>|–|–|<br>| total | 交换区总量 |<br>|used|使用的交换区总量|<br>|free|空闲交换区总量|<br>|cached|缓冲的交换区总量，内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖|</p>\n<h3 id=\"top进程情况\"><a href=\"#top进程情况\" class=\"headerlink\" title=\"top进程情况\"></a>top进程情况</h3><table>\n<thead>\n<tr>\n<th>列名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PID</td>\n<td>进程ID</td>\n</tr>\n<tr>\n<td>USER</td>\n<td>该进程的所属用户</td>\n</tr>\n<tr>\n<td>PR</td>\n<td>该进程执行的优先级priority值（动态优先级，实际的优先级值，读取自宏MAX_PRIO,值为140，取值范围为0-139,值越小优先级越高。0-99是实时进程的值，100-139是给用户的 PR=20 + NICE值）</td>\n</tr>\n<tr>\n<td>NI</td>\n<td>该进程的nice值(每个进程都有一个介于 -20 到 19 之间的 nice 值。默认情况下，进程的 nice 值为 0。-20优先级最高，19优先级最低。 进程的 nice 值，可以通过 nice 命令和 renice 命令修改，进而调整进程的运行顺序。 nice命令 nice 命令 可以给要启动的进程赋予 NI 值，但是不能修改已运行进程的 NI 值)</td>\n</tr>\n<tr>\n<td>VIRT</td>\n<td>该进程任务所使用的虚拟内存的总数（包含所有的代码，数据，共享库和被换出的swap空间的页面等所占据空间的总数）</td>\n</tr>\n<tr>\n<td>RES</td>\n<td>该进程所使用的物理内存数，也称之为驻留内存数</td>\n</tr>\n<tr>\n<td>SHR</td>\n<td>该进程共享内存的大小</td>\n</tr>\n<tr>\n<td>S</td>\n<td>该进程的状态S=sleeping R=running Z=zombie</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>该进程cpu的利用率</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>该进程内存的利用率</td>\n</tr>\n<tr>\n<td>TIME+</td>\n<td>该进程活跃的总时间</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>该进程运行的名字</td>\n</tr>\n<tr>\n<td>### top工具的交互命令</td>\n<td></td>\n</tr>\n<tr>\n<td>常用交互命令</td>\n<td>解释</td>\n</tr>\n<tr>\n<td>–</td>\n<td>–</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出程序</td>\n</tr>\n<tr>\n<td>I</td>\n<td>切换显示平均负载和启动时间的信息</td>\n</tr>\n<tr>\n<td>P</td>\n<td>根据CPU使用百分比进行大小排序</td>\n</tr>\n<tr>\n<td>M</td>\n<td>根据驻留内存大小进行排序</td>\n</tr>\n<tr>\n<td>i</td>\n<td>忽略闲置和僵死的进程，开关式命令</td>\n</tr>\n<tr>\n<td>k</td>\n<td>终止一个命令，系统提示输入PID及发送的信号值。一般终止进程用15信号，不能正常结束则使用9信号。安全模式下该命令被屏蔽</td>\n</tr>\n</tbody></table>\n<h1 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h1><p>ps也是最常用的查看进程的工具之一<br>|内容| 解释 |<br>|–|–|<br>| USER |进程的拥有者用户  |<br>|PID|进程的id|</p>\n<h3 id=\"查看物理CPU的个数\"><a href=\"#查看物理CPU的个数\" class=\"headerlink\" title=\"查看物理CPU的个数\"></a>查看物理CPU的个数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;proc&#x2F;cpuinfo |grep &quot;physical id&quot;|sort |uniq|wc -l</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"每个cpu的核心数\"><a href=\"#每个cpu的核心数\" class=\"headerlink\" title=\"每个cpu的核心数\"></a>每个cpu的核心数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;proc&#x2F;cpuinfo |grep &quot;physical id&quot;|grep &quot;0&quot;|wc -l</span><br></pre></td></tr></table></figure>\n<h1 id=\"ps-1\"><a href=\"#ps-1\" class=\"headerlink\" title=\"ps\"></a>ps</h1><p>静态查看当前的进程信息</p>\n<h1 id=\"pstree\"><a href=\"#pstree\" class=\"headerlink\" title=\"pstree\"></a>pstree</h1><p>查看当前活跃进程的树形结构<br>|参数|含义  |<br>|–|–|<br>|  p|同时列出每个process的pid  |<br>|  u|同时列出每个process的所属账户名称  |</p>\n<h1 id=\"进程的执行顺序\"><a href=\"#进程的执行顺序\" class=\"headerlink\" title=\"进程的执行顺序\"></a>进程的执行顺序</h1><p>进程的优先级由pr和nice值来控制和体现，nice值的取值范围是-20到19，可以通过nice命令进行操控</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nice -n -5 vim &amp;  &#x2F;&#x2F;-n后跟需要设置的谦让值，正数需要管理员权限，负数不需要</span><br><span class=\"line\">renice -5 pid</span><br></pre></td></tr></table></figure>\n"},{"title":"操作系统（3）","date":"2021-07-20T08:34:10.000Z","_content":"# Linux实现模拟多进程并发执行\n示例：\n```bash\n#!/bin/bash\nfor((i=0;i<5;i++))\ndo\n{\n\tsleep 1; echo \"$i--\">>aa && echo \"done\"\n}&\ndone\nwait\ncat aa | wc -l\nrm aa\n```\n**解析**\n&代表并发执行，wait等待前面执行完了再执行，例如此示例中，如果没有wait很可能还没创建aa文件\n# Linux下的中断\n```c\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n\nint main(void)\n{\n\tpid_t pid; //pid\n\n\tprintf(\"Before fork...\n\");\n\n\tswitch( pid = fork()) {\n\t\tcase -1:\n\t\t\tprintf(\"fork call fail\n\");\n\t\t\tfflush(stdout);\n\t\t\texit(1);\n\t\tcase 0:\n\t\t\tprintf(\"child call\n\");\n\t\t\tprintf(\"the pid of child is %d\n\", getpid());\n\t\t\tprintf(\"the pid of child's parent is %d\n\", getppid());\n\t\t\tprintf(\"child exiting...\n\");\n\t\t\texit(0);\n\t\tdefault:\n\t\t\tprintf(\"this is a father\n\");\n\t\t\tprintf(\"the pid of parent is %d\n\", getpid());\n\t\t\tprintf(\"the pid of child is %d\n\", pid);\n\t}\n\tprintf(\"After fork, programing exiting\n\");\n\texit(0);\n\n}\n\n```","source":"_posts/opratingSystem_03.md","raw":"---\ntitle: 操作系统（3）\ndate: 2021-07-20 16:34:10\ntags: \n- 学习\ncategories: \n- 操作系统\n---\n# Linux实现模拟多进程并发执行\n示例：\n```bash\n#!/bin/bash\nfor((i=0;i<5;i++))\ndo\n{\n\tsleep 1; echo \"$i--\">>aa && echo \"done\"\n}&\ndone\nwait\ncat aa | wc -l\nrm aa\n```\n**解析**\n&代表并发执行，wait等待前面执行完了再执行，例如此示例中，如果没有wait很可能还没创建aa文件\n# Linux下的中断\n```c\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n\nint main(void)\n{\n\tpid_t pid; //pid\n\n\tprintf(\"Before fork...\n\");\n\n\tswitch( pid = fork()) {\n\t\tcase -1:\n\t\t\tprintf(\"fork call fail\n\");\n\t\t\tfflush(stdout);\n\t\t\texit(1);\n\t\tcase 0:\n\t\t\tprintf(\"child call\n\");\n\t\t\tprintf(\"the pid of child is %d\n\", getpid());\n\t\t\tprintf(\"the pid of child's parent is %d\n\", getppid());\n\t\t\tprintf(\"child exiting...\n\");\n\t\t\texit(0);\n\t\tdefault:\n\t\t\tprintf(\"this is a father\n\");\n\t\t\tprintf(\"the pid of parent is %d\n\", getpid());\n\t\t\tprintf(\"the pid of child is %d\n\", pid);\n\t}\n\tprintf(\"After fork, programing exiting\n\");\n\texit(0);\n\n}\n\n```","slug":"opratingSystem_03","published":1,"updated":"2021-07-23T02:16:43.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke80046l0xogmafawuz","content":"<h1 id=\"Linux实现模拟多进程并发执行\"><a href=\"#Linux实现模拟多进程并发执行\" class=\"headerlink\" title=\"Linux实现模拟多进程并发执行\"></a>Linux实现模拟多进程并发执行</h1><p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;5;i++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsleep 1; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$i</span>--\"</span>&gt;&gt;aa &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"done\"</span></span><br><span class=\"line\">&#125;&amp;</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">wait</span></span><br><span class=\"line\">cat aa | wc -l</span><br><span class=\"line\">rm aa</span><br></pre></td></tr></table></figure>\n<p><strong>解析</strong><br>&amp;代表并发执行，wait等待前面执行完了再执行，例如此示例中，如果没有wait很可能还没创建aa文件</p>\n<h1 id=\"Linux下的中断\"><a href=\"#Linux下的中断\" class=\"headerlink\" title=\"Linux下的中断\"></a>Linux下的中断</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> pid; <span class=\"comment\">//pid</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Before fork...</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>( pid = fork()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">-1</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fork call fail</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t\t\tfflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"child call</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the pid of child is %d</span></span><br><span class=\"line\"><span class=\"string\">\"</span>, getpid());</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the pid of child's parent is %d</span></span><br><span class=\"line\"><span class=\"string\">\"</span>, getppid());</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"child exiting...</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"this is a father</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the pid of parent is %d</span></span><br><span class=\"line\"><span class=\"string\">\"</span>, getpid());</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the pid of child is %d</span></span><br><span class=\"line\"><span class=\"string\">\"</span>, pid);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"After fork, programing exiting</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux实现模拟多进程并发执行\"><a href=\"#Linux实现模拟多进程并发执行\" class=\"headerlink\" title=\"Linux实现模拟多进程并发执行\"></a>Linux实现模拟多进程并发执行</h1><p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;5;i++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsleep 1; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$i</span>--\"</span>&gt;&gt;aa &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"done\"</span></span><br><span class=\"line\">&#125;&amp;</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">wait</span></span><br><span class=\"line\">cat aa | wc -l</span><br><span class=\"line\">rm aa</span><br></pre></td></tr></table></figure>\n<p><strong>解析</strong><br>&amp;代表并发执行，wait等待前面执行完了再执行，例如此示例中，如果没有wait很可能还没创建aa文件</p>\n<h1 id=\"Linux下的中断\"><a href=\"#Linux下的中断\" class=\"headerlink\" title=\"Linux下的中断\"></a>Linux下的中断</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> pid; <span class=\"comment\">//pid</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Before fork...</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>( pid = fork()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">-1</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fork call fail</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t\t\tfflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"child call</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the pid of child is %d</span></span><br><span class=\"line\"><span class=\"string\">\"</span>, getpid());</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the pid of child's parent is %d</span></span><br><span class=\"line\"><span class=\"string\">\"</span>, getppid());</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"child exiting...</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"this is a father</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the pid of parent is %d</span></span><br><span class=\"line\"><span class=\"string\">\"</span>, getpid());</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"the pid of child is %d</span></span><br><span class=\"line\"><span class=\"string\">\"</span>, pid);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"After fork, programing exiting</span></span><br><span class=\"line\"><span class=\"string\">\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PHP常见算法","date":"2019-04-08T10:27:44.000Z","_content":"# 排序算法\n## 1 冒泡排序\n**解析**\n从零开始，每一位和剩余位数比较，如果大于（小于）则交换，最后一位最终会是最大（最小）的。\n**代码**\n```php\n<?php\n$arr = [2,3,1,4,7,6,9];\nvar_dump(bubbleSort($arr));\nfunction bubbleSort($arr)\n{\n    $len = count($arr);\n    for($i = 0;$i < $len; $i++) {\n        for($j = $len - 1;$j > $i;$j--) {\n            if($arr[$j] < $arr[$j-1]) {\n                $tmp = $arr[$j];\n                $arr[$j ] = $arr[$j - 1];\n                $arr[$j - 1] = $tmp;\n            }\n        }\n    }\n    return $arr;\n}\n\n```\n## 2 快速排序\n**解析**\n选中一个值（一般是$arr[0]）作为基准，通过一次排序分割成比基准数小和比基准数大的两部分\n```php\n<?php\n$arr = [3,4,1,5,7,2,6];\nfunction quickSort($arr)\n{\n    if(count($arr) <= 1)\n    {   \n        return $arr;\n    }   \n    $mid = $arr[0];\n    $left = array();\n    $right = array();\n    for($i = 1;$i<count($arr);$i++)\n    {   \n        if($mid < $arr[$i])\n        {   \n            $right[] = $arr[$i];\n        } else {\n            $left[] = $arr[$i];\n        }   \n    }   \n    $left = quickSort($left);\n    $right = quickSort($right);\n    return array_merge($left,array($mid),$right);\n}\nvar_dump(quickSort($arr));\n\n```\n**注意事项**\narray_merge()需要将左边，中间和右边都合并\n\n# 查找算法\n## 折半查找\n\n","source":"_posts/phpAlg.md","raw":"---\ntitle: PHP常见算法\ndate: 2019-04-08 18:27:44\ntags:\ncategories: \n- php\n---\n# 排序算法\n## 1 冒泡排序\n**解析**\n从零开始，每一位和剩余位数比较，如果大于（小于）则交换，最后一位最终会是最大（最小）的。\n**代码**\n```php\n<?php\n$arr = [2,3,1,4,7,6,9];\nvar_dump(bubbleSort($arr));\nfunction bubbleSort($arr)\n{\n    $len = count($arr);\n    for($i = 0;$i < $len; $i++) {\n        for($j = $len - 1;$j > $i;$j--) {\n            if($arr[$j] < $arr[$j-1]) {\n                $tmp = $arr[$j];\n                $arr[$j ] = $arr[$j - 1];\n                $arr[$j - 1] = $tmp;\n            }\n        }\n    }\n    return $arr;\n}\n\n```\n## 2 快速排序\n**解析**\n选中一个值（一般是$arr[0]）作为基准，通过一次排序分割成比基准数小和比基准数大的两部分\n```php\n<?php\n$arr = [3,4,1,5,7,2,6];\nfunction quickSort($arr)\n{\n    if(count($arr) <= 1)\n    {   \n        return $arr;\n    }   \n    $mid = $arr[0];\n    $left = array();\n    $right = array();\n    for($i = 1;$i<count($arr);$i++)\n    {   \n        if($mid < $arr[$i])\n        {   \n            $right[] = $arr[$i];\n        } else {\n            $left[] = $arr[$i];\n        }   \n    }   \n    $left = quickSort($left);\n    $right = quickSort($right);\n    return array_merge($left,array($mid),$right);\n}\nvar_dump(quickSort($arr));\n\n```\n**注意事项**\narray_merge()需要将左边，中间和右边都合并\n\n# 查找算法\n## 折半查找\n\n","slug":"phpAlg","published":1,"updated":"2021-07-23T01:58:27.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ke90048l0xog6xuallt","content":"<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1 冒泡排序\"></a>1 冒泡排序</h2><p><strong>解析</strong><br>从零开始，每一位和剩余位数比较，如果大于（小于）则交换，最后一位最终会是最大（最小）的。<br><strong>代码</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\">var_dump(bubbleSort($arr));</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>;$i &lt; $len; $i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>($j = $len - <span class=\"number\">1</span>;$j &gt; $i;$j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>($arr[$j] &lt; $arr[$j<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">                $tmp = $arr[$j];</span><br><span class=\"line\">                $arr[$j ] = $arr[$j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                $arr[$j - <span class=\"number\">1</span>] = $tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-快速排序\"><a href=\"#2-快速排序\" class=\"headerlink\" title=\"2 快速排序\"></a>2 快速排序</h2><p><strong>解析</strong><br>选中一个值（一般是$arr[0]）作为基准，通过一次排序分割成比基准数小和比基准数大的两部分</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count($arr) &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    $mid = $arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    $left = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    $right = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>;$i&lt;count($arr);$i++)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">if</span>($mid &lt; $arr[$i])</span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            $right[] = $arr[$i];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $left[] = $arr[$i];</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    $left = quickSort($left);</span><br><span class=\"line\">    $right = quickSort($right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_merge($left,<span class=\"keyword\">array</span>($mid),$right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(quickSort($arr));</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong><br>array_merge()需要将左边，中间和右边都合并</p>\n<h1 id=\"查找算法\"><a href=\"#查找算法\" class=\"headerlink\" title=\"查找算法\"></a>查找算法</h1><h2 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h1><h2 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1 冒泡排序\"></a>1 冒泡排序</h2><p><strong>解析</strong><br>从零开始，每一位和剩余位数比较，如果大于（小于）则交换，最后一位最终会是最大（最小）的。<br><strong>代码</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\">var_dump(bubbleSort($arr));</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>;$i &lt; $len; $i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>($j = $len - <span class=\"number\">1</span>;$j &gt; $i;$j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>($arr[$j] &lt; $arr[$j<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">                $tmp = $arr[$j];</span><br><span class=\"line\">                $arr[$j ] = $arr[$j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                $arr[$j - <span class=\"number\">1</span>] = $tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-快速排序\"><a href=\"#2-快速排序\" class=\"headerlink\" title=\"2 快速排序\"></a>2 快速排序</h2><p><strong>解析</strong><br>选中一个值（一般是$arr[0]）作为基准，通过一次排序分割成比基准数小和比基准数大的两部分</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count($arr) &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    $mid = $arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    $left = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    $right = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>;$i&lt;count($arr);$i++)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">if</span>($mid &lt; $arr[$i])</span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            $right[] = $arr[$i];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $left[] = $arr[$i];</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    $left = quickSort($left);</span><br><span class=\"line\">    $right = quickSort($right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_merge($left,<span class=\"keyword\">array</span>($mid),$right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(quickSort($arr));</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong><br>array_merge()需要将左边，中间和右边都合并</p>\n<h1 id=\"查找算法\"><a href=\"#查找算法\" class=\"headerlink\" title=\"查找算法\"></a>查找算法</h1><h2 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h2>"},{"title":"安装php sniffer","date":"2019-04-07T10:27:44.000Z","_content":"\n###  安装pear（参考文档：https://www.cnblogs.com/huangbx/p/php_codesniffer.html）\n-------------\n1. 从以下网址：http://pear.php.net/go-pear.phar下载代码，或直接另存为文件go-pear.phar\n2. 运行php go-pear.phar（注意是否加了环境变量，没有可在php.exe目录下运行）\n3. 如果报错“ERROR, enter the php.exe path”，输入选项13，选择php.exe所在目录\n\n### 安装php sniffer\n------------\n1. 运行命令“pear install PHP_CodeSniffer”\n2. 配置phpstorm（其他IDE请自行Google），Settings->Languages & Frameworks->php->Code Sniffer，选择刚才安装的phpcs.bat文件，validate 看看会不会报错\n3. 如果校验报错，可能是找不到autoload路径，打开phpcs文件，更改include路径，例如我可以直接改成include_once '/pear/PHP/CodeSniffer/autoload.php'\n4. 选择Settings->Inspections->PHP Code Sniffer validation，点击刷新按钮，选择\"PSR2\"\n5. 此时如果有不规范的代码可以看到有phpcs的报错了\n\n### 配置本地git\n----------\n1. 打开.git/hooks,新建文件pre-commit\n2. 示例代码如下\n```\n#!/bin/bash\n#\n# check PHP code syntax error and standard with phpcs\n# author : star[github.com/star1989]\n# date : 2017-02-24\nPROJECT=$(git rev-parse --show-toplevel)\ncd $PROJECT\nSFILES=$(git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.php)\nTMP_DIR=$PROJECT.\"/tmp\"\n\n# Determine if a file list is passed\nif [ \"$#\" -ne 0 ]\nthen\n    exit 0\nfi\necho \"Checking PHP Lint...\"\nfor FILE in $SFILES\ndo\n#    echo \"php -l -d display_errors=0 ${FILE}\"\n#   echo \"git show :$FILE > $TMP_DIR/$FILE\"\n    php -l -d display_errors=0 $FILE\n    if [ $? != 0  ]\n    then\n        echo \"Fix the error before commit.\"\n        exit 1\n    fi\n    FILES=\"$FILES $PROJECT/$FILE\"\ndone\n\nif [ \"$FILES\" != \"\" ]\nthen\n    echo \"Running Code Sniffer...\"\n\n    TMP_DIR=/tmp/$(uuidgen)\n    mkdir -p $TMP_DIR\n    for FILE in $SFILES\n    do\n        mkdir -p $TMP_DIR/$(dirname $FILE)\n        git show :$FILE > $TMP_DIR/$FILE\n    done\n    phpcs --standard=PSR2 --encoding=utf-8 -n $TMP_DIR\n    PHPCS_ERROR=$?\n    rm -rf $TMP_DIR\n    if [ $PHPCS_ERROR != 0 ]\n    then\n        echo \"Fix the error before commit.\"\n        exit 1\n    fi\nfi\n\nexit $?\n```\n3. 注意这行phpcs --standard=PSR2 --encoding=utf-8 -n $TMP_DIR，在运行git的终端下运行phpcs --help,如果可以运行这行才会生效\n4. 此时提交不规范的代码就会报错\n","source":"_posts/phpPsr.md","raw":"---\ntitle: 安装php sniffer\ndate: 2019-04-07 18:27:44\ntags:\ncategories: \n- php\n---\n\n###  安装pear（参考文档：https://www.cnblogs.com/huangbx/p/php_codesniffer.html）\n-------------\n1. 从以下网址：http://pear.php.net/go-pear.phar下载代码，或直接另存为文件go-pear.phar\n2. 运行php go-pear.phar（注意是否加了环境变量，没有可在php.exe目录下运行）\n3. 如果报错“ERROR, enter the php.exe path”，输入选项13，选择php.exe所在目录\n\n### 安装php sniffer\n------------\n1. 运行命令“pear install PHP_CodeSniffer”\n2. 配置phpstorm（其他IDE请自行Google），Settings->Languages & Frameworks->php->Code Sniffer，选择刚才安装的phpcs.bat文件，validate 看看会不会报错\n3. 如果校验报错，可能是找不到autoload路径，打开phpcs文件，更改include路径，例如我可以直接改成include_once '/pear/PHP/CodeSniffer/autoload.php'\n4. 选择Settings->Inspections->PHP Code Sniffer validation，点击刷新按钮，选择\"PSR2\"\n5. 此时如果有不规范的代码可以看到有phpcs的报错了\n\n### 配置本地git\n----------\n1. 打开.git/hooks,新建文件pre-commit\n2. 示例代码如下\n```\n#!/bin/bash\n#\n# check PHP code syntax error and standard with phpcs\n# author : star[github.com/star1989]\n# date : 2017-02-24\nPROJECT=$(git rev-parse --show-toplevel)\ncd $PROJECT\nSFILES=$(git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.php)\nTMP_DIR=$PROJECT.\"/tmp\"\n\n# Determine if a file list is passed\nif [ \"$#\" -ne 0 ]\nthen\n    exit 0\nfi\necho \"Checking PHP Lint...\"\nfor FILE in $SFILES\ndo\n#    echo \"php -l -d display_errors=0 ${FILE}\"\n#   echo \"git show :$FILE > $TMP_DIR/$FILE\"\n    php -l -d display_errors=0 $FILE\n    if [ $? != 0  ]\n    then\n        echo \"Fix the error before commit.\"\n        exit 1\n    fi\n    FILES=\"$FILES $PROJECT/$FILE\"\ndone\n\nif [ \"$FILES\" != \"\" ]\nthen\n    echo \"Running Code Sniffer...\"\n\n    TMP_DIR=/tmp/$(uuidgen)\n    mkdir -p $TMP_DIR\n    for FILE in $SFILES\n    do\n        mkdir -p $TMP_DIR/$(dirname $FILE)\n        git show :$FILE > $TMP_DIR/$FILE\n    done\n    phpcs --standard=PSR2 --encoding=utf-8 -n $TMP_DIR\n    PHPCS_ERROR=$?\n    rm -rf $TMP_DIR\n    if [ $PHPCS_ERROR != 0 ]\n    then\n        echo \"Fix the error before commit.\"\n        exit 1\n    fi\nfi\n\nexit $?\n```\n3. 注意这行phpcs --standard=PSR2 --encoding=utf-8 -n $TMP_DIR，在运行git的终端下运行phpcs --help,如果可以运行这行才会生效\n4. 此时提交不规范的代码就会报错\n","slug":"phpPsr","published":1,"updated":"2021-07-23T01:58:27.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kea004al0xohjz217wk","content":"<h3 id=\"安装pear（参考文档：https-www-cnblogs-com-huangbx-p-php-codesniffer-html）\"><a href=\"#安装pear（参考文档：https-www-cnblogs-com-huangbx-p-php-codesniffer-html）\" class=\"headerlink\" title=\"安装pear（参考文档：https://www.cnblogs.com/huangbx/p/php_codesniffer.html）\"></a>安装pear（参考文档：<a href=\"https://www.cnblogs.com/huangbx/p/php_codesniffer.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/huangbx/p/php_codesniffer.html）</a></h3><hr>\n<ol>\n<li>从以下网址：<a href=\"http://pear.php.net/go-pear.phar下载代码，或直接另存为文件go-pear.phar\" target=\"_blank\" rel=\"noopener\">http://pear.php.net/go-pear.phar下载代码，或直接另存为文件go-pear.phar</a></li>\n<li>运行php go-pear.phar（注意是否加了环境变量，没有可在php.exe目录下运行）</li>\n<li>如果报错“ERROR, enter the php.exe path”，输入选项13，选择php.exe所在目录</li>\n</ol>\n<h3 id=\"安装php-sniffer\"><a href=\"#安装php-sniffer\" class=\"headerlink\" title=\"安装php sniffer\"></a>安装php sniffer</h3><hr>\n<ol>\n<li>运行命令“pear install PHP_CodeSniffer”</li>\n<li>配置phpstorm（其他IDE请自行Google），Settings-&gt;Languages &amp; Frameworks-&gt;php-&gt;Code Sniffer，选择刚才安装的phpcs.bat文件，validate 看看会不会报错</li>\n<li>如果校验报错，可能是找不到autoload路径，打开phpcs文件，更改include路径，例如我可以直接改成include_once ‘/pear/PHP/CodeSniffer/autoload.php’</li>\n<li>选择Settings-&gt;Inspections-&gt;PHP Code Sniffer validation，点击刷新按钮，选择”PSR2”</li>\n<li>此时如果有不规范的代码可以看到有phpcs的报错了</li>\n</ol>\n<h3 id=\"配置本地git\"><a href=\"#配置本地git\" class=\"headerlink\" title=\"配置本地git\"></a>配置本地git</h3><hr>\n<ol>\n<li>打开.git/hooks,新建文件pre-commit</li>\n<li>示例代码如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;bin&#x2F;bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># check PHP code syntax error and standard with phpcs</span><br><span class=\"line\"># author : star[github.com&#x2F;star1989]</span><br><span class=\"line\"># date : 2017-02-24</span><br><span class=\"line\">PROJECT&#x3D;$(git rev-parse --show-toplevel)</span><br><span class=\"line\">cd $PROJECT</span><br><span class=\"line\">SFILES&#x3D;$(git diff --cached --name-only --diff-filter&#x3D;ACMR HEAD | grep \\\\.php)</span><br><span class=\"line\">TMP_DIR&#x3D;$PROJECT.&quot;&#x2F;tmp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine if a file list is passed</span><br><span class=\"line\">if [ &quot;$#&quot; -ne 0 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    exit 0</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;Checking PHP Lint...&quot;</span><br><span class=\"line\">for FILE in $SFILES</span><br><span class=\"line\">do</span><br><span class=\"line\">#    echo &quot;php -l -d display_errors&#x3D;0 $&#123;FILE&#125;&quot;</span><br><span class=\"line\">#   echo &quot;git show :$FILE &gt; $TMP_DIR&#x2F;$FILE&quot;</span><br><span class=\"line\">    php -l -d display_errors&#x3D;0 $FILE</span><br><span class=\"line\">    if [ $? !&#x3D; 0  ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo &quot;Fix the error before commit.&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    FILES&#x3D;&quot;$FILES $PROJECT&#x2F;$FILE&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$FILES&quot; !&#x3D; &quot;&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;Running Code Sniffer...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    TMP_DIR&#x3D;&#x2F;tmp&#x2F;$(uuidgen)</span><br><span class=\"line\">    mkdir -p $TMP_DIR</span><br><span class=\"line\">    for FILE in $SFILES</span><br><span class=\"line\">    do</span><br><span class=\"line\">        mkdir -p $TMP_DIR&#x2F;$(dirname $FILE)</span><br><span class=\"line\">        git show :$FILE &gt; $TMP_DIR&#x2F;$FILE</span><br><span class=\"line\">    done</span><br><span class=\"line\">    phpcs --standard&#x3D;PSR2 --encoding&#x3D;utf-8 -n $TMP_DIR</span><br><span class=\"line\">    PHPCS_ERROR&#x3D;$?</span><br><span class=\"line\">    rm -rf $TMP_DIR</span><br><span class=\"line\">    if [ $PHPCS_ERROR !&#x3D; 0 ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo &quot;Fix the error before commit.&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">exit $?</span><br></pre></td></tr></table></figure></li>\n<li>注意这行phpcs –standard=PSR2 –encoding=utf-8 -n $TMP_DIR，在运行git的终端下运行phpcs –help,如果可以运行这行才会生效</li>\n<li>此时提交不规范的代码就会报错</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装pear（参考文档：https-www-cnblogs-com-huangbx-p-php-codesniffer-html）\"><a href=\"#安装pear（参考文档：https-www-cnblogs-com-huangbx-p-php-codesniffer-html）\" class=\"headerlink\" title=\"安装pear（参考文档：https://www.cnblogs.com/huangbx/p/php_codesniffer.html）\"></a>安装pear（参考文档：<a href=\"https://www.cnblogs.com/huangbx/p/php_codesniffer.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/huangbx/p/php_codesniffer.html）</a></h3><hr>\n<ol>\n<li>从以下网址：<a href=\"http://pear.php.net/go-pear.phar下载代码，或直接另存为文件go-pear.phar\" target=\"_blank\" rel=\"noopener\">http://pear.php.net/go-pear.phar下载代码，或直接另存为文件go-pear.phar</a></li>\n<li>运行php go-pear.phar（注意是否加了环境变量，没有可在php.exe目录下运行）</li>\n<li>如果报错“ERROR, enter the php.exe path”，输入选项13，选择php.exe所在目录</li>\n</ol>\n<h3 id=\"安装php-sniffer\"><a href=\"#安装php-sniffer\" class=\"headerlink\" title=\"安装php sniffer\"></a>安装php sniffer</h3><hr>\n<ol>\n<li>运行命令“pear install PHP_CodeSniffer”</li>\n<li>配置phpstorm（其他IDE请自行Google），Settings-&gt;Languages &amp; Frameworks-&gt;php-&gt;Code Sniffer，选择刚才安装的phpcs.bat文件，validate 看看会不会报错</li>\n<li>如果校验报错，可能是找不到autoload路径，打开phpcs文件，更改include路径，例如我可以直接改成include_once ‘/pear/PHP/CodeSniffer/autoload.php’</li>\n<li>选择Settings-&gt;Inspections-&gt;PHP Code Sniffer validation，点击刷新按钮，选择”PSR2”</li>\n<li>此时如果有不规范的代码可以看到有phpcs的报错了</li>\n</ol>\n<h3 id=\"配置本地git\"><a href=\"#配置本地git\" class=\"headerlink\" title=\"配置本地git\"></a>配置本地git</h3><hr>\n<ol>\n<li>打开.git/hooks,新建文件pre-commit</li>\n<li>示例代码如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;bin&#x2F;bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># check PHP code syntax error and standard with phpcs</span><br><span class=\"line\"># author : star[github.com&#x2F;star1989]</span><br><span class=\"line\"># date : 2017-02-24</span><br><span class=\"line\">PROJECT&#x3D;$(git rev-parse --show-toplevel)</span><br><span class=\"line\">cd $PROJECT</span><br><span class=\"line\">SFILES&#x3D;$(git diff --cached --name-only --diff-filter&#x3D;ACMR HEAD | grep \\\\.php)</span><br><span class=\"line\">TMP_DIR&#x3D;$PROJECT.&quot;&#x2F;tmp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine if a file list is passed</span><br><span class=\"line\">if [ &quot;$#&quot; -ne 0 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    exit 0</span><br><span class=\"line\">fi</span><br><span class=\"line\">echo &quot;Checking PHP Lint...&quot;</span><br><span class=\"line\">for FILE in $SFILES</span><br><span class=\"line\">do</span><br><span class=\"line\">#    echo &quot;php -l -d display_errors&#x3D;0 $&#123;FILE&#125;&quot;</span><br><span class=\"line\">#   echo &quot;git show :$FILE &gt; $TMP_DIR&#x2F;$FILE&quot;</span><br><span class=\"line\">    php -l -d display_errors&#x3D;0 $FILE</span><br><span class=\"line\">    if [ $? !&#x3D; 0  ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo &quot;Fix the error before commit.&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    FILES&#x3D;&quot;$FILES $PROJECT&#x2F;$FILE&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$FILES&quot; !&#x3D; &quot;&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;Running Code Sniffer...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    TMP_DIR&#x3D;&#x2F;tmp&#x2F;$(uuidgen)</span><br><span class=\"line\">    mkdir -p $TMP_DIR</span><br><span class=\"line\">    for FILE in $SFILES</span><br><span class=\"line\">    do</span><br><span class=\"line\">        mkdir -p $TMP_DIR&#x2F;$(dirname $FILE)</span><br><span class=\"line\">        git show :$FILE &gt; $TMP_DIR&#x2F;$FILE</span><br><span class=\"line\">    done</span><br><span class=\"line\">    phpcs --standard&#x3D;PSR2 --encoding&#x3D;utf-8 -n $TMP_DIR</span><br><span class=\"line\">    PHPCS_ERROR&#x3D;$?</span><br><span class=\"line\">    rm -rf $TMP_DIR</span><br><span class=\"line\">    if [ $PHPCS_ERROR !&#x3D; 0 ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo &quot;Fix the error before commit.&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">exit $?</span><br></pre></td></tr></table></figure></li>\n<li>注意这行phpcs –standard=PSR2 –encoding=utf-8 -n $TMP_DIR，在运行git的终端下运行phpcs –help,如果可以运行这行才会生效</li>\n<li>此时提交不规范的代码就会报错</li>\n</ol>\n"},{"title":"python进阶","date":"2019-03-14T02:36:10.000Z","_content":"# *args和**kwargs\n## *args\n*args和**kwargs主要用于函数定义，可以将不定数量的参数传递给一个函数\n**举例**\n输入：\n```\ndef test_var_args(f_arg, *argv):\nprint(\"first normal arg:\", f_arg)\nfor arg in argv:\nprint(\"another arg through *argv:\", arg)\ntest_var_args('yasoob', 'python', 'eggs', 'test')\n```\n输出：\n```\nfirst normal arg: yasoob\nanother arg through *argv: python\nanother arg through *argv: eggs\nanother arg through *argv: test\n```\n## *kwargs\n*kwargs允许将不定长度的键值对作为参数传递给一个函数，如果想在一个函数里处理带名字的参数，应该使用**kwargs\n使用示例如下：\n```\ndef getArgs(f_arg, *args):\n    print \"first is\" + f_arg\n    for arg in args:\n        print \"the data is\" + arg \ndef gree(**kwa):\n    for key, value in kwa.items():\n        print(\"{0} == {1}\".format(key,value))\n#getArgs('name1', 'name2', 'name3', 'name4')\ngree(name='test', age=12, first=\"apple\")\n```\n输出：\n```\nage == 12\nname == test\nfirst == apple\n```\n## 使用*args和**kwargs来调用函数\n如果存在以下函数：\n```\ndef test_args_kwargs(arg1, arg2, arg3):\nprint(\"arg1:\", arg1)\nprint(\"arg2:\", arg2)\nprint(\"arg3:\", arg3)\n```\n可以使用*args或**kwargs来给这个函数传递参数\n(1)如果是*args\n```\nargs = (\"two\", 3, 5)\ntest_args_kwargs(*args)\n```\n输出：\n```\narg1: two\narg2: 3\narg3: 5\n```\n(2)如果是**kwargs\n```\nkwargs = {\"arg3\": 3, \"arg2\": \"two\", \"arg1\": 5}\ntest_args_kwargs(**kwargs)\n```\n输出：\n```\narg1: 5\narg2: two\narg3: 3\n```\n(3)标准参数与*args、*kwargs在使用时的顺序\nsome_func(fargs, *args, **kwargs)\n#### 使用场景\n**函数装饰器**\n**猴子补丁**\n\n##调试**\n[python debugger](https://www.hexiaojiao.top/2019/03/14/python_debugger/ \"python debugger\")\n##生成器和迭代器\n##Map Filter和Reduce\n\n","source":"_posts/python.md","raw":"---\ntitle: python进阶\ndate: 2019-03-14 10:36:10\ncategories: \n- 服务端语言\n- python\n---\n# *args和**kwargs\n## *args\n*args和**kwargs主要用于函数定义，可以将不定数量的参数传递给一个函数\n**举例**\n输入：\n```\ndef test_var_args(f_arg, *argv):\nprint(\"first normal arg:\", f_arg)\nfor arg in argv:\nprint(\"another arg through *argv:\", arg)\ntest_var_args('yasoob', 'python', 'eggs', 'test')\n```\n输出：\n```\nfirst normal arg: yasoob\nanother arg through *argv: python\nanother arg through *argv: eggs\nanother arg through *argv: test\n```\n## *kwargs\n*kwargs允许将不定长度的键值对作为参数传递给一个函数，如果想在一个函数里处理带名字的参数，应该使用**kwargs\n使用示例如下：\n```\ndef getArgs(f_arg, *args):\n    print \"first is\" + f_arg\n    for arg in args:\n        print \"the data is\" + arg \ndef gree(**kwa):\n    for key, value in kwa.items():\n        print(\"{0} == {1}\".format(key,value))\n#getArgs('name1', 'name2', 'name3', 'name4')\ngree(name='test', age=12, first=\"apple\")\n```\n输出：\n```\nage == 12\nname == test\nfirst == apple\n```\n## 使用*args和**kwargs来调用函数\n如果存在以下函数：\n```\ndef test_args_kwargs(arg1, arg2, arg3):\nprint(\"arg1:\", arg1)\nprint(\"arg2:\", arg2)\nprint(\"arg3:\", arg3)\n```\n可以使用*args或**kwargs来给这个函数传递参数\n(1)如果是*args\n```\nargs = (\"two\", 3, 5)\ntest_args_kwargs(*args)\n```\n输出：\n```\narg1: two\narg2: 3\narg3: 5\n```\n(2)如果是**kwargs\n```\nkwargs = {\"arg3\": 3, \"arg2\": \"two\", \"arg1\": 5}\ntest_args_kwargs(**kwargs)\n```\n输出：\n```\narg1: 5\narg2: two\narg3: 3\n```\n(3)标准参数与*args、*kwargs在使用时的顺序\nsome_func(fargs, *args, **kwargs)\n#### 使用场景\n**函数装饰器**\n**猴子补丁**\n\n##调试**\n[python debugger](https://www.hexiaojiao.top/2019/03/14/python_debugger/ \"python debugger\")\n##生成器和迭代器\n##Map Filter和Reduce\n\n","slug":"python","published":1,"updated":"2021-07-23T01:58:27.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4keb004dl0xofijgh38n","content":"<h1 id=\"args和-kwargs\"><a href=\"#args和-kwargs\" class=\"headerlink\" title=\"args和*kwargs\"></a><em>args和*</em>kwargs</h1><h2 id=\"args\"><a href=\"#args\" class=\"headerlink\" title=\"*args\"></a>*args</h2><p><em>args和*</em>kwargs主要用于函数定义，可以将不定数量的参数传递给一个函数<br><strong>举例</strong><br>输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def test_var_args(f_arg, *argv):</span><br><span class=\"line\">print(&quot;first normal arg:&quot;, f_arg)</span><br><span class=\"line\">for arg in argv:</span><br><span class=\"line\">print(&quot;another arg through *argv:&quot;, arg)</span><br><span class=\"line\">test_var_args(&#39;yasoob&#39;, &#39;python&#39;, &#39;eggs&#39;, &#39;test&#39;)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first normal arg: yasoob</span><br><span class=\"line\">another arg through *argv: python</span><br><span class=\"line\">another arg through *argv: eggs</span><br><span class=\"line\">another arg through *argv: test</span><br></pre></td></tr></table></figure>\n<h2 id=\"kwargs\"><a href=\"#kwargs\" class=\"headerlink\" title=\"*kwargs\"></a>*kwargs</h2><p><em>kwargs允许将不定长度的键值对作为参数传递给一个函数，如果想在一个函数里处理带名字的参数，应该使用*</em>kwargs<br>使用示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getArgs(f_arg, *args):</span><br><span class=\"line\">    print &quot;first is&quot; + f_arg</span><br><span class=\"line\">    for arg in args:</span><br><span class=\"line\">        print &quot;the data is&quot; + arg </span><br><span class=\"line\">def gree(**kwa):</span><br><span class=\"line\">    for key, value in kwa.items():</span><br><span class=\"line\">        print(&quot;&#123;0&#125; &#x3D;&#x3D; &#123;1&#125;&quot;.format(key,value))</span><br><span class=\"line\">#getArgs(&#39;name1&#39;, &#39;name2&#39;, &#39;name3&#39;, &#39;name4&#39;)</span><br><span class=\"line\">gree(name&#x3D;&#39;test&#39;, age&#x3D;12, first&#x3D;&quot;apple&quot;)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age &#x3D;&#x3D; 12</span><br><span class=\"line\">name &#x3D;&#x3D; test</span><br><span class=\"line\">first &#x3D;&#x3D; apple</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用args和-kwargs来调用函数\"><a href=\"#使用args和-kwargs来调用函数\" class=\"headerlink\" title=\"使用args和*kwargs来调用函数\"></a>使用<em>args和*</em>kwargs来调用函数</h2><p>如果存在以下函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def test_args_kwargs(arg1, arg2, arg3):</span><br><span class=\"line\">print(&quot;arg1:&quot;, arg1)</span><br><span class=\"line\">print(&quot;arg2:&quot;, arg2)</span><br><span class=\"line\">print(&quot;arg3:&quot;, arg3)</span><br></pre></td></tr></table></figure>\n<p>可以使用<em>args或*</em>kwargs来给这个函数传递参数<br>(1)如果是*args</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">args &#x3D; (&quot;two&quot;, 3, 5)</span><br><span class=\"line\">test_args_kwargs(*args)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg1: two</span><br><span class=\"line\">arg2: 3</span><br><span class=\"line\">arg3: 5</span><br></pre></td></tr></table></figure>\n<p>(2)如果是**kwargs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kwargs &#x3D; &#123;&quot;arg3&quot;: 3, &quot;arg2&quot;: &quot;two&quot;, &quot;arg1&quot;: 5&#125;</span><br><span class=\"line\">test_args_kwargs(**kwargs)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg1: 5</span><br><span class=\"line\">arg2: two</span><br><span class=\"line\">arg3: 3</span><br></pre></td></tr></table></figure>\n<p>(3)标准参数与<em>args、</em>kwargs在使用时的顺序<br>some_func(fargs, <em>args, *</em>kwargs)</p>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p><strong>函数装饰器</strong><br><strong>猴子补丁</strong></p>\n<p>##调试**<br><a href=\"https://www.hexiaojiao.top/2019/03/14/python_debugger/\" title=\"python debugger\">python debugger</a><br>##生成器和迭代器<br>##Map Filter和Reduce</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"args和-kwargs\"><a href=\"#args和-kwargs\" class=\"headerlink\" title=\"args和*kwargs\"></a><em>args和*</em>kwargs</h1><h2 id=\"args\"><a href=\"#args\" class=\"headerlink\" title=\"*args\"></a>*args</h2><p><em>args和*</em>kwargs主要用于函数定义，可以将不定数量的参数传递给一个函数<br><strong>举例</strong><br>输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def test_var_args(f_arg, *argv):</span><br><span class=\"line\">print(&quot;first normal arg:&quot;, f_arg)</span><br><span class=\"line\">for arg in argv:</span><br><span class=\"line\">print(&quot;another arg through *argv:&quot;, arg)</span><br><span class=\"line\">test_var_args(&#39;yasoob&#39;, &#39;python&#39;, &#39;eggs&#39;, &#39;test&#39;)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first normal arg: yasoob</span><br><span class=\"line\">another arg through *argv: python</span><br><span class=\"line\">another arg through *argv: eggs</span><br><span class=\"line\">another arg through *argv: test</span><br></pre></td></tr></table></figure>\n<h2 id=\"kwargs\"><a href=\"#kwargs\" class=\"headerlink\" title=\"*kwargs\"></a>*kwargs</h2><p><em>kwargs允许将不定长度的键值对作为参数传递给一个函数，如果想在一个函数里处理带名字的参数，应该使用*</em>kwargs<br>使用示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getArgs(f_arg, *args):</span><br><span class=\"line\">    print &quot;first is&quot; + f_arg</span><br><span class=\"line\">    for arg in args:</span><br><span class=\"line\">        print &quot;the data is&quot; + arg </span><br><span class=\"line\">def gree(**kwa):</span><br><span class=\"line\">    for key, value in kwa.items():</span><br><span class=\"line\">        print(&quot;&#123;0&#125; &#x3D;&#x3D; &#123;1&#125;&quot;.format(key,value))</span><br><span class=\"line\">#getArgs(&#39;name1&#39;, &#39;name2&#39;, &#39;name3&#39;, &#39;name4&#39;)</span><br><span class=\"line\">gree(name&#x3D;&#39;test&#39;, age&#x3D;12, first&#x3D;&quot;apple&quot;)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age &#x3D;&#x3D; 12</span><br><span class=\"line\">name &#x3D;&#x3D; test</span><br><span class=\"line\">first &#x3D;&#x3D; apple</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用args和-kwargs来调用函数\"><a href=\"#使用args和-kwargs来调用函数\" class=\"headerlink\" title=\"使用args和*kwargs来调用函数\"></a>使用<em>args和*</em>kwargs来调用函数</h2><p>如果存在以下函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def test_args_kwargs(arg1, arg2, arg3):</span><br><span class=\"line\">print(&quot;arg1:&quot;, arg1)</span><br><span class=\"line\">print(&quot;arg2:&quot;, arg2)</span><br><span class=\"line\">print(&quot;arg3:&quot;, arg3)</span><br></pre></td></tr></table></figure>\n<p>可以使用<em>args或*</em>kwargs来给这个函数传递参数<br>(1)如果是*args</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">args &#x3D; (&quot;two&quot;, 3, 5)</span><br><span class=\"line\">test_args_kwargs(*args)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg1: two</span><br><span class=\"line\">arg2: 3</span><br><span class=\"line\">arg3: 5</span><br></pre></td></tr></table></figure>\n<p>(2)如果是**kwargs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kwargs &#x3D; &#123;&quot;arg3&quot;: 3, &quot;arg2&quot;: &quot;two&quot;, &quot;arg1&quot;: 5&#125;</span><br><span class=\"line\">test_args_kwargs(**kwargs)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg1: 5</span><br><span class=\"line\">arg2: two</span><br><span class=\"line\">arg3: 3</span><br></pre></td></tr></table></figure>\n<p>(3)标准参数与<em>args、</em>kwargs在使用时的顺序<br>some_func(fargs, <em>args, *</em>kwargs)</p>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p><strong>函数装饰器</strong><br><strong>猴子补丁</strong></p>\n<p>##调试**<br><a href=\"https://www.hexiaojiao.top/2019/03/14/python_debugger/\" title=\"python debugger\">python debugger</a><br>##生成器和迭代器<br>##Map Filter和Reduce</p>\n"},{"title":"生产者消费者模式","date":"2019-10-05T09:40:10.000Z","_content":"# 基础概念\n## 概念介绍\n某块模块负责产生数据，这些数据由另一个模块来负责处理。产生数据的模块，就形象地称为生产者；而处理数据的模块，就称为消费者。    \n该模式还需要有一个缓冲区处于生产者和消费者之间，作为一个中介。生产者把数据放入缓冲区，而消费者从缓冲区取出数据\n缓冲区作用\n\n1. 解耦，生产者和消费者只依赖缓冲区，而不互相依赖\n\n2. 支持并发和异步\n\n3. 支持生产者和消费者忙闲不均（来不及消费缓冲区可以暂存）\n## 使用场景\n队列(类似，但并不完全相等，有的队列没有缓冲区);    \nswoole(业务逻辑(生产者)将数据单元通过swoole的send函数弄到swoole的一个缓冲区之间，通过work进程进行分发，task进程(消费者)进行消费。)\n\n## 代码解析\nCICD创建项目流程类似于生产者消费者模式；   \n（1）用户填写表单，创建一条CICD数据，生产者向数据表添加一条状态为pending的数据，类似于向缓冲区添加数据    \n（2）定时任务读取状态为pending的数据，消费处理后修改状态\n","source":"_posts/producerConsumer.md","raw":"---\ntitle: 生产者消费者模式\ndate: 2019-10-05 17:40:10\ntags: \n- 概念介绍\ncategories: \n- 学习\n- 设计模式\n---\n# 基础概念\n## 概念介绍\n某块模块负责产生数据，这些数据由另一个模块来负责处理。产生数据的模块，就形象地称为生产者；而处理数据的模块，就称为消费者。    \n该模式还需要有一个缓冲区处于生产者和消费者之间，作为一个中介。生产者把数据放入缓冲区，而消费者从缓冲区取出数据\n缓冲区作用\n\n1. 解耦，生产者和消费者只依赖缓冲区，而不互相依赖\n\n2. 支持并发和异步\n\n3. 支持生产者和消费者忙闲不均（来不及消费缓冲区可以暂存）\n## 使用场景\n队列(类似，但并不完全相等，有的队列没有缓冲区);    \nswoole(业务逻辑(生产者)将数据单元通过swoole的send函数弄到swoole的一个缓冲区之间，通过work进程进行分发，task进程(消费者)进行消费。)\n\n## 代码解析\nCICD创建项目流程类似于生产者消费者模式；   \n（1）用户填写表单，创建一条CICD数据，生产者向数据表添加一条状态为pending的数据，类似于向缓冲区添加数据    \n（2）定时任务读取状态为pending的数据，消费处理后修改状态\n","slug":"producerConsumer","published":1,"updated":"2021-07-23T01:58:27.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4keb004el0xohr9le6uz","content":"<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>某块模块负责产生数据，这些数据由另一个模块来负责处理。产生数据的模块，就形象地称为生产者；而处理数据的模块，就称为消费者。<br>该模式还需要有一个缓冲区处于生产者和消费者之间，作为一个中介。生产者把数据放入缓冲区，而消费者从缓冲区取出数据<br>缓冲区作用</p>\n<ol>\n<li><p>解耦，生产者和消费者只依赖缓冲区，而不互相依赖</p>\n</li>\n<li><p>支持并发和异步</p>\n</li>\n<li><p>支持生产者和消费者忙闲不均（来不及消费缓冲区可以暂存）</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>队列(类似，但并不完全相等，有的队列没有缓冲区);<br>swoole(业务逻辑(生产者)将数据单元通过swoole的send函数弄到swoole的一个缓冲区之间，通过work进程进行分发，task进程(消费者)进行消费。)</p>\n</li>\n</ol>\n<h2 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h2><p>CICD创建项目流程类似于生产者消费者模式；<br>（1）用户填写表单，创建一条CICD数据，生产者向数据表添加一条状态为pending的数据，类似于向缓冲区添加数据<br>（2）定时任务读取状态为pending的数据，消费处理后修改状态</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>某块模块负责产生数据，这些数据由另一个模块来负责处理。产生数据的模块，就形象地称为生产者；而处理数据的模块，就称为消费者。<br>该模式还需要有一个缓冲区处于生产者和消费者之间，作为一个中介。生产者把数据放入缓冲区，而消费者从缓冲区取出数据<br>缓冲区作用</p>\n<ol>\n<li><p>解耦，生产者和消费者只依赖缓冲区，而不互相依赖</p>\n</li>\n<li><p>支持并发和异步</p>\n</li>\n<li><p>支持生产者和消费者忙闲不均（来不及消费缓冲区可以暂存）</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>队列(类似，但并不完全相等，有的队列没有缓冲区);<br>swoole(业务逻辑(生产者)将数据单元通过swoole的send函数弄到swoole的一个缓冲区之间，通过work进程进行分发，task进程(消费者)进行消费。)</p>\n</li>\n</ol>\n<h2 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h2><p>CICD创建项目流程类似于生产者消费者模式；<br>（1）用户填写表单，创建一条CICD数据，生产者向数据表添加一条状态为pending的数据，类似于向缓冲区添加数据<br>（2）定时任务读取状态为pending的数据，消费处理后修改状态</p>\n"},{"title":"python数据结构","date":"2019-03-15T01:47:00.000Z","_content":"# 列表(List)\n[python list](https://www.hexiaojiao.top/2019/03/15/pythonlist/ \"python list\")\n\n# deque双向队列\n[python deque](https://www.hexiaojiao.top/2019/03/15/pythondeque/ \"python deque\")\n\n# 集合\n[python set](https://www.hexiaojiao.top/2019/03/15/pythonset/ \"python set\")\n","source":"_posts/pythonStructure.md","raw":"---\ntitle: python数据结构\ndate: 2019-03-15 09:47:00\ncategories: \n- 服务端语言\n- python\n---\n# 列表(List)\n[python list](https://www.hexiaojiao.top/2019/03/15/pythonlist/ \"python list\")\n\n# deque双向队列\n[python deque](https://www.hexiaojiao.top/2019/03/15/pythondeque/ \"python deque\")\n\n# 集合\n[python set](https://www.hexiaojiao.top/2019/03/15/pythonset/ \"python set\")\n","slug":"pythonStructure","published":1,"updated":"2021-07-23T01:58:27.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kec004hl0xobyl6gs24","content":"<h1 id=\"列表-List\"><a href=\"#列表-List\" class=\"headerlink\" title=\"列表(List)\"></a>列表(List)</h1><p><a href=\"https://www.hexiaojiao.top/2019/03/15/pythonlist/\" title=\"python list\">python list</a></p>\n<h1 id=\"deque双向队列\"><a href=\"#deque双向队列\" class=\"headerlink\" title=\"deque双向队列\"></a>deque双向队列</h1><p><a href=\"https://www.hexiaojiao.top/2019/03/15/pythondeque/\" title=\"python deque\">python deque</a></p>\n<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><p><a href=\"https://www.hexiaojiao.top/2019/03/15/pythonset/\" title=\"python set\">python set</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"列表-List\"><a href=\"#列表-List\" class=\"headerlink\" title=\"列表(List)\"></a>列表(List)</h1><p><a href=\"https://www.hexiaojiao.top/2019/03/15/pythonlist/\" title=\"python list\">python list</a></p>\n<h1 id=\"deque双向队列\"><a href=\"#deque双向队列\" class=\"headerlink\" title=\"deque双向队列\"></a>deque双向队列</h1><p><a href=\"https://www.hexiaojiao.top/2019/03/15/pythondeque/\" title=\"python deque\">python deque</a></p>\n<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><p><a href=\"https://www.hexiaojiao.top/2019/03/15/pythonset/\" title=\"python set\">python set</a></p>\n"},{"title":"python数据结构之双向队列","date":"2019-03-15T01:47:00.000Z","_content":"**介绍**\n两端都可以操作的序列\n**基本操作**\n创建：\nimport collections\nd = collections.deque()\n往右边添加一个元素：\nd.append(1)\nd.append('adc')\n往左添加一个元素：\nd.appendleft(3)\n清空队列：\nd.clear\n浅拷贝：\nd1 = d.copy()\n返回指定元素的出现次数：\nd.count(1)\n从队列右边扩展一个列表的元素：\nd.extend([3,4,5])\n从队列左边扩展一个列表的元素：\nd.extendleft([3,4,5])\n查找某个元素的索引位置：\nd.index(\"c\", 0, 2) //指定查找区间\n在指定位置插入元素：\nd.insert(2,\"z\")\n删除最右边一个元素（返回删除的元素）\nd.pop()\n删除最左边一个元素（返回删除的元素）\nd.popleft()\n删除指定元素\nd.remove(\"c\")\n队列翻转\nd.reverse()\n把右边元素放左边\nd.rotate(2) (每个元素向右移动n个，右边元素往左进)\n\n\nfeature/20190315_auto_reconcile_log\nhttp://finance.administration.dev5.tff.com/reconciliation/download?platform=%E9%A9%AC%E8%9C%82%E7%AA%9D&per_page=683&page=1\n","source":"_posts/pythondeque.md","raw":"---\ntitle: python数据结构之双向队列\ndate: 2019-03-15 09:47:00\ncategories: \n- 服务端语言\n- python\n---\n**介绍**\n两端都可以操作的序列\n**基本操作**\n创建：\nimport collections\nd = collections.deque()\n往右边添加一个元素：\nd.append(1)\nd.append('adc')\n往左添加一个元素：\nd.appendleft(3)\n清空队列：\nd.clear\n浅拷贝：\nd1 = d.copy()\n返回指定元素的出现次数：\nd.count(1)\n从队列右边扩展一个列表的元素：\nd.extend([3,4,5])\n从队列左边扩展一个列表的元素：\nd.extendleft([3,4,5])\n查找某个元素的索引位置：\nd.index(\"c\", 0, 2) //指定查找区间\n在指定位置插入元素：\nd.insert(2,\"z\")\n删除最右边一个元素（返回删除的元素）\nd.pop()\n删除最左边一个元素（返回删除的元素）\nd.popleft()\n删除指定元素\nd.remove(\"c\")\n队列翻转\nd.reverse()\n把右边元素放左边\nd.rotate(2) (每个元素向右移动n个，右边元素往左进)\n\n\nfeature/20190315_auto_reconcile_log\nhttp://finance.administration.dev5.tff.com/reconciliation/download?platform=%E9%A9%AC%E8%9C%82%E7%AA%9D&per_page=683&page=1\n","slug":"pythondeque","published":1,"updated":"2021-07-23T01:58:27.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ked004kl0xocgj72eup","content":"<p><strong>介绍</strong><br>两端都可以操作的序列<br><strong>基本操作</strong><br>创建：<br>import collections<br>d = collections.deque()<br>往右边添加一个元素：<br>d.append(1)<br>d.append(‘adc’)<br>往左添加一个元素：<br>d.appendleft(3)<br>清空队列：<br>d.clear<br>浅拷贝：<br>d1 = d.copy()<br>返回指定元素的出现次数：<br>d.count(1)<br>从队列右边扩展一个列表的元素：<br>d.extend([3,4,5])<br>从队列左边扩展一个列表的元素：<br>d.extendleft([3,4,5])<br>查找某个元素的索引位置：<br>d.index(“c”, 0, 2) //指定查找区间<br>在指定位置插入元素：<br>d.insert(2,”z”)<br>删除最右边一个元素（返回删除的元素）<br>d.pop()<br>删除最左边一个元素（返回删除的元素）<br>d.popleft()<br>删除指定元素<br>d.remove(“c”)<br>队列翻转<br>d.reverse()<br>把右边元素放左边<br>d.rotate(2) (每个元素向右移动n个，右边元素往左进)</p>\n<p>feature/20190315_auto_reconcile_log<br><a href=\"http://finance.administration.dev5.tff.com/reconciliation/download?platform=%E9%A9%AC%E8%9C%82%E7%AA%9D&amp;per_page=683&amp;page=1\" target=\"_blank\" rel=\"noopener\">http://finance.administration.dev5.tff.com/reconciliation/download?platform=%E9%A9%AC%E8%9C%82%E7%AA%9D&amp;per_page=683&amp;page=1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>介绍</strong><br>两端都可以操作的序列<br><strong>基本操作</strong><br>创建：<br>import collections<br>d = collections.deque()<br>往右边添加一个元素：<br>d.append(1)<br>d.append(‘adc’)<br>往左添加一个元素：<br>d.appendleft(3)<br>清空队列：<br>d.clear<br>浅拷贝：<br>d1 = d.copy()<br>返回指定元素的出现次数：<br>d.count(1)<br>从队列右边扩展一个列表的元素：<br>d.extend([3,4,5])<br>从队列左边扩展一个列表的元素：<br>d.extendleft([3,4,5])<br>查找某个元素的索引位置：<br>d.index(“c”, 0, 2) //指定查找区间<br>在指定位置插入元素：<br>d.insert(2,”z”)<br>删除最右边一个元素（返回删除的元素）<br>d.pop()<br>删除最左边一个元素（返回删除的元素）<br>d.popleft()<br>删除指定元素<br>d.remove(“c”)<br>队列翻转<br>d.reverse()<br>把右边元素放左边<br>d.rotate(2) (每个元素向右移动n个，右边元素往左进)</p>\n<p>feature/20190315_auto_reconcile_log<br><a href=\"http://finance.administration.dev5.tff.com/reconciliation/download?platform=%E9%A9%AC%E8%9C%82%E7%AA%9D&amp;per_page=683&amp;page=1\" target=\"_blank\" rel=\"noopener\">http://finance.administration.dev5.tff.com/reconciliation/download?platform=%E9%A9%AC%E8%9C%82%E7%AA%9D&amp;per_page=683&amp;page=1</a></p>\n"},{"title":"补充python基础知识","date":"2019-03-14T07:26:10.000Z","_content":"##python运算符\n**幂**\n返回x的y次幂 10**20\n**取整除**\n//:返回商的整数部分，向下取整\n","source":"_posts/python_base.md","raw":"---\ntitle: 补充python基础知识\ndate: 2019-03-14 15:26:10\ncategories: \n- 服务端语言\n- python\n---\n##python运算符\n**幂**\n返回x的y次幂 10**20\n**取整除**\n//:返回商的整数部分，向下取整\n","slug":"python_base","published":1,"updated":"2021-07-23T01:58:27.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kee004nl0xo2guw6hgy","content":"<p>##python运算符<br><strong>幂</strong><br>返回x的y次幂 10<strong>20<br>**取整除</strong><br>//:返回商的整数部分，向下取整</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##python运算符<br><strong>幂</strong><br>返回x的y次幂 10<strong>20<br>**取整除</strong><br>//:返回商的整数部分，向下取整</p>\n"},{"title":"python debugger","date":"2019-03-14T03:48:10.000Z","_content":"##准备\n**来源**\nhttp://python.jobbole.com/81184/\n**初始代码**\n```\nimport sys\ndef add(num1=0, num2=0):\n    return int(num1) + int(num2)\ndef sub(num1=0, num2=0):\n    return int(num1) - int(num2)\ndef main():\n    #Assuming our inputs are valid numbers\n    print sys.argv\n    addition = add(sys.argv[1], sys.argv[2])\n    print addition\n    subtraction = sub(sys.argv[1], sys.argv[2])\n    print subtraction\nif __name__ == '__main__':\n    main()\n```\n## 基础用法\n```\nimport pdb\npdb.set_trace() //设置断点\n```\n在程序中添加断点\n```\nimport pdb\nimport sys\ndef add(num1=0, num2=0):\n    return int(num1) + int(num2)\ndef sub(num1=0, num2=0):\n    return int(num1) - int(num2)\ndef main():\n    #Assuming our inputs are valid numbers\n    print sys.argv\n    pdb.set_trace() # <-- Break point added here\n    addition = add(sys.argv[1], sys.argv[2])\n    print addition\n    subtraction = sub(sys.argv[1], sys.argv[2])\n    print subtraction\nif __name__ == '__main__':\n    main()\n```\n## 触发调试器\n程序会自动在断点处停止执行\n**下一行n**\n输入n运行到下一行\n**打印p**\n可以使用c使pdb跳到末尾或者直到下一个断点\n如果想知道sys.argv包含的内容，可以输入p sys.argv\n使用这种方法可以方便地查看变量中实际储存着什么值\n**单步s**\n可以使用s进入函数内部\nr返回到进入函数的返回语句\n**动态添加断点b**\nb 18:代表在18行设置一个断点\n**列表l**\nl可以显示出此刻在代码中的位置\n**结束**\nq\n**w**\nw:显示当前正在执行的代码行的上下文信息\n**a**\n打印当前函数的参数列表\n","source":"_posts/python_debugger.md","raw":"---\ntitle: python debugger\ndate: 2019-03-14 11:48:10\ncategories: \n- 服务端语言\n- python\n---\n##准备\n**来源**\nhttp://python.jobbole.com/81184/\n**初始代码**\n```\nimport sys\ndef add(num1=0, num2=0):\n    return int(num1) + int(num2)\ndef sub(num1=0, num2=0):\n    return int(num1) - int(num2)\ndef main():\n    #Assuming our inputs are valid numbers\n    print sys.argv\n    addition = add(sys.argv[1], sys.argv[2])\n    print addition\n    subtraction = sub(sys.argv[1], sys.argv[2])\n    print subtraction\nif __name__ == '__main__':\n    main()\n```\n## 基础用法\n```\nimport pdb\npdb.set_trace() //设置断点\n```\n在程序中添加断点\n```\nimport pdb\nimport sys\ndef add(num1=0, num2=0):\n    return int(num1) + int(num2)\ndef sub(num1=0, num2=0):\n    return int(num1) - int(num2)\ndef main():\n    #Assuming our inputs are valid numbers\n    print sys.argv\n    pdb.set_trace() # <-- Break point added here\n    addition = add(sys.argv[1], sys.argv[2])\n    print addition\n    subtraction = sub(sys.argv[1], sys.argv[2])\n    print subtraction\nif __name__ == '__main__':\n    main()\n```\n## 触发调试器\n程序会自动在断点处停止执行\n**下一行n**\n输入n运行到下一行\n**打印p**\n可以使用c使pdb跳到末尾或者直到下一个断点\n如果想知道sys.argv包含的内容，可以输入p sys.argv\n使用这种方法可以方便地查看变量中实际储存着什么值\n**单步s**\n可以使用s进入函数内部\nr返回到进入函数的返回语句\n**动态添加断点b**\nb 18:代表在18行设置一个断点\n**列表l**\nl可以显示出此刻在代码中的位置\n**结束**\nq\n**w**\nw:显示当前正在执行的代码行的上下文信息\n**a**\n打印当前函数的参数列表\n","slug":"python_debugger","published":1,"updated":"2021-07-23T01:58:27.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kef004pl0xob3g2bj9n","content":"<p>##准备<br><strong>来源</strong><br><a href=\"http://python.jobbole.com/81184/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/81184/</a><br><strong>初始代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">def add(num1&#x3D;0, num2&#x3D;0):</span><br><span class=\"line\">    return int(num1) + int(num2)</span><br><span class=\"line\">def sub(num1&#x3D;0, num2&#x3D;0):</span><br><span class=\"line\">    return int(num1) - int(num2)</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #Assuming our inputs are valid numbers</span><br><span class=\"line\">    print sys.argv</span><br><span class=\"line\">    addition &#x3D; add(sys.argv[1], sys.argv[2])</span><br><span class=\"line\">    print addition</span><br><span class=\"line\">    subtraction &#x3D; sub(sys.argv[1], sys.argv[2])</span><br><span class=\"line\">    print subtraction</span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pdb</span><br><span class=\"line\">pdb.set_trace() &#x2F;&#x2F;设置断点</span><br></pre></td></tr></table></figure>\n<p>在程序中添加断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pdb</span><br><span class=\"line\">import sys</span><br><span class=\"line\">def add(num1&#x3D;0, num2&#x3D;0):</span><br><span class=\"line\">    return int(num1) + int(num2)</span><br><span class=\"line\">def sub(num1&#x3D;0, num2&#x3D;0):</span><br><span class=\"line\">    return int(num1) - int(num2)</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #Assuming our inputs are valid numbers</span><br><span class=\"line\">    print sys.argv</span><br><span class=\"line\">    pdb.set_trace() # &lt;-- Break point added here</span><br><span class=\"line\">    addition &#x3D; add(sys.argv[1], sys.argv[2])</span><br><span class=\"line\">    print addition</span><br><span class=\"line\">    subtraction &#x3D; sub(sys.argv[1], sys.argv[2])</span><br><span class=\"line\">    print subtraction</span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"触发调试器\"><a href=\"#触发调试器\" class=\"headerlink\" title=\"触发调试器\"></a>触发调试器</h2><p>程序会自动在断点处停止执行<br><strong>下一行n</strong><br>输入n运行到下一行<br><strong>打印p</strong><br>可以使用c使pdb跳到末尾或者直到下一个断点<br>如果想知道sys.argv包含的内容，可以输入p sys.argv<br>使用这种方法可以方便地查看变量中实际储存着什么值<br><strong>单步s</strong><br>可以使用s进入函数内部<br>r返回到进入函数的返回语句<br><strong>动态添加断点b</strong><br>b 18:代表在18行设置一个断点<br><strong>列表l</strong><br>l可以显示出此刻在代码中的位置<br><strong>结束</strong><br>q<br><strong>w</strong><br>w:显示当前正在执行的代码行的上下文信息<br><strong>a</strong><br>打印当前函数的参数列表</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##准备<br><strong>来源</strong><br><a href=\"http://python.jobbole.com/81184/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/81184/</a><br><strong>初始代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">def add(num1&#x3D;0, num2&#x3D;0):</span><br><span class=\"line\">    return int(num1) + int(num2)</span><br><span class=\"line\">def sub(num1&#x3D;0, num2&#x3D;0):</span><br><span class=\"line\">    return int(num1) - int(num2)</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #Assuming our inputs are valid numbers</span><br><span class=\"line\">    print sys.argv</span><br><span class=\"line\">    addition &#x3D; add(sys.argv[1], sys.argv[2])</span><br><span class=\"line\">    print addition</span><br><span class=\"line\">    subtraction &#x3D; sub(sys.argv[1], sys.argv[2])</span><br><span class=\"line\">    print subtraction</span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pdb</span><br><span class=\"line\">pdb.set_trace() &#x2F;&#x2F;设置断点</span><br></pre></td></tr></table></figure>\n<p>在程序中添加断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pdb</span><br><span class=\"line\">import sys</span><br><span class=\"line\">def add(num1&#x3D;0, num2&#x3D;0):</span><br><span class=\"line\">    return int(num1) + int(num2)</span><br><span class=\"line\">def sub(num1&#x3D;0, num2&#x3D;0):</span><br><span class=\"line\">    return int(num1) - int(num2)</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #Assuming our inputs are valid numbers</span><br><span class=\"line\">    print sys.argv</span><br><span class=\"line\">    pdb.set_trace() # &lt;-- Break point added here</span><br><span class=\"line\">    addition &#x3D; add(sys.argv[1], sys.argv[2])</span><br><span class=\"line\">    print addition</span><br><span class=\"line\">    subtraction &#x3D; sub(sys.argv[1], sys.argv[2])</span><br><span class=\"line\">    print subtraction</span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"触发调试器\"><a href=\"#触发调试器\" class=\"headerlink\" title=\"触发调试器\"></a>触发调试器</h2><p>程序会自动在断点处停止执行<br><strong>下一行n</strong><br>输入n运行到下一行<br><strong>打印p</strong><br>可以使用c使pdb跳到末尾或者直到下一个断点<br>如果想知道sys.argv包含的内容，可以输入p sys.argv<br>使用这种方法可以方便地查看变量中实际储存着什么值<br><strong>单步s</strong><br>可以使用s进入函数内部<br>r返回到进入函数的返回语句<br><strong>动态添加断点b</strong><br>b 18:代表在18行设置一个断点<br><strong>列表l</strong><br>l可以显示出此刻在代码中的位置<br><strong>结束</strong><br>q<br><strong>w</strong><br>w:显示当前正在执行的代码行的上下文信息<br><strong>a</strong><br>打印当前函数的参数列表</p>\n"},{"title":"python数据结构之集合","date":"2019-03-15T05:52:00.000Z","_content":"**介绍**\n集合是一个无序的不重复的元素序列\n**操作**\n创建集合：\n{}或set()，创建一个空集合必须用set()，{}创建空字典(set(\"asdgf\")会创建['a', 's', 'd', 'g', 'f'],set()创建多个元素需要两个())\nparame = {value01,value02,...}或set(value)\n添加元素：\ns.add(x)\ns.update(x)    ->  参数可以是列表，元组，字典等，x可以有多个，用逗号分开\n```\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.update({1,3})\nprint(thisset)\n{1, 3, 'Google', 'Taobao', 'Runoob'}\nthisset.update([1,4],[5,6])  \nprint(thisset)\n{1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}\n```\n移除元素：\ns.remove(x)   将元素x从集合x移除，如果元素不存在则会发生错误\ns.discard(x)  将元素x从集合x移除，如果元素不存在不会发生错误\n计算集合元素个数：\nlen(s)\n```\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nlen(thisset)\n```\n返回3\n清空集合：\ns.clear()\n判断元素x是否在集合s中：\nx in s\n**内置方法**\n\n| 方法 | 描述 | \n| --- | --- |\n| add() | 为集合添加元素 |\n| clear() | 移除集合中的所有元素 |\n| copy() | 拷贝一个集合 |\n| difference() | 返回多个集合的差集 |\n| difference_update() | 移除集合中的元素，该元素在指定的集合也存在 |\n| discard() | 删除集合中指定的元素 |\n| intersection() | 返回集合的交集 |\n| intersection_update() | 删除集合中的元素，该元素在指定的集合中不存在 |\n| isdisjoint() | 判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False |\n| issubset() | 判断指定集合是否为该方法参数集合的子集 |\n| issuperset() | 判断该方法的参数集合是否为指定集合的子集 |\n| pop() | 随机移除元素 |\n| remove() | 移除指定元素 |\n| symmetric_difference() | 返回两个集合中不重复的元素集合 |\n| symmetric_difference_update() | 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中 |\n| union() | 返回两个集合的并集 |\n| update() | 给集合添加元素 |\n","source":"_posts/pythonset.md","raw":"---\ntitle: python数据结构之集合\ndate: 2019-03-15 13:52:00\ncategories: \n- 服务端语言\n- python\n---\n**介绍**\n集合是一个无序的不重复的元素序列\n**操作**\n创建集合：\n{}或set()，创建一个空集合必须用set()，{}创建空字典(set(\"asdgf\")会创建['a', 's', 'd', 'g', 'f'],set()创建多个元素需要两个())\nparame = {value01,value02,...}或set(value)\n添加元素：\ns.add(x)\ns.update(x)    ->  参数可以是列表，元组，字典等，x可以有多个，用逗号分开\n```\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nthisset.update({1,3})\nprint(thisset)\n{1, 3, 'Google', 'Taobao', 'Runoob'}\nthisset.update([1,4],[5,6])  \nprint(thisset)\n{1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}\n```\n移除元素：\ns.remove(x)   将元素x从集合x移除，如果元素不存在则会发生错误\ns.discard(x)  将元素x从集合x移除，如果元素不存在不会发生错误\n计算集合元素个数：\nlen(s)\n```\nthisset = set((\"Google\", \"Runoob\", \"Taobao\"))\nlen(thisset)\n```\n返回3\n清空集合：\ns.clear()\n判断元素x是否在集合s中：\nx in s\n**内置方法**\n\n| 方法 | 描述 | \n| --- | --- |\n| add() | 为集合添加元素 |\n| clear() | 移除集合中的所有元素 |\n| copy() | 拷贝一个集合 |\n| difference() | 返回多个集合的差集 |\n| difference_update() | 移除集合中的元素，该元素在指定的集合也存在 |\n| discard() | 删除集合中指定的元素 |\n| intersection() | 返回集合的交集 |\n| intersection_update() | 删除集合中的元素，该元素在指定的集合中不存在 |\n| isdisjoint() | 判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False |\n| issubset() | 判断指定集合是否为该方法参数集合的子集 |\n| issuperset() | 判断该方法的参数集合是否为指定集合的子集 |\n| pop() | 随机移除元素 |\n| remove() | 移除指定元素 |\n| symmetric_difference() | 返回两个集合中不重复的元素集合 |\n| symmetric_difference_update() | 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中 |\n| union() | 返回两个集合的并集 |\n| update() | 给集合添加元素 |\n","slug":"pythonset","published":1,"updated":"2021-07-23T01:58:27.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4keg004sl0xo9uzacpye","content":"<p><strong>介绍</strong><br>集合是一个无序的不重复的元素序列<br><strong>操作</strong><br>创建集合：<br>{}或set()，创建一个空集合必须用set()，{}创建空字典(set(“asdgf”)会创建[‘a’, ‘s’, ‘d’, ‘g’, ‘f’],set()创建多个元素需要两个())<br>parame = {value01,value02,…}或set(value)<br>添加元素：<br>s.add(x)<br>s.update(x)    -&gt;  参数可以是列表，元组，字典等，x可以有多个，用逗号分开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thisset &#x3D; set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))</span><br><span class=\"line\">thisset.update(&#123;1,3&#125;)</span><br><span class=\"line\">print(thisset)</span><br><span class=\"line\">&#123;1, 3, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;</span><br><span class=\"line\">thisset.update([1,4],[5,6])  </span><br><span class=\"line\">print(thisset)</span><br><span class=\"line\">&#123;1, 3, 4, 5, 6, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;</span><br></pre></td></tr></table></figure>\n<p>移除元素：<br>s.remove(x)   将元素x从集合x移除，如果元素不存在则会发生错误<br>s.discard(x)  将元素x从集合x移除，如果元素不存在不会发生错误<br>计算集合元素个数：<br>len(s)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thisset &#x3D; set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))</span><br><span class=\"line\">len(thisset)</span><br></pre></td></tr></table></figure>\n<p>返回3<br>清空集合：<br>s.clear()<br>判断元素x是否在集合s中：<br>x in s<br><strong>内置方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>add()</td>\n<td>为集合添加元素</td>\n</tr>\n<tr>\n<td>clear()</td>\n<td>移除集合中的所有元素</td>\n</tr>\n<tr>\n<td>copy()</td>\n<td>拷贝一个集合</td>\n</tr>\n<tr>\n<td>difference()</td>\n<td>返回多个集合的差集</td>\n</tr>\n<tr>\n<td>difference_update()</td>\n<td>移除集合中的元素，该元素在指定的集合也存在</td>\n</tr>\n<tr>\n<td>discard()</td>\n<td>删除集合中指定的元素</td>\n</tr>\n<tr>\n<td>intersection()</td>\n<td>返回集合的交集</td>\n</tr>\n<tr>\n<td>intersection_update()</td>\n<td>删除集合中的元素，该元素在指定的集合中不存在</td>\n</tr>\n<tr>\n<td>isdisjoint()</td>\n<td>判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td>issubset()</td>\n<td>判断指定集合是否为该方法参数集合的子集</td>\n</tr>\n<tr>\n<td>issuperset()</td>\n<td>判断该方法的参数集合是否为指定集合的子集</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>随机移除元素</td>\n</tr>\n<tr>\n<td>remove()</td>\n<td>移除指定元素</td>\n</tr>\n<tr>\n<td>symmetric_difference()</td>\n<td>返回两个集合中不重复的元素集合</td>\n</tr>\n<tr>\n<td>symmetric_difference_update()</td>\n<td>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中</td>\n</tr>\n<tr>\n<td>union()</td>\n<td>返回两个集合的并集</td>\n</tr>\n<tr>\n<td>update()</td>\n<td>给集合添加元素</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>介绍</strong><br>集合是一个无序的不重复的元素序列<br><strong>操作</strong><br>创建集合：<br>{}或set()，创建一个空集合必须用set()，{}创建空字典(set(“asdgf”)会创建[‘a’, ‘s’, ‘d’, ‘g’, ‘f’],set()创建多个元素需要两个())<br>parame = {value01,value02,…}或set(value)<br>添加元素：<br>s.add(x)<br>s.update(x)    -&gt;  参数可以是列表，元组，字典等，x可以有多个，用逗号分开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thisset &#x3D; set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))</span><br><span class=\"line\">thisset.update(&#123;1,3&#125;)</span><br><span class=\"line\">print(thisset)</span><br><span class=\"line\">&#123;1, 3, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;</span><br><span class=\"line\">thisset.update([1,4],[5,6])  </span><br><span class=\"line\">print(thisset)</span><br><span class=\"line\">&#123;1, 3, 4, 5, 6, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;&#125;</span><br></pre></td></tr></table></figure>\n<p>移除元素：<br>s.remove(x)   将元素x从集合x移除，如果元素不存在则会发生错误<br>s.discard(x)  将元素x从集合x移除，如果元素不存在不会发生错误<br>计算集合元素个数：<br>len(s)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thisset &#x3D; set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))</span><br><span class=\"line\">len(thisset)</span><br></pre></td></tr></table></figure>\n<p>返回3<br>清空集合：<br>s.clear()<br>判断元素x是否在集合s中：<br>x in s<br><strong>内置方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>add()</td>\n<td>为集合添加元素</td>\n</tr>\n<tr>\n<td>clear()</td>\n<td>移除集合中的所有元素</td>\n</tr>\n<tr>\n<td>copy()</td>\n<td>拷贝一个集合</td>\n</tr>\n<tr>\n<td>difference()</td>\n<td>返回多个集合的差集</td>\n</tr>\n<tr>\n<td>difference_update()</td>\n<td>移除集合中的元素，该元素在指定的集合也存在</td>\n</tr>\n<tr>\n<td>discard()</td>\n<td>删除集合中指定的元素</td>\n</tr>\n<tr>\n<td>intersection()</td>\n<td>返回集合的交集</td>\n</tr>\n<tr>\n<td>intersection_update()</td>\n<td>删除集合中的元素，该元素在指定的集合中不存在</td>\n</tr>\n<tr>\n<td>isdisjoint()</td>\n<td>判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td>issubset()</td>\n<td>判断指定集合是否为该方法参数集合的子集</td>\n</tr>\n<tr>\n<td>issuperset()</td>\n<td>判断该方法的参数集合是否为指定集合的子集</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>随机移除元素</td>\n</tr>\n<tr>\n<td>remove()</td>\n<td>移除指定元素</td>\n</tr>\n<tr>\n<td>symmetric_difference()</td>\n<td>返回两个集合中不重复的元素集合</td>\n</tr>\n<tr>\n<td>symmetric_difference_update()</td>\n<td>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中</td>\n</tr>\n<tr>\n<td>union()</td>\n<td>返回两个集合的并集</td>\n</tr>\n<tr>\n<td>update()</td>\n<td>给集合添加元素</td>\n</tr>\n</tbody></table>\n"},{"title":"react学习-es6基础特性","date":"2019-07-08T01:37:10.000Z","_content":"# react学习手册\n## 新特性\n1 react开发者工具：react developer tools，可以查看网站react元素    \n2 yarn进行依赖管理：yarn.lock文件，可以使用yarn install安装，npm install yarn,yarn add [package-name],yarn remove [package-name]\n#### 变量声明\n1 const:常量，不能被修改，重写会报错；   \n2 let:变量，可以将变量作用域限定在任意代码块中（var不行）    \n3 模板字符串${}，可在字符串中插入变量\n#### 箭头函数\n1 介绍：用户可以不使用function关键字创建函数，通常还不需要return    \n2 箭头函数可以限制this的作用域，箭头函数没有自己的this,引用外层的this;\n#### ES6转译\n1 介绍：浏览器运行前将代码转成符合ES5规范的代码，Bable是当前最流行的转译工具之一\n#### ES6的对象和数组\n1 解构赋值：    \n(1)允许用户将某个对象内的字段的作用域本地化，并且声明哪些值是将要使用的。\n举例：  \n```javascript\n var sandwich =  {\n      bread: \"dutch crunch\",\n      meat: \"tuna\",\n      cheese: \"swiss\",\n      toppings: [\"lettuce\", \"tomato\", \"mustard\"]\n    }\n    var {bread, meat} = sandwich\n    console.log(bread, meat)\n    bread = \"garlic\"\n    meat = \"turkey\"\n    console.log(bread,meat)\n    console.log(sandwich.bread, sandwich.meat)\n\n```\n(2)除了使用点符号访问对象内部属性之外，还可以在对象之外解构需要使用的值。    \n```javascript\nvar regularPerson = {\n    firstname: \"Bill\",\n    lastname: \"Wilson\"\n    };\n    var lordify = ({firstname}) => {\n    \tconsole.log(`${firstname} of regularPerson`);\n    }\n    lordify(regularPerson);\n```\n(3)数组中的值也可以被解构，还可以使用都好进行列表匹配，跳过不需要的值；    \n```javascript\n   var [firstResort] = [\"Kirkwood\", \"Squaw\", \"Alpine\"]\n    console.log(firstResort)\n   var [, , third] = [\"Kirkwood\", \"Squaw\", \"Alpine\"]\n   console.log(third)\n```\n2 对象语义增强    \n可以从全局作用域中获得变量并转化成一个对象。还可以通过对象语义增强或重组构造对象的方法：    \n```javascript\n  let name = 'yaya';\n  let ela = 'test';\n  let func = {name, ela};\n  let test = function() {\n    console.log(`Mmt. ${this.name}  is aa ${this.ela} oo`);\n  }\n  console.log('func', func);\n  let funclike = {name, ela, test};\n  funclike.test();\n```\n定义了对象方法后就不需要使用关键字function了\n```javascript\n// 旧方案\nvar name = \"Léo Taillefer\"\n    var sound = \"Kahh\"\n    var skier = {\n      name: name,\n      sound: sound,\n      powderYell: function() {\n      var yell = this.sound.toUpperCase()\n      console.log(`${yell} ${yell} ${yell}!!!`)\n    },\n      speed: function(mph) {\n        this.speed = mph\n        console.log('speed:', mph)\n      }\n    }\n    skier.powderYell()\n    skier.speed(\"hair on fire\")\n    console.log(JSON.stringify(skier))\n```\n```javascript\n// 新方案\nvar name = \"Julia Mancuso\"\n    var sound = \"go fast\"\n    const skier = {\n      name,\n      sound,\n      powderYell() {\n        let yell = this.sound.toUpperCase()\n        console.log(`${yell} ${yell} ${yell}!!!`)\n      },\n      speed(mph) {\n        this.speed = mph\n        console.log('speed:', mph)\n      }\n    }\n    skier.powderYell()\n    skier.speed(350)\n    console.log(JSON.stringify(skier))\n```\n3 扩展运算符    \n（1）扩展运算符允许联合数组中的内容：\n```javascript\n    var peaks = [\"Tallac\", \"Ralston\", \"Rose\"]\n    var canyons = [\"Ward\", \"Blackwood\"]\n    var tahoe = [...peaks, ...canyons]\n    console.log(tahoe.join(', '))\n```\n（2）可以创建副本，不需要改变数组原生解构\n```\nvar peaks = [\"Tallac\", \"Ralston\", \"Rose\"]\nvar [last] = [...peaks].reverse()\nconsole.log(last);\nconsole.log(peaks.join(', '));\n```\n（3）可以用来获取数组中的其余元素\n```javascript\nvar peaks = [\"Tallac\", \"Ralston\", \"Rose\", \"te11\", \"tes12\"]\nvar [last, ...rest] = peaks;\nconsole.log(last);\nconsole.log(rest.join(', '));\n```\n（4）可以将函数参数收集到一个数组中\n```javascript\nfunction directions(...args) {\n      var [start, ...remaining] = args\n      var [finish, ...stops] = remaining.reverse()\n      console.log(`drive through ${args.length} towns`)\n      console.log(`start in ${start}`)\n      console.log(`the destination is ${finish}`)\n      console.log(`stopping ${stops.length} times in between`)\n    }\n    directions(\"Truckee\", \"Tahoe City\", \"Sunnyside\", \"Homewood\", \"Tahoma\")\n```\n（5）适用于对象\n```javascript\nvar morning = {\n  breakfast: \"oatmeal\",\n  lunch: \"peanut butter and jelly\"\n}\nvar dinner = \"mac and cheese\"\nvar backpackingMeals = {\n  ...morning,\n  dinner\n}\nconsole.log(backpackingMeals)\n```\n#### Promise对象\n1 介绍    \nPromise提供了一种更合理的方式处理异步行为,then函数可以通过链式调用执行某些任务，还可以使用另一个回调函数处理异常\n```javascript\nconst getFakeMembers = count => new Promise((resolves, rejects) => {\n      const api = `https://api.randomuser.me/?nat=US&results=${count}`\n      const request = new XMLHttpRequest()\n      request.open('GET', api)\n      request.onload = () =>\n           (request.status === 200) ?\n            resolves(JSON.parse(request.response).results) :\n            rejects(Error(request.statusText))\n      request.onerror = (err) => rejects(err)\n      request.send()\n    })\n\n    getFakeMembers(5).then(\n      members => console.log(members),\n      err => console.error(\n          new Error(\"cannot load members from randomuser.me\"))\n    )\n```\n#### 类\n1 背景介绍：    \n以前javascript没有类的概念，类型定义通过函数完成，创建一个函数，通过原型在函数对象上定义方法\n```javascript\n    // Constructor and the prototype, the old way\n\n    function Vacation(destination, length) {\n      this.destination = destination\n      this.length = length\n    }\n\n    Vacation.prototype.print = function() {\n      console.log(this.destination + \" will take \" + this.length + \" days\")\n    }\n\n    var maui = new Vacation(\"Maui\", 7)\n\n    maui.print()\n```\n2 新增语法    \n工作机制相同，函数即对象，继承通过原型机制实现    \n```javascript\n    class Vacation {\n\n    constructor(destination, length) {\n      this.destination = destination\n      this.length = length\n    }\n\n    print() {\n      console.log(`${this.destination} will take ${this.length} days.`)\n    }\n\n    }\n\n    const trip = new Vacation(\"Santiago, Chile\", 9)\n\n    trip.print()\n```\n3 类的继承    \n不仅可以直接继承，还可将类当做抽象类，添加新参数\n```typescript\nclass Vacation {\n      constructor(destination, length) {\n        this.destination = destination\n        this.length = length\n      }\n\n      print() {\n        console.log(`${this.destination} will take ${this.length} days.`)\n      }\n\n    }\n\n    class Expedition extends Vacation {\n      constructor(destination, length, gear) {\n        super(destination, length)\n        this.gear = gear\n      }\n\n      print() {\n        super.print()\n        console.log(`bring your ${this.gear.join(\" and your \")}`)\n      }\n    }\n\n    const trip = new Expedition(\n      \"Mt. Whitney\",\n      3,\n      [\"sunglasses\", \"prayer flags\", \"camera\"]\n    )\n\n    trip.print()\n```\n#### ES6模块\n1 介绍    \nES6规范的javascript为模块提供了支持，javascript模块可以存储在独立的文件中，一个文件对应一个模块，\n创建和导出一个模块中的数据有两种方式，用户可以从一个模块中导出一个或多个javascript对象    \n2 export    \n关键字export可以用来导出会在其他模块中用到的任意javascrip类型数据，其他变量将会以局部变量的形式存在。    \n当值导出一个变量或导出的数据值包含一种类型时，用户可以使用export default 替换export    \n3 import     \n与export相对，在其他javascript文件中调用模块：    \n（1）包含多个export语句的模块还可以进行对象解构    \n（2）使用export default的模块还可以被导入到单个变量中：\n```javascript\nimport freel from '/test'\n```\n（3）可以使用别名实现模块变量的本地化\n#### CommonJS\n1 介绍：    \nCommonJs是所有版本的node.js都支持的模块模式。用户可以通过Babel和webpack使用，导出使用module.export;    \nCommonJs不支持imporr语句，使用require进行模块导入\n\n","source":"_posts/react_01.md","raw":"---\ntitle: react学习-es6基础特性\ndate: 2019-07-08 09:37:10\ntags:\ncategories: \n- 前端\n- react\n---\n# react学习手册\n## 新特性\n1 react开发者工具：react developer tools，可以查看网站react元素    \n2 yarn进行依赖管理：yarn.lock文件，可以使用yarn install安装，npm install yarn,yarn add [package-name],yarn remove [package-name]\n#### 变量声明\n1 const:常量，不能被修改，重写会报错；   \n2 let:变量，可以将变量作用域限定在任意代码块中（var不行）    \n3 模板字符串${}，可在字符串中插入变量\n#### 箭头函数\n1 介绍：用户可以不使用function关键字创建函数，通常还不需要return    \n2 箭头函数可以限制this的作用域，箭头函数没有自己的this,引用外层的this;\n#### ES6转译\n1 介绍：浏览器运行前将代码转成符合ES5规范的代码，Bable是当前最流行的转译工具之一\n#### ES6的对象和数组\n1 解构赋值：    \n(1)允许用户将某个对象内的字段的作用域本地化，并且声明哪些值是将要使用的。\n举例：  \n```javascript\n var sandwich =  {\n      bread: \"dutch crunch\",\n      meat: \"tuna\",\n      cheese: \"swiss\",\n      toppings: [\"lettuce\", \"tomato\", \"mustard\"]\n    }\n    var {bread, meat} = sandwich\n    console.log(bread, meat)\n    bread = \"garlic\"\n    meat = \"turkey\"\n    console.log(bread,meat)\n    console.log(sandwich.bread, sandwich.meat)\n\n```\n(2)除了使用点符号访问对象内部属性之外，还可以在对象之外解构需要使用的值。    \n```javascript\nvar regularPerson = {\n    firstname: \"Bill\",\n    lastname: \"Wilson\"\n    };\n    var lordify = ({firstname}) => {\n    \tconsole.log(`${firstname} of regularPerson`);\n    }\n    lordify(regularPerson);\n```\n(3)数组中的值也可以被解构，还可以使用都好进行列表匹配，跳过不需要的值；    \n```javascript\n   var [firstResort] = [\"Kirkwood\", \"Squaw\", \"Alpine\"]\n    console.log(firstResort)\n   var [, , third] = [\"Kirkwood\", \"Squaw\", \"Alpine\"]\n   console.log(third)\n```\n2 对象语义增强    \n可以从全局作用域中获得变量并转化成一个对象。还可以通过对象语义增强或重组构造对象的方法：    \n```javascript\n  let name = 'yaya';\n  let ela = 'test';\n  let func = {name, ela};\n  let test = function() {\n    console.log(`Mmt. ${this.name}  is aa ${this.ela} oo`);\n  }\n  console.log('func', func);\n  let funclike = {name, ela, test};\n  funclike.test();\n```\n定义了对象方法后就不需要使用关键字function了\n```javascript\n// 旧方案\nvar name = \"Léo Taillefer\"\n    var sound = \"Kahh\"\n    var skier = {\n      name: name,\n      sound: sound,\n      powderYell: function() {\n      var yell = this.sound.toUpperCase()\n      console.log(`${yell} ${yell} ${yell}!!!`)\n    },\n      speed: function(mph) {\n        this.speed = mph\n        console.log('speed:', mph)\n      }\n    }\n    skier.powderYell()\n    skier.speed(\"hair on fire\")\n    console.log(JSON.stringify(skier))\n```\n```javascript\n// 新方案\nvar name = \"Julia Mancuso\"\n    var sound = \"go fast\"\n    const skier = {\n      name,\n      sound,\n      powderYell() {\n        let yell = this.sound.toUpperCase()\n        console.log(`${yell} ${yell} ${yell}!!!`)\n      },\n      speed(mph) {\n        this.speed = mph\n        console.log('speed:', mph)\n      }\n    }\n    skier.powderYell()\n    skier.speed(350)\n    console.log(JSON.stringify(skier))\n```\n3 扩展运算符    \n（1）扩展运算符允许联合数组中的内容：\n```javascript\n    var peaks = [\"Tallac\", \"Ralston\", \"Rose\"]\n    var canyons = [\"Ward\", \"Blackwood\"]\n    var tahoe = [...peaks, ...canyons]\n    console.log(tahoe.join(', '))\n```\n（2）可以创建副本，不需要改变数组原生解构\n```\nvar peaks = [\"Tallac\", \"Ralston\", \"Rose\"]\nvar [last] = [...peaks].reverse()\nconsole.log(last);\nconsole.log(peaks.join(', '));\n```\n（3）可以用来获取数组中的其余元素\n```javascript\nvar peaks = [\"Tallac\", \"Ralston\", \"Rose\", \"te11\", \"tes12\"]\nvar [last, ...rest] = peaks;\nconsole.log(last);\nconsole.log(rest.join(', '));\n```\n（4）可以将函数参数收集到一个数组中\n```javascript\nfunction directions(...args) {\n      var [start, ...remaining] = args\n      var [finish, ...stops] = remaining.reverse()\n      console.log(`drive through ${args.length} towns`)\n      console.log(`start in ${start}`)\n      console.log(`the destination is ${finish}`)\n      console.log(`stopping ${stops.length} times in between`)\n    }\n    directions(\"Truckee\", \"Tahoe City\", \"Sunnyside\", \"Homewood\", \"Tahoma\")\n```\n（5）适用于对象\n```javascript\nvar morning = {\n  breakfast: \"oatmeal\",\n  lunch: \"peanut butter and jelly\"\n}\nvar dinner = \"mac and cheese\"\nvar backpackingMeals = {\n  ...morning,\n  dinner\n}\nconsole.log(backpackingMeals)\n```\n#### Promise对象\n1 介绍    \nPromise提供了一种更合理的方式处理异步行为,then函数可以通过链式调用执行某些任务，还可以使用另一个回调函数处理异常\n```javascript\nconst getFakeMembers = count => new Promise((resolves, rejects) => {\n      const api = `https://api.randomuser.me/?nat=US&results=${count}`\n      const request = new XMLHttpRequest()\n      request.open('GET', api)\n      request.onload = () =>\n           (request.status === 200) ?\n            resolves(JSON.parse(request.response).results) :\n            rejects(Error(request.statusText))\n      request.onerror = (err) => rejects(err)\n      request.send()\n    })\n\n    getFakeMembers(5).then(\n      members => console.log(members),\n      err => console.error(\n          new Error(\"cannot load members from randomuser.me\"))\n    )\n```\n#### 类\n1 背景介绍：    \n以前javascript没有类的概念，类型定义通过函数完成，创建一个函数，通过原型在函数对象上定义方法\n```javascript\n    // Constructor and the prototype, the old way\n\n    function Vacation(destination, length) {\n      this.destination = destination\n      this.length = length\n    }\n\n    Vacation.prototype.print = function() {\n      console.log(this.destination + \" will take \" + this.length + \" days\")\n    }\n\n    var maui = new Vacation(\"Maui\", 7)\n\n    maui.print()\n```\n2 新增语法    \n工作机制相同，函数即对象，继承通过原型机制实现    \n```javascript\n    class Vacation {\n\n    constructor(destination, length) {\n      this.destination = destination\n      this.length = length\n    }\n\n    print() {\n      console.log(`${this.destination} will take ${this.length} days.`)\n    }\n\n    }\n\n    const trip = new Vacation(\"Santiago, Chile\", 9)\n\n    trip.print()\n```\n3 类的继承    \n不仅可以直接继承，还可将类当做抽象类，添加新参数\n```typescript\nclass Vacation {\n      constructor(destination, length) {\n        this.destination = destination\n        this.length = length\n      }\n\n      print() {\n        console.log(`${this.destination} will take ${this.length} days.`)\n      }\n\n    }\n\n    class Expedition extends Vacation {\n      constructor(destination, length, gear) {\n        super(destination, length)\n        this.gear = gear\n      }\n\n      print() {\n        super.print()\n        console.log(`bring your ${this.gear.join(\" and your \")}`)\n      }\n    }\n\n    const trip = new Expedition(\n      \"Mt. Whitney\",\n      3,\n      [\"sunglasses\", \"prayer flags\", \"camera\"]\n    )\n\n    trip.print()\n```\n#### ES6模块\n1 介绍    \nES6规范的javascript为模块提供了支持，javascript模块可以存储在独立的文件中，一个文件对应一个模块，\n创建和导出一个模块中的数据有两种方式，用户可以从一个模块中导出一个或多个javascript对象    \n2 export    \n关键字export可以用来导出会在其他模块中用到的任意javascrip类型数据，其他变量将会以局部变量的形式存在。    \n当值导出一个变量或导出的数据值包含一种类型时，用户可以使用export default 替换export    \n3 import     \n与export相对，在其他javascript文件中调用模块：    \n（1）包含多个export语句的模块还可以进行对象解构    \n（2）使用export default的模块还可以被导入到单个变量中：\n```javascript\nimport freel from '/test'\n```\n（3）可以使用别名实现模块变量的本地化\n#### CommonJS\n1 介绍：    \nCommonJs是所有版本的node.js都支持的模块模式。用户可以通过Babel和webpack使用，导出使用module.export;    \nCommonJs不支持imporr语句，使用require进行模块导入\n\n","slug":"react_01","published":1,"updated":"2021-07-23T01:58:27.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kei004ul0xo9r9b5sc9","content":"<h1 id=\"react学习手册\"><a href=\"#react学习手册\" class=\"headerlink\" title=\"react学习手册\"></a>react学习手册</h1><h2 id=\"新特性\"><a href=\"#新特性\" class=\"headerlink\" title=\"新特性\"></a>新特性</h2><p>1 react开发者工具：react developer tools，可以查看网站react元素<br>2 yarn进行依赖管理：yarn.lock文件，可以使用yarn install安装，npm install yarn,yarn add [package-name],yarn remove [package-name]</p>\n<h4 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h4><p>1 const:常量，不能被修改，重写会报错；<br>2 let:变量，可以将变量作用域限定在任意代码块中（var不行）<br>3 模板字符串${}，可在字符串中插入变量</p>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>1 介绍：用户可以不使用function关键字创建函数，通常还不需要return<br>2 箭头函数可以限制this的作用域，箭头函数没有自己的this,引用外层的this;</p>\n<h4 id=\"ES6转译\"><a href=\"#ES6转译\" class=\"headerlink\" title=\"ES6转译\"></a>ES6转译</h4><p>1 介绍：浏览器运行前将代码转成符合ES5规范的代码，Bable是当前最流行的转译工具之一</p>\n<h4 id=\"ES6的对象和数组\"><a href=\"#ES6的对象和数组\" class=\"headerlink\" title=\"ES6的对象和数组\"></a>ES6的对象和数组</h4><p>1 解构赋值：<br>(1)允许用户将某个对象内的字段的作用域本地化，并且声明哪些值是将要使用的。<br>举例：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sandwich =  &#123;</span><br><span class=\"line\">     bread: <span class=\"string\">\"dutch crunch\"</span>,</span><br><span class=\"line\">     meat: <span class=\"string\">\"tuna\"</span>,</span><br><span class=\"line\">     cheese: <span class=\"string\">\"swiss\"</span>,</span><br><span class=\"line\">     toppings: [<span class=\"string\">\"lettuce\"</span>, <span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"mustard\"</span>]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> &#123;bread, meat&#125; = sandwich</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(bread, meat)</span><br><span class=\"line\">   bread = <span class=\"string\">\"garlic\"</span></span><br><span class=\"line\">   meat = <span class=\"string\">\"turkey\"</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(bread,meat)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(sandwich.bread, sandwich.meat)</span><br></pre></td></tr></table></figure>\n<p>(2)除了使用点符号访问对象内部属性之外，还可以在对象之外解构需要使用的值。    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regularPerson = &#123;</span><br><span class=\"line\">    firstname: <span class=\"string\">\"Bill\"</span>,</span><br><span class=\"line\">    lastname: <span class=\"string\">\"Wilson\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lordify = <span class=\"function\">(<span class=\"params\">&#123;firstname&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstname&#125;</span> of regularPerson`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lordify(regularPerson);</span><br></pre></td></tr></table></figure>\n<p>(3)数组中的值也可以被解构，还可以使用都好进行列表匹配，跳过不需要的值；    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [firstResort] = [<span class=\"string\">\"Kirkwood\"</span>, <span class=\"string\">\"Squaw\"</span>, <span class=\"string\">\"Alpine\"</span>]</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(firstResort)</span><br><span class=\"line\"><span class=\"keyword\">var</span> [, , third] = [<span class=\"string\">\"Kirkwood\"</span>, <span class=\"string\">\"Squaw\"</span>, <span class=\"string\">\"Alpine\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(third)</span><br></pre></td></tr></table></figure>\n<p>2 对象语义增强<br>可以从全局作用域中获得变量并转化成一个对象。还可以通过对象语义增强或重组构造对象的方法：    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'yaya'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ela = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> func = &#123;name, ela&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Mmt. <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>  is aa <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.ela&#125;</span> oo`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'func'</span>, func);</span><br><span class=\"line\"><span class=\"keyword\">let</span> funclike = &#123;name, ela, test&#125;;</span><br><span class=\"line\">funclike.test();</span><br></pre></td></tr></table></figure>\n<p>定义了对象方法后就不需要使用关键字function了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 旧方案</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Léo Taillefer\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sound = <span class=\"string\">\"Kahh\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> skier = &#123;</span><br><span class=\"line\">      name: name,</span><br><span class=\"line\">      sound: sound,</span><br><span class=\"line\">      powderYell: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> yell = <span class=\"keyword\">this</span>.sound.toUpperCase()</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;yell&#125;</span> <span class=\"subst\">$&#123;yell&#125;</span> <span class=\"subst\">$&#123;yell&#125;</span>!!!`</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">      speed: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mph</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.speed = mph</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'speed:'</span>, mph)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    skier.powderYell()</span><br><span class=\"line\">    skier.speed(<span class=\"string\">\"hair on fire\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(skier))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新方案</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Julia Mancuso\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sound = <span class=\"string\">\"go fast\"</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> skier = &#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">      sound,</span><br><span class=\"line\">      powderYell() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> yell = <span class=\"keyword\">this</span>.sound.toUpperCase()</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;yell&#125;</span> <span class=\"subst\">$&#123;yell&#125;</span> <span class=\"subst\">$&#123;yell&#125;</span>!!!`</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      speed(mph) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.speed = mph</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'speed:'</span>, mph)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    skier.powderYell()</span><br><span class=\"line\">    skier.speed(<span class=\"number\">350</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(skier))</span><br></pre></td></tr></table></figure>\n<p>3 扩展运算符<br>（1）扩展运算符允许联合数组中的内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> peaks = [<span class=\"string\">\"Tallac\"</span>, <span class=\"string\">\"Ralston\"</span>, <span class=\"string\">\"Rose\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> canyons = [<span class=\"string\">\"Ward\"</span>, <span class=\"string\">\"Blackwood\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> tahoe = [...peaks, ...canyons]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tahoe.join(<span class=\"string\">', '</span>))</span><br></pre></td></tr></table></figure>\n<p>（2）可以创建副本，不需要改变数组原生解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var peaks &#x3D; [&quot;Tallac&quot;, &quot;Ralston&quot;, &quot;Rose&quot;]</span><br><span class=\"line\">var [last] &#x3D; [...peaks].reverse()</span><br><span class=\"line\">console.log(last);</span><br><span class=\"line\">console.log(peaks.join(&#39;, &#39;));</span><br></pre></td></tr></table></figure>\n<p>（3）可以用来获取数组中的其余元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> peaks = [<span class=\"string\">\"Tallac\"</span>, <span class=\"string\">\"Ralston\"</span>, <span class=\"string\">\"Rose\"</span>, <span class=\"string\">\"te11\"</span>, <span class=\"string\">\"tes12\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> [last, ...rest] = peaks;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(last);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rest.join(<span class=\"string\">', '</span>));</span><br></pre></td></tr></table></figure>\n<p>（4）可以将函数参数收集到一个数组中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">directions</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> [start, ...remaining] = args</span><br><span class=\"line\">      <span class=\"keyword\">var</span> [finish, ...stops] = remaining.reverse()</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`drive through <span class=\"subst\">$&#123;args.length&#125;</span> towns`</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`start in <span class=\"subst\">$&#123;start&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`the destination is <span class=\"subst\">$&#123;finish&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`stopping <span class=\"subst\">$&#123;stops.length&#125;</span> times in between`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    directions(<span class=\"string\">\"Truckee\"</span>, <span class=\"string\">\"Tahoe City\"</span>, <span class=\"string\">\"Sunnyside\"</span>, <span class=\"string\">\"Homewood\"</span>, <span class=\"string\">\"Tahoma\"</span>)</span><br></pre></td></tr></table></figure>\n<p>（5）适用于对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> morning = &#123;</span><br><span class=\"line\">  breakfast: <span class=\"string\">\"oatmeal\"</span>,</span><br><span class=\"line\">  lunch: <span class=\"string\">\"peanut butter and jelly\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dinner = <span class=\"string\">\"mac and cheese\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> backpackingMeals = &#123;</span><br><span class=\"line\">  ...morning,</span><br><span class=\"line\">  dinner</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(backpackingMeals)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h4><p>1 介绍<br>Promise提供了一种更合理的方式处理异步行为,then函数可以通过链式调用执行某些任务，还可以使用另一个回调函数处理异常</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getFakeMembers = <span class=\"function\"><span class=\"params\">count</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolves, rejects</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> api = <span class=\"string\">`https://api.randomuser.me/?nat=US&amp;results=<span class=\"subst\">$&#123;count&#125;</span>`</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> request = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">      request.open(<span class=\"string\">'GET'</span>, api)</span><br><span class=\"line\">      request.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">           (request.status === <span class=\"number\">200</span>) ?</span><br><span class=\"line\">            resolves(<span class=\"built_in\">JSON</span>.parse(request.response).results) :</span><br><span class=\"line\">            rejects(<span class=\"built_in\">Error</span>(request.statusText))</span><br><span class=\"line\">      request.onerror = <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> rejects(err)</span><br><span class=\"line\">      request.send()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    getFakeMembers(<span class=\"number\">5</span>).then(</span><br><span class=\"line\">      members =&gt; <span class=\"built_in\">console</span>.log(members),</span><br><span class=\"line\">      err =&gt; <span class=\"built_in\">console</span>.error(</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"cannot load members from randomuser.me\"</span>))</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><p>1 背景介绍：<br>以前javascript没有类的概念，类型定义通过函数完成，创建一个函数，通过原型在函数对象上定义方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Constructor and the prototype, the old way</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vacation</span>(<span class=\"params\">destination, length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.destination = destination</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.length = length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vacation.prototype.print = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.destination + <span class=\"string\">\" will take \"</span> + <span class=\"keyword\">this</span>.length + <span class=\"string\">\" days\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> maui = <span class=\"keyword\">new</span> Vacation(<span class=\"string\">\"Maui\"</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">maui.print()</span><br></pre></td></tr></table></figure>\n<p>2 新增语法<br>工作机制相同，函数即对象，继承通过原型机制实现    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vacation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(destination, length) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.destination = destination</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.length = length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.destination&#125;</span> will take <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.length&#125;</span> days.`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> trip = <span class=\"keyword\">new</span> Vacation(<span class=\"string\">\"Santiago, Chile\"</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">trip.print()</span><br></pre></td></tr></table></figure>\n<p>3 类的继承<br>不仅可以直接继承，还可将类当做抽象类，添加新参数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Vacation &#123;</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>(<span class=\"params\">destination, length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.destination = destination</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      print() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.destination&#125;</span> will take <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.length&#125;</span> days.`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> Expedition <span class=\"keyword\">extends</span> Vacation &#123;</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>(<span class=\"params\">destination, length, gear</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(destination, length)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gear = gear</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      print() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.print()</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`bring your <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.gear.join(<span class=\"string\">\" and your \"</span>)&#125;</span>`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> trip = <span class=\"keyword\">new</span> Expedition(</span><br><span class=\"line\">      <span class=\"string\">\"Mt. Whitney\"</span>,</span><br><span class=\"line\">      <span class=\"number\">3</span>,</span><br><span class=\"line\">      [<span class=\"string\">\"sunglasses\"</span>, <span class=\"string\">\"prayer flags\"</span>, <span class=\"string\">\"camera\"</span>]</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    trip.print()</span><br></pre></td></tr></table></figure>\n<h4 id=\"ES6模块\"><a href=\"#ES6模块\" class=\"headerlink\" title=\"ES6模块\"></a>ES6模块</h4><p>1 介绍<br>ES6规范的javascript为模块提供了支持，javascript模块可以存储在独立的文件中，一个文件对应一个模块，<br>创建和导出一个模块中的数据有两种方式，用户可以从一个模块中导出一个或多个javascript对象<br>2 export<br>关键字export可以用来导出会在其他模块中用到的任意javascrip类型数据，其他变量将会以局部变量的形式存在。<br>当值导出一个变量或导出的数据值包含一种类型时，用户可以使用export default 替换export<br>3 import<br>与export相对，在其他javascript文件中调用模块：<br>（1）包含多个export语句的模块还可以进行对象解构<br>（2）使用export default的模块还可以被导入到单个变量中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> freel <span class=\"keyword\">from</span> <span class=\"string\">'/test'</span></span><br></pre></td></tr></table></figure>\n<p>（3）可以使用别名实现模块变量的本地化</p>\n<h4 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h4><p>1 介绍：<br>CommonJs是所有版本的node.js都支持的模块模式。用户可以通过Babel和webpack使用，导出使用module.export;<br>CommonJs不支持imporr语句，使用require进行模块导入</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react学习手册\"><a href=\"#react学习手册\" class=\"headerlink\" title=\"react学习手册\"></a>react学习手册</h1><h2 id=\"新特性\"><a href=\"#新特性\" class=\"headerlink\" title=\"新特性\"></a>新特性</h2><p>1 react开发者工具：react developer tools，可以查看网站react元素<br>2 yarn进行依赖管理：yarn.lock文件，可以使用yarn install安装，npm install yarn,yarn add [package-name],yarn remove [package-name]</p>\n<h4 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h4><p>1 const:常量，不能被修改，重写会报错；<br>2 let:变量，可以将变量作用域限定在任意代码块中（var不行）<br>3 模板字符串${}，可在字符串中插入变量</p>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>1 介绍：用户可以不使用function关键字创建函数，通常还不需要return<br>2 箭头函数可以限制this的作用域，箭头函数没有自己的this,引用外层的this;</p>\n<h4 id=\"ES6转译\"><a href=\"#ES6转译\" class=\"headerlink\" title=\"ES6转译\"></a>ES6转译</h4><p>1 介绍：浏览器运行前将代码转成符合ES5规范的代码，Bable是当前最流行的转译工具之一</p>\n<h4 id=\"ES6的对象和数组\"><a href=\"#ES6的对象和数组\" class=\"headerlink\" title=\"ES6的对象和数组\"></a>ES6的对象和数组</h4><p>1 解构赋值：<br>(1)允许用户将某个对象内的字段的作用域本地化，并且声明哪些值是将要使用的。<br>举例：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sandwich =  &#123;</span><br><span class=\"line\">     bread: <span class=\"string\">\"dutch crunch\"</span>,</span><br><span class=\"line\">     meat: <span class=\"string\">\"tuna\"</span>,</span><br><span class=\"line\">     cheese: <span class=\"string\">\"swiss\"</span>,</span><br><span class=\"line\">     toppings: [<span class=\"string\">\"lettuce\"</span>, <span class=\"string\">\"tomato\"</span>, <span class=\"string\">\"mustard\"</span>]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> &#123;bread, meat&#125; = sandwich</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(bread, meat)</span><br><span class=\"line\">   bread = <span class=\"string\">\"garlic\"</span></span><br><span class=\"line\">   meat = <span class=\"string\">\"turkey\"</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(bread,meat)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(sandwich.bread, sandwich.meat)</span><br></pre></td></tr></table></figure>\n<p>(2)除了使用点符号访问对象内部属性之外，还可以在对象之外解构需要使用的值。    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regularPerson = &#123;</span><br><span class=\"line\">    firstname: <span class=\"string\">\"Bill\"</span>,</span><br><span class=\"line\">    lastname: <span class=\"string\">\"Wilson\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lordify = <span class=\"function\">(<span class=\"params\">&#123;firstname&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;firstname&#125;</span> of regularPerson`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lordify(regularPerson);</span><br></pre></td></tr></table></figure>\n<p>(3)数组中的值也可以被解构，还可以使用都好进行列表匹配，跳过不需要的值；    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [firstResort] = [<span class=\"string\">\"Kirkwood\"</span>, <span class=\"string\">\"Squaw\"</span>, <span class=\"string\">\"Alpine\"</span>]</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(firstResort)</span><br><span class=\"line\"><span class=\"keyword\">var</span> [, , third] = [<span class=\"string\">\"Kirkwood\"</span>, <span class=\"string\">\"Squaw\"</span>, <span class=\"string\">\"Alpine\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(third)</span><br></pre></td></tr></table></figure>\n<p>2 对象语义增强<br>可以从全局作用域中获得变量并转化成一个对象。还可以通过对象语义增强或重组构造对象的方法：    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'yaya'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ela = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> func = &#123;name, ela&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Mmt. <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>  is aa <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.ela&#125;</span> oo`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'func'</span>, func);</span><br><span class=\"line\"><span class=\"keyword\">let</span> funclike = &#123;name, ela, test&#125;;</span><br><span class=\"line\">funclike.test();</span><br></pre></td></tr></table></figure>\n<p>定义了对象方法后就不需要使用关键字function了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 旧方案</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Léo Taillefer\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sound = <span class=\"string\">\"Kahh\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> skier = &#123;</span><br><span class=\"line\">      name: name,</span><br><span class=\"line\">      sound: sound,</span><br><span class=\"line\">      powderYell: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> yell = <span class=\"keyword\">this</span>.sound.toUpperCase()</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;yell&#125;</span> <span class=\"subst\">$&#123;yell&#125;</span> <span class=\"subst\">$&#123;yell&#125;</span>!!!`</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">      speed: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mph</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.speed = mph</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'speed:'</span>, mph)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    skier.powderYell()</span><br><span class=\"line\">    skier.speed(<span class=\"string\">\"hair on fire\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(skier))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新方案</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Julia Mancuso\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sound = <span class=\"string\">\"go fast\"</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> skier = &#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">      sound,</span><br><span class=\"line\">      powderYell() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> yell = <span class=\"keyword\">this</span>.sound.toUpperCase()</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;yell&#125;</span> <span class=\"subst\">$&#123;yell&#125;</span> <span class=\"subst\">$&#123;yell&#125;</span>!!!`</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      speed(mph) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.speed = mph</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'speed:'</span>, mph)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    skier.powderYell()</span><br><span class=\"line\">    skier.speed(<span class=\"number\">350</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(skier))</span><br></pre></td></tr></table></figure>\n<p>3 扩展运算符<br>（1）扩展运算符允许联合数组中的内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> peaks = [<span class=\"string\">\"Tallac\"</span>, <span class=\"string\">\"Ralston\"</span>, <span class=\"string\">\"Rose\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> canyons = [<span class=\"string\">\"Ward\"</span>, <span class=\"string\">\"Blackwood\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> tahoe = [...peaks, ...canyons]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tahoe.join(<span class=\"string\">', '</span>))</span><br></pre></td></tr></table></figure>\n<p>（2）可以创建副本，不需要改变数组原生解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var peaks &#x3D; [&quot;Tallac&quot;, &quot;Ralston&quot;, &quot;Rose&quot;]</span><br><span class=\"line\">var [last] &#x3D; [...peaks].reverse()</span><br><span class=\"line\">console.log(last);</span><br><span class=\"line\">console.log(peaks.join(&#39;, &#39;));</span><br></pre></td></tr></table></figure>\n<p>（3）可以用来获取数组中的其余元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> peaks = [<span class=\"string\">\"Tallac\"</span>, <span class=\"string\">\"Ralston\"</span>, <span class=\"string\">\"Rose\"</span>, <span class=\"string\">\"te11\"</span>, <span class=\"string\">\"tes12\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> [last, ...rest] = peaks;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(last);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rest.join(<span class=\"string\">', '</span>));</span><br></pre></td></tr></table></figure>\n<p>（4）可以将函数参数收集到一个数组中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">directions</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> [start, ...remaining] = args</span><br><span class=\"line\">      <span class=\"keyword\">var</span> [finish, ...stops] = remaining.reverse()</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`drive through <span class=\"subst\">$&#123;args.length&#125;</span> towns`</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`start in <span class=\"subst\">$&#123;start&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`the destination is <span class=\"subst\">$&#123;finish&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`stopping <span class=\"subst\">$&#123;stops.length&#125;</span> times in between`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    directions(<span class=\"string\">\"Truckee\"</span>, <span class=\"string\">\"Tahoe City\"</span>, <span class=\"string\">\"Sunnyside\"</span>, <span class=\"string\">\"Homewood\"</span>, <span class=\"string\">\"Tahoma\"</span>)</span><br></pre></td></tr></table></figure>\n<p>（5）适用于对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> morning = &#123;</span><br><span class=\"line\">  breakfast: <span class=\"string\">\"oatmeal\"</span>,</span><br><span class=\"line\">  lunch: <span class=\"string\">\"peanut butter and jelly\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dinner = <span class=\"string\">\"mac and cheese\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> backpackingMeals = &#123;</span><br><span class=\"line\">  ...morning,</span><br><span class=\"line\">  dinner</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(backpackingMeals)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h4><p>1 介绍<br>Promise提供了一种更合理的方式处理异步行为,then函数可以通过链式调用执行某些任务，还可以使用另一个回调函数处理异常</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getFakeMembers = <span class=\"function\"><span class=\"params\">count</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolves, rejects</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> api = <span class=\"string\">`https://api.randomuser.me/?nat=US&amp;results=<span class=\"subst\">$&#123;count&#125;</span>`</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> request = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">      request.open(<span class=\"string\">'GET'</span>, api)</span><br><span class=\"line\">      request.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">           (request.status === <span class=\"number\">200</span>) ?</span><br><span class=\"line\">            resolves(<span class=\"built_in\">JSON</span>.parse(request.response).results) :</span><br><span class=\"line\">            rejects(<span class=\"built_in\">Error</span>(request.statusText))</span><br><span class=\"line\">      request.onerror = <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> rejects(err)</span><br><span class=\"line\">      request.send()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    getFakeMembers(<span class=\"number\">5</span>).then(</span><br><span class=\"line\">      members =&gt; <span class=\"built_in\">console</span>.log(members),</span><br><span class=\"line\">      err =&gt; <span class=\"built_in\">console</span>.error(</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"cannot load members from randomuser.me\"</span>))</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><p>1 背景介绍：<br>以前javascript没有类的概念，类型定义通过函数完成，创建一个函数，通过原型在函数对象上定义方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Constructor and the prototype, the old way</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vacation</span>(<span class=\"params\">destination, length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.destination = destination</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.length = length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vacation.prototype.print = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.destination + <span class=\"string\">\" will take \"</span> + <span class=\"keyword\">this</span>.length + <span class=\"string\">\" days\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> maui = <span class=\"keyword\">new</span> Vacation(<span class=\"string\">\"Maui\"</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">maui.print()</span><br></pre></td></tr></table></figure>\n<p>2 新增语法<br>工作机制相同，函数即对象，继承通过原型机制实现    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vacation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(destination, length) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.destination = destination</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.length = length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.destination&#125;</span> will take <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.length&#125;</span> days.`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> trip = <span class=\"keyword\">new</span> Vacation(<span class=\"string\">\"Santiago, Chile\"</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">trip.print()</span><br></pre></td></tr></table></figure>\n<p>3 类的继承<br>不仅可以直接继承，还可将类当做抽象类，添加新参数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Vacation &#123;</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>(<span class=\"params\">destination, length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.destination = destination</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      print() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.destination&#125;</span> will take <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.length&#125;</span> days.`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> Expedition <span class=\"keyword\">extends</span> Vacation &#123;</span><br><span class=\"line\">      <span class=\"keyword\">constructor</span>(<span class=\"params\">destination, length, gear</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(destination, length)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.gear = gear</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      print() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.print()</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`bring your <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.gear.join(<span class=\"string\">\" and your \"</span>)&#125;</span>`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> trip = <span class=\"keyword\">new</span> Expedition(</span><br><span class=\"line\">      <span class=\"string\">\"Mt. Whitney\"</span>,</span><br><span class=\"line\">      <span class=\"number\">3</span>,</span><br><span class=\"line\">      [<span class=\"string\">\"sunglasses\"</span>, <span class=\"string\">\"prayer flags\"</span>, <span class=\"string\">\"camera\"</span>]</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    trip.print()</span><br></pre></td></tr></table></figure>\n<h4 id=\"ES6模块\"><a href=\"#ES6模块\" class=\"headerlink\" title=\"ES6模块\"></a>ES6模块</h4><p>1 介绍<br>ES6规范的javascript为模块提供了支持，javascript模块可以存储在独立的文件中，一个文件对应一个模块，<br>创建和导出一个模块中的数据有两种方式，用户可以从一个模块中导出一个或多个javascript对象<br>2 export<br>关键字export可以用来导出会在其他模块中用到的任意javascrip类型数据，其他变量将会以局部变量的形式存在。<br>当值导出一个变量或导出的数据值包含一种类型时，用户可以使用export default 替换export<br>3 import<br>与export相对，在其他javascript文件中调用模块：<br>（1）包含多个export语句的模块还可以进行对象解构<br>（2）使用export default的模块还可以被导入到单个变量中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> freel <span class=\"keyword\">from</span> <span class=\"string\">'/test'</span></span><br></pre></td></tr></table></figure>\n<p>（3）可以使用别名实现模块变量的本地化</p>\n<h4 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h4><p>1 介绍：<br>CommonJs是所有版本的node.js都支持的模块模式。用户可以通过Babel和webpack使用，导出使用module.export;<br>CommonJs不支持imporr语句，使用require进行模块导入</p>\n"},{"title":"react单元测试","date":"2019-07-29T02:40:10.000Z","_content":"# 测试\n## ESLint\n代码检查（分析JavaScript代码）,JSHint和JSLint是用于分析JavaScript代码的原生工具，并且可以为用户提供格式化代码的反馈意见；    \n","source":"_posts/reactUnit.md","raw":"---\ntitle: react单元测试\ndate: 2019-07-29 10:40:10\ntags: \n- 学习\ncategories: \n- 前端\n- react\n---\n# 测试\n## ESLint\n代码检查（分析JavaScript代码）,JSHint和JSLint是用于分析JavaScript代码的原生工具，并且可以为用户提供格式化代码的反馈意见；    \n","slug":"reactUnit","published":1,"updated":"2021-07-23T01:58:27.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kej004xl0xodds85uov","content":"<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h2><p>代码检查（分析JavaScript代码）,JSHint和JSLint是用于分析JavaScript代码的原生工具，并且可以为用户提供格式化代码的反馈意见；    </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h2><p>代码检查（分析JavaScript代码）,JSHint和JSLint是用于分析JavaScript代码的原生工具，并且可以为用户提供格式化代码的反馈意见；    </p>\n"},{"title":"python数据结构之列表","date":"2019-03-15T05:47:00.000Z","_content":"**介绍**\n\n可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型\n**操作**\n（1）取值：\nlist[0], list[0:3] （list[-2]代表读取列表中倒数第二个元素）\n（2）更新列表\n添加元素：append--> list.append('test')\n删除元素：del---> del list[2]\n**脚本操作符**\n\n| python表达式 | 结果 | 描述 \n| --- | --- | --- |\n| len([1,2,3]) | 3 | 长度 |\n| [1, 2, 3] + [4, 5, 6] | [1, 2, 3, 4, 5, 6] | 组合 |\n| ['Hi!'] * 4 | ['Hi!', 'Hi!', 'Hi!', 'Hi!'] | 重复 |\n| 3 in [1, 2, 3] | \tTrue | 元素是否存在于列表中 |\n| for x in [1, 2, 3]: print x, | 1 2 3 | 迭代 |\n**函数&方法**\n\n| 函数 | 作用 | \n| --- | --- |\n| cmp(list1, list2) | 比较两个列表的元素 |\n| len(list) | 列表元素个数 |\n| max(list) | 返回列表元素最大值 |\n| min(list) | 返回列表元素最小值 |\n| list(seq) | 将元组转换为列表 |\n\n| 方法 | 作用 | \n| --- | --- |\n| list.append(obj) | 在列表末尾添加新的对象 |\n| list.count(obj) | 统计某个元素在列表中出现的次数 |\n| list.extend(seq) | 在列表末尾一次性追加另一个序列的多个值（用新列表扩展原来的列表） |\n| list.index(obj) | 从列表中找出某个值第一个匹配项的索引位置 |\n| list.insert(index, obj) | 将对象插入列表 |\n| list.pop([index=-1]) | 移除列表中的一个元素（默认最后一个元素），并返回该元素的值 |\n| list.remove(obj) | 移除列表中的某个值的第一个匹配项 |\n| list.reverse() | 反向列表中的元素 |\n| list.sort(cmp=None, key=None, reverse=False) | 对原列表进行排序 |\n**注意事项**\n切片：[m:n]从索引m开始，直到索引n为止，但不包括索引n\n句尾加逗号：输出在一行中\nsort():直接修改原列表，返回None\n","source":"_posts/pythonlist.md","raw":"---\ntitle: python数据结构之列表\ndate: 2019-03-15 13:47:00\ncategories: \n- 服务端语言\n- python\n---\n**介绍**\n\n可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型\n**操作**\n（1）取值：\nlist[0], list[0:3] （list[-2]代表读取列表中倒数第二个元素）\n（2）更新列表\n添加元素：append--> list.append('test')\n删除元素：del---> del list[2]\n**脚本操作符**\n\n| python表达式 | 结果 | 描述 \n| --- | --- | --- |\n| len([1,2,3]) | 3 | 长度 |\n| [1, 2, 3] + [4, 5, 6] | [1, 2, 3, 4, 5, 6] | 组合 |\n| ['Hi!'] * 4 | ['Hi!', 'Hi!', 'Hi!', 'Hi!'] | 重复 |\n| 3 in [1, 2, 3] | \tTrue | 元素是否存在于列表中 |\n| for x in [1, 2, 3]: print x, | 1 2 3 | 迭代 |\n**函数&方法**\n\n| 函数 | 作用 | \n| --- | --- |\n| cmp(list1, list2) | 比较两个列表的元素 |\n| len(list) | 列表元素个数 |\n| max(list) | 返回列表元素最大值 |\n| min(list) | 返回列表元素最小值 |\n| list(seq) | 将元组转换为列表 |\n\n| 方法 | 作用 | \n| --- | --- |\n| list.append(obj) | 在列表末尾添加新的对象 |\n| list.count(obj) | 统计某个元素在列表中出现的次数 |\n| list.extend(seq) | 在列表末尾一次性追加另一个序列的多个值（用新列表扩展原来的列表） |\n| list.index(obj) | 从列表中找出某个值第一个匹配项的索引位置 |\n| list.insert(index, obj) | 将对象插入列表 |\n| list.pop([index=-1]) | 移除列表中的一个元素（默认最后一个元素），并返回该元素的值 |\n| list.remove(obj) | 移除列表中的某个值的第一个匹配项 |\n| list.reverse() | 反向列表中的元素 |\n| list.sort(cmp=None, key=None, reverse=False) | 对原列表进行排序 |\n**注意事项**\n切片：[m:n]从索引m开始，直到索引n为止，但不包括索引n\n句尾加逗号：输出在一行中\nsort():直接修改原列表，返回None\n","slug":"pythonlist","published":1,"updated":"2021-07-23T01:58:27.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kem004zl0xo9mcs1dnz","content":"<p><strong>介绍</strong></p>\n<p>可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型<br><strong>操作</strong><br>（1）取值：<br>list[0], list[0:3] （list[-2]代表读取列表中倒数第二个元素）<br>（2）更新列表<br>添加元素：append–&gt; list.append(‘test’)<br>删除元素：del—&gt; del list[2]<br><strong>脚本操作符</strong></p>\n<table>\n<thead>\n<tr>\n<th>python表达式</th>\n<th>结果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len([1,2,3])</td>\n<td>3</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>[1, 2, 3] + [4, 5, 6]</td>\n<td>[1, 2, 3, 4, 5, 6]</td>\n<td>组合</td>\n</tr>\n<tr>\n<td>[‘Hi!’] * 4</td>\n<td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td>重复</td>\n</tr>\n<tr>\n<td>3 in [1, 2, 3]</td>\n<td>True</td>\n<td>元素是否存在于列表中</td>\n</tr>\n<tr>\n<td>for x in [1, 2, 3]: print x,</td>\n<td>1 2 3</td>\n<td>迭代</td>\n</tr>\n<tr>\n<td><strong>函数&amp;方法</strong></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cmp(list1, list2)</td>\n<td>比较两个列表的元素</td>\n</tr>\n<tr>\n<td>len(list)</td>\n<td>列表元素个数</td>\n</tr>\n<tr>\n<td>max(list)</td>\n<td>返回列表元素最大值</td>\n</tr>\n<tr>\n<td>min(list)</td>\n<td>返回列表元素最小值</td>\n</tr>\n<tr>\n<td>list(seq)</td>\n<td>将元组转换为列表</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>list.append(obj)</td>\n<td>在列表末尾添加新的对象</td>\n</tr>\n<tr>\n<td>list.count(obj)</td>\n<td>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td>list.extend(seq)</td>\n<td>在列表末尾一次性追加另一个序列的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td>list.index(obj)</td>\n<td>从列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td>list.insert(index, obj)</td>\n<td>将对象插入列表</td>\n</tr>\n<tr>\n<td>list.pop([index=-1])</td>\n<td>移除列表中的一个元素（默认最后一个元素），并返回该元素的值</td>\n</tr>\n<tr>\n<td>list.remove(obj)</td>\n<td>移除列表中的某个值的第一个匹配项</td>\n</tr>\n<tr>\n<td>list.reverse()</td>\n<td>反向列表中的元素</td>\n</tr>\n<tr>\n<td>list.sort(cmp=None, key=None, reverse=False)</td>\n<td>对原列表进行排序</td>\n</tr>\n<tr>\n<td><strong>注意事项</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>切片：[m:n]从索引m开始，直到索引n为止，但不包括索引n</td>\n<td></td>\n</tr>\n<tr>\n<td>句尾加逗号：输出在一行中</td>\n<td></td>\n</tr>\n<tr>\n<td>sort():直接修改原列表，返回None</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>介绍</strong></p>\n<p>可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型<br><strong>操作</strong><br>（1）取值：<br>list[0], list[0:3] （list[-2]代表读取列表中倒数第二个元素）<br>（2）更新列表<br>添加元素：append–&gt; list.append(‘test’)<br>删除元素：del—&gt; del list[2]<br><strong>脚本操作符</strong></p>\n<table>\n<thead>\n<tr>\n<th>python表达式</th>\n<th>结果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len([1,2,3])</td>\n<td>3</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>[1, 2, 3] + [4, 5, 6]</td>\n<td>[1, 2, 3, 4, 5, 6]</td>\n<td>组合</td>\n</tr>\n<tr>\n<td>[‘Hi!’] * 4</td>\n<td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td>重复</td>\n</tr>\n<tr>\n<td>3 in [1, 2, 3]</td>\n<td>True</td>\n<td>元素是否存在于列表中</td>\n</tr>\n<tr>\n<td>for x in [1, 2, 3]: print x,</td>\n<td>1 2 3</td>\n<td>迭代</td>\n</tr>\n<tr>\n<td><strong>函数&amp;方法</strong></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cmp(list1, list2)</td>\n<td>比较两个列表的元素</td>\n</tr>\n<tr>\n<td>len(list)</td>\n<td>列表元素个数</td>\n</tr>\n<tr>\n<td>max(list)</td>\n<td>返回列表元素最大值</td>\n</tr>\n<tr>\n<td>min(list)</td>\n<td>返回列表元素最小值</td>\n</tr>\n<tr>\n<td>list(seq)</td>\n<td>将元组转换为列表</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>list.append(obj)</td>\n<td>在列表末尾添加新的对象</td>\n</tr>\n<tr>\n<td>list.count(obj)</td>\n<td>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td>list.extend(seq)</td>\n<td>在列表末尾一次性追加另一个序列的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td>list.index(obj)</td>\n<td>从列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td>list.insert(index, obj)</td>\n<td>将对象插入列表</td>\n</tr>\n<tr>\n<td>list.pop([index=-1])</td>\n<td>移除列表中的一个元素（默认最后一个元素），并返回该元素的值</td>\n</tr>\n<tr>\n<td>list.remove(obj)</td>\n<td>移除列表中的某个值的第一个匹配项</td>\n</tr>\n<tr>\n<td>list.reverse()</td>\n<td>反向列表中的元素</td>\n</tr>\n<tr>\n<td>list.sort(cmp=None, key=None, reverse=False)</td>\n<td>对原列表进行排序</td>\n</tr>\n<tr>\n<td><strong>注意事项</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>切片：[m:n]从索引m开始，直到索引n为止，但不包括索引n</td>\n<td></td>\n</tr>\n<tr>\n<td>句尾加逗号：输出在一行中</td>\n<td></td>\n</tr>\n<tr>\n<td>sort():直接修改原列表，返回None</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"react学习-javascript函数式编程","date":"2019-07-09T01:37:10.000Z","_content":"# react学习手册\n## Javascript函数式编程\n### 基础概念\n1 函数式编程：    \n函数是第一类成员，函数就是数据，可以像变量那样被保存，检索或者在应用程序内部传递。    \n（1）可以像声明变量一样声明函数；函数就是变量，可以添加到对象中：\n```javascript\nconst obj = {\n    message: 'asdsada',\n    log(message) {\n      console.log(message);\n    }\n  };\n  obj.log(obj.message);\n```\n（2）可以将函数添加到数组中；    \n（3）函数可以像其他变量一样，作为其他函数的参数传递，也可以作为其他函数的执行结果被返回;    \n\n### 命令式和声明式编程\n命令式编程：对执行结果的描述胜于执行过程    \n声明式编程： 代码关注重点是达成目标的具体过程\n### 不可变性\n（1）使用Objct.assign()方法：一种拷贝机制，提供一个空白对象，将操作的对象拷贝到该对象上，然后修改拷贝对象\n```javascript\nObject.assign({}, color, {rating:rating})\n```\n（2）可以使用ES6规范下的箭头函数和ES7规范下的对象扩展运算符编写同样的函数。\n```javascript\nconst rateColor = (color, rating) => ({\n    ...color,\n    rating\n})\n```\n注意，在箭头函数中，箭头不能指向一个对象的花括号；Array.push方法不是一个不可变函数，使用Array.concat取代    \n可以使用ES6扩展运算符串联数组，同时改操作符可以使用同样的机制拷贝对象，并将它添加到原生数组的副本上\n```javascript\nconst addColor = (title, list) => [...list, {title}]\n```\n### 纯函数\n1 概念：    \n返回结果值依赖于输入参数的函数。纯函数至少需要接受一个参数并且总是返回一个值或者其他函数。不产生副作用，不修改全局变量或任何应用程序的state,将输入参数当成不可变数据   \n```javascript\n    var frederick = {\n      name: \"Frederick Douglass\",\n      canRead: false,\n      canWrite: false\n    }\n\n    const selfEducate = person =>\n        ({\n            ...person,\n            canRead: true,\n            canWrite: true\n        })\n\n    //\n    // Pure Function, takes an argument, returns an object,\n    //    and causes zero side effects\n    //\n\n    console.log( selfEducate(frederick) )\n    console.log( frederick )\n```\n2 纯函数三条原则：    \n（1）函数应该至少接收一个参数；    \n（2）函数应该返回一个值或者其他函数；    \n（3）函数不应该修改或者影响任何传给它的参数\n### 数据转换\n1 概念：    \n将数据转换成另外一种数据，使用函数生成转换后的副本\n2 Array.map和Array.filter方法    \n转换数组    \n3 reduce和reduceRight    \n可以用来将数组转换成任意值。    \n举例：    \n（1）数组转换成数字:以下实例循环迭代，每次返回最大值，然后将结果作为上一次回调函数的返回值\n```javascript\nfunction getAge() {\n        const ages = [10, 21,33, 20,15, 14, 90, 12];\n        const maxAge = ages.reduce((max, age) => {\n            console.log(`${age} > ${max} = ${age > max}`);\n            if (age > max) {\n                return age;\n            } else {\n                return max;\n            }\n        }, 0);\n        const max = ages.reduce((max, value) => {(value > max) ? value : max}, 0);        \n        console.log('maxage', maxAge);\n    }\n```\nreduceRight和reduce类似，从数组末尾处理元素。    \n（2）数组转化成对象    \n","source":"_posts/react_02.md","raw":"---\ntitle: react学习-javascript函数式编程\ndate: 2019-07-09 09:37:10\ntags:\ncategories: \n- 前端\n- react\n---\n# react学习手册\n## Javascript函数式编程\n### 基础概念\n1 函数式编程：    \n函数是第一类成员，函数就是数据，可以像变量那样被保存，检索或者在应用程序内部传递。    \n（1）可以像声明变量一样声明函数；函数就是变量，可以添加到对象中：\n```javascript\nconst obj = {\n    message: 'asdsada',\n    log(message) {\n      console.log(message);\n    }\n  };\n  obj.log(obj.message);\n```\n（2）可以将函数添加到数组中；    \n（3）函数可以像其他变量一样，作为其他函数的参数传递，也可以作为其他函数的执行结果被返回;    \n\n### 命令式和声明式编程\n命令式编程：对执行结果的描述胜于执行过程    \n声明式编程： 代码关注重点是达成目标的具体过程\n### 不可变性\n（1）使用Objct.assign()方法：一种拷贝机制，提供一个空白对象，将操作的对象拷贝到该对象上，然后修改拷贝对象\n```javascript\nObject.assign({}, color, {rating:rating})\n```\n（2）可以使用ES6规范下的箭头函数和ES7规范下的对象扩展运算符编写同样的函数。\n```javascript\nconst rateColor = (color, rating) => ({\n    ...color,\n    rating\n})\n```\n注意，在箭头函数中，箭头不能指向一个对象的花括号；Array.push方法不是一个不可变函数，使用Array.concat取代    \n可以使用ES6扩展运算符串联数组，同时改操作符可以使用同样的机制拷贝对象，并将它添加到原生数组的副本上\n```javascript\nconst addColor = (title, list) => [...list, {title}]\n```\n### 纯函数\n1 概念：    \n返回结果值依赖于输入参数的函数。纯函数至少需要接受一个参数并且总是返回一个值或者其他函数。不产生副作用，不修改全局变量或任何应用程序的state,将输入参数当成不可变数据   \n```javascript\n    var frederick = {\n      name: \"Frederick Douglass\",\n      canRead: false,\n      canWrite: false\n    }\n\n    const selfEducate = person =>\n        ({\n            ...person,\n            canRead: true,\n            canWrite: true\n        })\n\n    //\n    // Pure Function, takes an argument, returns an object,\n    //    and causes zero side effects\n    //\n\n    console.log( selfEducate(frederick) )\n    console.log( frederick )\n```\n2 纯函数三条原则：    \n（1）函数应该至少接收一个参数；    \n（2）函数应该返回一个值或者其他函数；    \n（3）函数不应该修改或者影响任何传给它的参数\n### 数据转换\n1 概念：    \n将数据转换成另外一种数据，使用函数生成转换后的副本\n2 Array.map和Array.filter方法    \n转换数组    \n3 reduce和reduceRight    \n可以用来将数组转换成任意值。    \n举例：    \n（1）数组转换成数字:以下实例循环迭代，每次返回最大值，然后将结果作为上一次回调函数的返回值\n```javascript\nfunction getAge() {\n        const ages = [10, 21,33, 20,15, 14, 90, 12];\n        const maxAge = ages.reduce((max, age) => {\n            console.log(`${age} > ${max} = ${age > max}`);\n            if (age > max) {\n                return age;\n            } else {\n                return max;\n            }\n        }, 0);\n        const max = ages.reduce((max, value) => {(value > max) ? value : max}, 0);        \n        console.log('maxage', maxAge);\n    }\n```\nreduceRight和reduce类似，从数组末尾处理元素。    \n（2）数组转化成对象    \n","slug":"react_02","published":1,"updated":"2021-07-23T01:58:27.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4ken0053l0xo3snq6g71","content":"<h1 id=\"react学习手册\"><a href=\"#react学习手册\" class=\"headerlink\" title=\"react学习手册\"></a>react学习手册</h1><h2 id=\"Javascript函数式编程\"><a href=\"#Javascript函数式编程\" class=\"headerlink\" title=\"Javascript函数式编程\"></a>Javascript函数式编程</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p>1 函数式编程：<br>函数是第一类成员，函数就是数据，可以像变量那样被保存，检索或者在应用程序内部传递。<br>（1）可以像声明变量一样声明函数；函数就是变量，可以添加到对象中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'asdsada'</span>,</span><br><span class=\"line\">    log(message) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  obj.log(obj.message);</span><br></pre></td></tr></table></figure>\n<p>（2）可以将函数添加到数组中；<br>（3）函数可以像其他变量一样，作为其他函数的参数传递，也可以作为其他函数的执行结果被返回;    </p>\n<h3 id=\"命令式和声明式编程\"><a href=\"#命令式和声明式编程\" class=\"headerlink\" title=\"命令式和声明式编程\"></a>命令式和声明式编程</h3><p>命令式编程：对执行结果的描述胜于执行过程<br>声明式编程： 代码关注重点是达成目标的具体过程</p>\n<h3 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h3><p>（1）使用Objct.assign()方法：一种拷贝机制，提供一个空白对象，将操作的对象拷贝到该对象上，然后修改拷贝对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;&#125;, color, &#123;<span class=\"attr\">rating</span>:rating&#125;)</span><br></pre></td></tr></table></figure>\n<p>（2）可以使用ES6规范下的箭头函数和ES7规范下的对象扩展运算符编写同样的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rateColor = <span class=\"function\">(<span class=\"params\">color, rating</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    ...color,</span><br><span class=\"line\">    rating</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意，在箭头函数中，箭头不能指向一个对象的花括号；Array.push方法不是一个不可变函数，使用Array.concat取代<br>可以使用ES6扩展运算符串联数组，同时改操作符可以使用同样的机制拷贝对象，并将它添加到原生数组的副本上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addColor = <span class=\"function\">(<span class=\"params\">title, list</span>) =&gt;</span> [...list, &#123;title&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>1 概念：<br>返回结果值依赖于输入参数的函数。纯函数至少需要接受一个参数并且总是返回一个值或者其他函数。不产生副作用，不修改全局变量或任何应用程序的state,将输入参数当成不可变数据   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> frederick = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Frederick Douglass\"</span>,</span><br><span class=\"line\">  canRead: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  canWrite: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> selfEducate = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span></span><br><span class=\"line\">    (&#123;</span><br><span class=\"line\">        ...person,</span><br><span class=\"line\">        canRead: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        canWrite: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Pure Function, takes an argument, returns an object,</span></span><br><span class=\"line\"><span class=\"comment\">//    and causes zero side effects</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( selfEducate(frederick) )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( frederick )</span><br></pre></td></tr></table></figure>\n<p>2 纯函数三条原则：<br>（1）函数应该至少接收一个参数；<br>（2）函数应该返回一个值或者其他函数；<br>（3）函数不应该修改或者影响任何传给它的参数</p>\n<h3 id=\"数据转换\"><a href=\"#数据转换\" class=\"headerlink\" title=\"数据转换\"></a>数据转换</h3><p>1 概念：<br>将数据转换成另外一种数据，使用函数生成转换后的副本<br>2 Array.map和Array.filter方法<br>转换数组<br>3 reduce和reduceRight<br>可以用来将数组转换成任意值。<br>举例：<br>（1）数组转换成数字:以下实例循环迭代，每次返回最大值，然后将结果作为上一次回调函数的返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ages = [<span class=\"number\">10</span>, <span class=\"number\">21</span>,<span class=\"number\">33</span>, <span class=\"number\">20</span>,<span class=\"number\">15</span>, <span class=\"number\">14</span>, <span class=\"number\">90</span>, <span class=\"number\">12</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> maxAge = ages.reduce(<span class=\"function\">(<span class=\"params\">max, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;age&#125;</span> &gt; <span class=\"subst\">$&#123;max&#125;</span> = <span class=\"subst\">$&#123;age &gt; max&#125;</span>`</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (age &gt; max) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> max = ages.reduce(<span class=\"function\">(<span class=\"params\">max, value</span>) =&gt;</span> &#123;(value &gt; max) ? value : max&#125;, <span class=\"number\">0</span>);        </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'maxage'</span>, maxAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>reduceRight和reduce类似，从数组末尾处理元素。<br>（2）数组转化成对象    </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react学习手册\"><a href=\"#react学习手册\" class=\"headerlink\" title=\"react学习手册\"></a>react学习手册</h1><h2 id=\"Javascript函数式编程\"><a href=\"#Javascript函数式编程\" class=\"headerlink\" title=\"Javascript函数式编程\"></a>Javascript函数式编程</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p>1 函数式编程：<br>函数是第一类成员，函数就是数据，可以像变量那样被保存，检索或者在应用程序内部传递。<br>（1）可以像声明变量一样声明函数；函数就是变量，可以添加到对象中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'asdsada'</span>,</span><br><span class=\"line\">    log(message) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  obj.log(obj.message);</span><br></pre></td></tr></table></figure>\n<p>（2）可以将函数添加到数组中；<br>（3）函数可以像其他变量一样，作为其他函数的参数传递，也可以作为其他函数的执行结果被返回;    </p>\n<h3 id=\"命令式和声明式编程\"><a href=\"#命令式和声明式编程\" class=\"headerlink\" title=\"命令式和声明式编程\"></a>命令式和声明式编程</h3><p>命令式编程：对执行结果的描述胜于执行过程<br>声明式编程： 代码关注重点是达成目标的具体过程</p>\n<h3 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h3><p>（1）使用Objct.assign()方法：一种拷贝机制，提供一个空白对象，将操作的对象拷贝到该对象上，然后修改拷贝对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;&#125;, color, &#123;<span class=\"attr\">rating</span>:rating&#125;)</span><br></pre></td></tr></table></figure>\n<p>（2）可以使用ES6规范下的箭头函数和ES7规范下的对象扩展运算符编写同样的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rateColor = <span class=\"function\">(<span class=\"params\">color, rating</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    ...color,</span><br><span class=\"line\">    rating</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意，在箭头函数中，箭头不能指向一个对象的花括号；Array.push方法不是一个不可变函数，使用Array.concat取代<br>可以使用ES6扩展运算符串联数组，同时改操作符可以使用同样的机制拷贝对象，并将它添加到原生数组的副本上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addColor = <span class=\"function\">(<span class=\"params\">title, list</span>) =&gt;</span> [...list, &#123;title&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>1 概念：<br>返回结果值依赖于输入参数的函数。纯函数至少需要接受一个参数并且总是返回一个值或者其他函数。不产生副作用，不修改全局变量或任何应用程序的state,将输入参数当成不可变数据   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> frederick = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Frederick Douglass\"</span>,</span><br><span class=\"line\">  canRead: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  canWrite: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> selfEducate = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span></span><br><span class=\"line\">    (&#123;</span><br><span class=\"line\">        ...person,</span><br><span class=\"line\">        canRead: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        canWrite: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Pure Function, takes an argument, returns an object,</span></span><br><span class=\"line\"><span class=\"comment\">//    and causes zero side effects</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( selfEducate(frederick) )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( frederick )</span><br></pre></td></tr></table></figure>\n<p>2 纯函数三条原则：<br>（1）函数应该至少接收一个参数；<br>（2）函数应该返回一个值或者其他函数；<br>（3）函数不应该修改或者影响任何传给它的参数</p>\n<h3 id=\"数据转换\"><a href=\"#数据转换\" class=\"headerlink\" title=\"数据转换\"></a>数据转换</h3><p>1 概念：<br>将数据转换成另外一种数据，使用函数生成转换后的副本<br>2 Array.map和Array.filter方法<br>转换数组<br>3 reduce和reduceRight<br>可以用来将数组转换成任意值。<br>举例：<br>（1）数组转换成数字:以下实例循环迭代，每次返回最大值，然后将结果作为上一次回调函数的返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ages = [<span class=\"number\">10</span>, <span class=\"number\">21</span>,<span class=\"number\">33</span>, <span class=\"number\">20</span>,<span class=\"number\">15</span>, <span class=\"number\">14</span>, <span class=\"number\">90</span>, <span class=\"number\">12</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> maxAge = ages.reduce(<span class=\"function\">(<span class=\"params\">max, age</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;age&#125;</span> &gt; <span class=\"subst\">$&#123;max&#125;</span> = <span class=\"subst\">$&#123;age &gt; max&#125;</span>`</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (age &gt; max) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> max = ages.reduce(<span class=\"function\">(<span class=\"params\">max, value</span>) =&gt;</span> &#123;(value &gt; max) ? value : max&#125;, <span class=\"number\">0</span>);        </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'maxage'</span>, maxAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>reduceRight和reduce类似，从数组末尾处理元素。<br>（2）数组转化成对象    </p>\n"},{"title":"react学习-Props,state和组件树","date":"2019-10-22T10:37:10.000Z","_content":"# react学习手册\n## 属性验证\njavascript是弱类型语言，可更改变量的类型，难以查找类型错误。\n","source":"_posts/react_06.md","raw":"---\ntitle: react学习-Props,state和组件树\ndate: 2019-10-22 18:37:10\ntags:\ncategories: \n- 前端\n- react\n---\n# react学习手册\n## 属性验证\njavascript是弱类型语言，可更改变量的类型，难以查找类型错误。\n","slug":"react_06","published":1,"updated":"2021-07-23T01:58:27.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4keo0055l0xo8i0sfae3","content":"<h1 id=\"react学习手册\"><a href=\"#react学习手册\" class=\"headerlink\" title=\"react学习手册\"></a>react学习手册</h1><h2 id=\"属性验证\"><a href=\"#属性验证\" class=\"headerlink\" title=\"属性验证\"></a>属性验证</h2><p>javascript是弱类型语言，可更改变量的类型，难以查找类型错误。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react学习手册\"><a href=\"#react学习手册\" class=\"headerlink\" title=\"react学习手册\"></a>react学习手册</h1><h2 id=\"属性验证\"><a href=\"#属性验证\" class=\"headerlink\" title=\"属性验证\"></a>属性验证</h2><p>javascript是弱类型语言，可更改变量的类型，难以查找类型错误。</p>\n"},{"title":"单例模式","date":"2019-10-06T02:40:10.000Z","_content":"# 基础介绍\n## 概念介绍\n作为对象的创建模式，单例模式确保某一个类只有一个实例，并且对外提供这个全局实例的访问入口。它不会创建实例副本，而是会向单例类内部存储的实例返回一个引用。\n## 单例模式三要素\n1. 需要一个保存类的唯一实例的静态成员变量。    \n2. 构造函数和克隆函数必须声明为私有的，防止外部程序创建或复制实例副本。    \n3. 必须提供一个访问这个实例的公共静态方法，从而返回唯一实例的一个引用。    \n","source":"_posts/singleMode.md","raw":"---\ntitle: 单例模式\ndate: 2019-10-06 10:40:10\ntags: \n- 学习\ncategories: \n- 学习\n- 设计模式\n---\n# 基础介绍\n## 概念介绍\n作为对象的创建模式，单例模式确保某一个类只有一个实例，并且对外提供这个全局实例的访问入口。它不会创建实例副本，而是会向单例类内部存储的实例返回一个引用。\n## 单例模式三要素\n1. 需要一个保存类的唯一实例的静态成员变量。    \n2. 构造函数和克隆函数必须声明为私有的，防止外部程序创建或复制实例副本。    \n3. 必须提供一个访问这个实例的公共静态方法，从而返回唯一实例的一个引用。    \n","slug":"singleMode","published":1,"updated":"2021-07-23T01:58:27.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kep0058l0xoaivz1twr","content":"<h1 id=\"基础介绍\"><a href=\"#基础介绍\" class=\"headerlink\" title=\"基础介绍\"></a>基础介绍</h1><h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>作为对象的创建模式，单例模式确保某一个类只有一个实例，并且对外提供这个全局实例的访问入口。它不会创建实例副本，而是会向单例类内部存储的实例返回一个引用。</p>\n<h2 id=\"单例模式三要素\"><a href=\"#单例模式三要素\" class=\"headerlink\" title=\"单例模式三要素\"></a>单例模式三要素</h2><ol>\n<li>需要一个保存类的唯一实例的静态成员变量。    </li>\n<li>构造函数和克隆函数必须声明为私有的，防止外部程序创建或复制实例副本。    </li>\n<li>必须提供一个访问这个实例的公共静态方法，从而返回唯一实例的一个引用。    </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础介绍\"><a href=\"#基础介绍\" class=\"headerlink\" title=\"基础介绍\"></a>基础介绍</h1><h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>作为对象的创建模式，单例模式确保某一个类只有一个实例，并且对外提供这个全局实例的访问入口。它不会创建实例副本，而是会向单例类内部存储的实例返回一个引用。</p>\n<h2 id=\"单例模式三要素\"><a href=\"#单例模式三要素\" class=\"headerlink\" title=\"单例模式三要素\"></a>单例模式三要素</h2><ol>\n<li>需要一个保存类的唯一实例的静态成员变量。    </li>\n<li>构造函数和克隆函数必须声明为私有的，防止外部程序创建或复制实例副本。    </li>\n<li>必须提供一个访问这个实例的公共静态方法，从而返回唯一实例的一个引用。    </li>\n</ol>\n"},{"title":"react学习-基础","date":"2019-10-22T10:37:10.000Z","_content":"# 相关概念介绍\n## react\n## ES6\n## DOM\n## Redux\n## react-route\n## webpack\n\n","source":"_posts/react_base.md","raw":"---\ntitle: react学习-基础\ndate: 2019-10-22 18:37:10\ntags:\ncategories: \n- 前端\n- react\n---\n# 相关概念介绍\n## react\n## ES6\n## DOM\n## Redux\n## react-route\n## webpack\n\n","slug":"react_base","published":1,"updated":"2021-07-23T01:58:27.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4keq005al0xod04a6sn9","content":"<h1 id=\"相关概念介绍\"><a href=\"#相关概念介绍\" class=\"headerlink\" title=\"相关概念介绍\"></a>相关概念介绍</h1><h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2><h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><h2 id=\"react-route\"><a href=\"#react-route\" class=\"headerlink\" title=\"react-route\"></a>react-route</h2><h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"相关概念介绍\"><a href=\"#相关概念介绍\" class=\"headerlink\" title=\"相关概念介绍\"></a>相关概念介绍</h1><h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2><h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><h2 id=\"react-route\"><a href=\"#react-route\" class=\"headerlink\" title=\"react-route\"></a>react-route</h2><h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2>"},{"title":"fastadmin自定义角色组","date":"2019-01-31T09:36:10.000Z","comments":1,"_content":"之前使用fastadmin，自定义角色组，发现编辑/删除/修改等等权限可以直接权限管理中选择，然后用不同的角色登陆，会显示对应的权限按钮。此时有一个新的需求就是增加审核和批量审核，并且也增加对应的权限。\n\n\n----------\n\n添加按钮\n    先不写功能，在对应的位置上加上审核按钮。在顶头位置的批量审核需要得到的样式如下：\n    \n![clipboard.png](https://image-static.segmentfault.com/105/121/1051217979-5b03e62334d57_articlex)\n\n   \n\n>  原先的创建按钮方法为：\n>     {:build_toolbar('refresh,edit,checkall')}\n> 有时候不使用buid_toolbar来创建按钮，而是直接使用的\n>    \n> \n>      <a href=\"javascript:;\" class=\"btn btn-danger btn-del btn-disabled disabled {:$auth->check('course/clabelong/del')?'':'hide'}\"\n> title=\"{:__('Delete')}\" ><i class=\"fa fa-trash\"></i>\n> {:__('Delete')}</a>\n\n这种方式来创建按钮，这样虽然很直观，但是实际上使用却很不方便，因为这里对于权限的判定可能是有问题的。期待的结果是直接使用build_toolbar方法，设置checkall为批量审核，check为审核方法，对于各个权限组可以直接调用。\n修改build_toolbar方法到如下结果：\n\n    function build_toolbar($btns = NULL, $attr = [])\n        {\n            $auth = \\app\\admin\\library\\Auth::instance();\n            $controller = str_replace('.', '/', strtolower(think\\Request::instance()->controller()));\n            $btns = $btns ? $btns : ['refresh', 'add', 'edit', 'del', 'import','checkall'];\n            $btns = is_array($btns) ? $btns : explode(',', $btns);\n            $index = array_search('delete', $btns);\n            if ($index !== FALSE) {\n                $btns[$index] = 'del';\n            }\n            $btnAttr = [\n                'refresh' => ['javascript:;', 'btn btn-primary btn-refresh', 'fa fa-refresh', '', __('Refresh')],\n                'checkall'=> ['javascript:;', 'btn btn-success btn-checkall btn-disabled disabled', 'fa fa-flag-checkered', ' 批量审核', '批量审核'],\n                'add'     => ['javascript:;', 'btn btn-success btn-add', 'fa fa-plus', __('Add'), __('Add')],\n                'edit'    => ['javascript:;', 'btn btn-success btn-edit btn-disabled disabled', 'fa fa-pencil', __('Edit'), __('Edit')],\n                'del'     => ['javascript:;', 'btn btn-danger btn-del btn-disabled disabled', 'fa fa-trash', __('Delete'), __('Delete')],\n                'import'  => ['javascript:;', 'btn btn-danger btn-import', 'fa fa-upload', __('Import'), __('Import')],\n            ];\n            $btnAttr = array_merge($btnAttr, $attr);\n            $html = [];\n            foreach ($btns as $k => $v) {\n                //如果未定义或没有权限\n                if (!isset($btnAttr[$v]) || ($v !== 'refresh' && !$auth->check(\"{$controller}/{$v}\"))) {\n                    continue;\n                }\n                list($href, $class, $icon, $text, $title) = $btnAttr[$v];\n                $extend = $v == 'import' ? 'id=\"btn-import-file\" data-url=\"ajax/upload\" data-mimetype=\"csv,xls,xlsx\" data-multiple=\"false\"' : '';\n                $html[] = '<a href=\"' . $href . '\" class=\"' . $class . '\" title=\"' . $title . '\" ' . $extend . '><i class=\"' . $icon . '\"></i> ' . $text . '</a>';\n            }\n            return implode(' ', $html);\n        }\n                    \n具体修改的就是两个地方，第一个是数组$btns，在$btns数组中添加需要的元素，在本例中添加checkall;第二就是修改$btnAttr，根据需要添加一个checkall元素，如下所示：\n\n    \n\n> 'checkall'=> ['javascript:;', 'btn btn-success btn-checkall\n> btn-disabled disabled', 'fa fa-flag-checkered', ' 批量审核', '批量审核'],\n\n            \n这里有需要特别注意的地方是，最好在类中加上**btn-disabled disabled**两个class,这样可以方便直接获取是否选择。也就是说，在没有选择项的情况下，所有批量操作的按钮都应该是不能点击的。\n在修改完buildtoolbar之后在页面上使用应该就是可以直接调用出来了，到此第一步完成。\n\n\n----------\n\n修改js配置\n\n接下来修改require-table.js文件，因为所有的后台js文件都继承了这个文件，如果用的编辑器或IDE没有历史记录功能那就一定要做好备份。\n    首先是配置项，extend项代表每个url对应的方法，这里可以设置成缺省为空，然后在需要用到的js文件中再调用。加上checkall和check的URL，最好命名一致，修改完成的extend如下：\n    extend: {\n                index_url: '',\n                add_url: '',\n                edit_url: '',\n                del_url: '',\n                import_url: '',\n                multi_url: '',\n                check_url:'',\n                checkall_url:'',\n                check_classes_url:'',\n                dragsort_url: 'ajax/weigh',\n            }\n只需要按自己的需求把想加的公共方法加上，在config中添加按钮对应的class,比如这里添加：\n\n    checkallbtn: '.btn-checkall',\n\n\n绑定事件\n在bindevent中添加事件如下：\n\n    // 批量审核按钮事件\n    $(toolbar).on('click', Table.config.checkallbtn, function () {\n        var that = this;\n        var ids = Table.api.selectedids(table);\n        layer.msg('您正在批量修改审核状态，请选择结果', {\n            time: 20000, //20s后自动关闭\n            btn: ['通过', '不通过', '取消']\n            ,yes: function(index){\n                $(this).data({'check':1,'tablename':'classes'});\n                Table.api.multi(\"checkall\", ids, table, $(this));\n                Layer.close(index);\n                  }\n            ,btn2: function(index){\n                $(this).data({'check':2,'tablename':'classes'});\n                Table.api.multi(\"checkall\", ids, table, $(this));\n                Layer.close(index);\n                 }\n            ,btn3: function(index){\n                Layer.close(index);\n            }\n        });\n    });\n\n其中Table.config.checkallbtn即之前在config中添加的按钮，其中绑定的类名必须在之前的buildtollbar的对应按钮上有，根据需求，这里设置一个弹窗，以点击通过为例：\n鼠标选择几项结果之后进行批量审核，如果选择通过，对应回调yes，此时设置两个数据，一个是对应的表，一个是审核状态。因为主要是classes表会用到审核，默认值设置为classes表，如果其他方法调用，可以在对应的js文件中重写绑定事件；（还有另一种方法，config中添加一项为tablename,然后直接传tablename,将对应的classes修改为Table.config.tablename,每次页面js调用的时候修改config，但是因为大部分页面用不着重写config,因此这里不这么写）\nmulti方法即批量操作方法，因此这里应该直接调用，在multi方法中有以下的一句：\nvar url = typeof data.url !== \"undefined\" ? data.url : (action == \"del\" ? options.extend.del_url : options.extend.multi_url);\n\n这里要注意的是，在js调用的时候打印url，可能审核方法不在，因为实际上multi方法是绑定到dek_url或者multi_url的，这里有两种方法，一种是把check_url替换上去，一种是直接把multi_url方法绑定到check上，也可以直接加上，但是这个判断就要改。\n\n\n具体js\n进入到控制器对应的js中调用方法，如果写在trait中，每个控制器都会直接继承，如果使用的地方较少，可以直接使用。地址是admin/library/traits/Backend.php\ncheckall方法如下：\n\n    /**\n         *\n         * 批量审核\n         */\n        public function checkall($ids = \"\")\n        {\n            $row = $this->model->get($ids);\n            if (!$row)\n                $this->error(__('No Results were found'));\n            $adminIds = $this->getDataLimitAdminIds();\n            if (is_array($adminIds)) {\n                if (!in_array($row[$this->dataLimitField], $adminIds)) {\n                    $this->error(__('You have no permission'));\n                }\n            }\n            if ($this->request->isPost()) {\n                $values = $this->request->post()['params'];\n                if($values)\n                {\n                    $res =Db::name($values['tablename'])->where('id','IN',$ids)->update(['check'=>$values['check']]);\n                    $this->success();\n                }\n            }\n        }\n        \n\n\n其中$this->request->post()['params']可以获取到刚才在js中传递的数据，这里是用户选择的审核状态和需要更新的表名；之后对表进行操作返回$this->success()就可以了；\n\n\n添加权限\n以上操作顺利完成之后显示的会是没有操作权限；首先进入规则管理，添加刚才新增的方法对应的规则，例如这里添加的是check:\n\n![clipboard.png](https://segmentfault.com/img/bVba37O?w=736&h=333)\n\n只要不以菜单方式显示，然后状态正常就可以了；\n之后进入角色组，在角色组对应的权限中勾选，此时就可以加上对应的权限，这是很重要的一步：\n\n    **接下来在index页面中加上验证就行，例如这里是：\n    data-operate-check=\"{:$auth->check('course/clabelong/check')}\"\n    data-operate-checkall=\"{:$auth->check('course/clabelong/checkall')}\"**\n\n此时再登录不同的用户，例如教师组没有批量审核权限，那么无法显示批量审核按钮。\n\n\n单个操作权限\n除了批量操作，其实还可以单个操作，单个操作和批量操作稍有不同，但是更简单。可以仿照单元格元素事件来写，结果如下：\n\n    'click .btn-checkone': function (e, value, row, index) {\n                            e.stopPropagation();\n                            e.preventDefault();\n                            var table = $(this).closest('table');\n                            var options = table.bootstrapTable('getOptions');\n                            var ids = row[options.pk];\n                            row = $.extend({}, row ? row : {}, {ids: ids});\n                            var url = options.extend.check_url;\n                            Fast.api.open(Table.api.replaceurl(url, row, table), '审核', $(this).data() || {});\n                        },\n\n直接绑定到check_url，在对应方法的js文件中的extend写出check_url的位置，添加对应的方法和视图，就可以直接调用。当然，同样涉及到权限的问题，加了方法之后在index中依然要用data-operate-check=\"{:$auth->check('course/clabelong/check')}\"；同时，不要忘记在require-table.js中添加operate;我添加如下代码：\n\n    if (options.extend.check_url !== '') {\n                            buttons.push({\n                                name: 'check',\n                                icon: 'fa fa-flag-checkered',\n                                title: '审核',\n                                classname: 'btn btn-xs btn-success btn-checkone',\n                                url: options.extend.check_url\n                            });\n                        }\n\n\n在require-table中可能还有需要修改的地方，但是关键是按照原先的add.del等写好的方法来参照，基本上就不会出错了。\n        ","source":"_posts/test-my-site.md","raw":"---\ntitle: fastadmin自定义角色组\ndate: 2019-01-31 17:36:10\ncomments: true\ntags:\ncategories: \n- 服务端语言\n- php\n- fastadmins\n---\n之前使用fastadmin，自定义角色组，发现编辑/删除/修改等等权限可以直接权限管理中选择，然后用不同的角色登陆，会显示对应的权限按钮。此时有一个新的需求就是增加审核和批量审核，并且也增加对应的权限。\n\n\n----------\n\n添加按钮\n    先不写功能，在对应的位置上加上审核按钮。在顶头位置的批量审核需要得到的样式如下：\n    \n![clipboard.png](https://image-static.segmentfault.com/105/121/1051217979-5b03e62334d57_articlex)\n\n   \n\n>  原先的创建按钮方法为：\n>     {:build_toolbar('refresh,edit,checkall')}\n> 有时候不使用buid_toolbar来创建按钮，而是直接使用的\n>    \n> \n>      <a href=\"javascript:;\" class=\"btn btn-danger btn-del btn-disabled disabled {:$auth->check('course/clabelong/del')?'':'hide'}\"\n> title=\"{:__('Delete')}\" ><i class=\"fa fa-trash\"></i>\n> {:__('Delete')}</a>\n\n这种方式来创建按钮，这样虽然很直观，但是实际上使用却很不方便，因为这里对于权限的判定可能是有问题的。期待的结果是直接使用build_toolbar方法，设置checkall为批量审核，check为审核方法，对于各个权限组可以直接调用。\n修改build_toolbar方法到如下结果：\n\n    function build_toolbar($btns = NULL, $attr = [])\n        {\n            $auth = \\app\\admin\\library\\Auth::instance();\n            $controller = str_replace('.', '/', strtolower(think\\Request::instance()->controller()));\n            $btns = $btns ? $btns : ['refresh', 'add', 'edit', 'del', 'import','checkall'];\n            $btns = is_array($btns) ? $btns : explode(',', $btns);\n            $index = array_search('delete', $btns);\n            if ($index !== FALSE) {\n                $btns[$index] = 'del';\n            }\n            $btnAttr = [\n                'refresh' => ['javascript:;', 'btn btn-primary btn-refresh', 'fa fa-refresh', '', __('Refresh')],\n                'checkall'=> ['javascript:;', 'btn btn-success btn-checkall btn-disabled disabled', 'fa fa-flag-checkered', ' 批量审核', '批量审核'],\n                'add'     => ['javascript:;', 'btn btn-success btn-add', 'fa fa-plus', __('Add'), __('Add')],\n                'edit'    => ['javascript:;', 'btn btn-success btn-edit btn-disabled disabled', 'fa fa-pencil', __('Edit'), __('Edit')],\n                'del'     => ['javascript:;', 'btn btn-danger btn-del btn-disabled disabled', 'fa fa-trash', __('Delete'), __('Delete')],\n                'import'  => ['javascript:;', 'btn btn-danger btn-import', 'fa fa-upload', __('Import'), __('Import')],\n            ];\n            $btnAttr = array_merge($btnAttr, $attr);\n            $html = [];\n            foreach ($btns as $k => $v) {\n                //如果未定义或没有权限\n                if (!isset($btnAttr[$v]) || ($v !== 'refresh' && !$auth->check(\"{$controller}/{$v}\"))) {\n                    continue;\n                }\n                list($href, $class, $icon, $text, $title) = $btnAttr[$v];\n                $extend = $v == 'import' ? 'id=\"btn-import-file\" data-url=\"ajax/upload\" data-mimetype=\"csv,xls,xlsx\" data-multiple=\"false\"' : '';\n                $html[] = '<a href=\"' . $href . '\" class=\"' . $class . '\" title=\"' . $title . '\" ' . $extend . '><i class=\"' . $icon . '\"></i> ' . $text . '</a>';\n            }\n            return implode(' ', $html);\n        }\n                    \n具体修改的就是两个地方，第一个是数组$btns，在$btns数组中添加需要的元素，在本例中添加checkall;第二就是修改$btnAttr，根据需要添加一个checkall元素，如下所示：\n\n    \n\n> 'checkall'=> ['javascript:;', 'btn btn-success btn-checkall\n> btn-disabled disabled', 'fa fa-flag-checkered', ' 批量审核', '批量审核'],\n\n            \n这里有需要特别注意的地方是，最好在类中加上**btn-disabled disabled**两个class,这样可以方便直接获取是否选择。也就是说，在没有选择项的情况下，所有批量操作的按钮都应该是不能点击的。\n在修改完buildtoolbar之后在页面上使用应该就是可以直接调用出来了，到此第一步完成。\n\n\n----------\n\n修改js配置\n\n接下来修改require-table.js文件，因为所有的后台js文件都继承了这个文件，如果用的编辑器或IDE没有历史记录功能那就一定要做好备份。\n    首先是配置项，extend项代表每个url对应的方法，这里可以设置成缺省为空，然后在需要用到的js文件中再调用。加上checkall和check的URL，最好命名一致，修改完成的extend如下：\n    extend: {\n                index_url: '',\n                add_url: '',\n                edit_url: '',\n                del_url: '',\n                import_url: '',\n                multi_url: '',\n                check_url:'',\n                checkall_url:'',\n                check_classes_url:'',\n                dragsort_url: 'ajax/weigh',\n            }\n只需要按自己的需求把想加的公共方法加上，在config中添加按钮对应的class,比如这里添加：\n\n    checkallbtn: '.btn-checkall',\n\n\n绑定事件\n在bindevent中添加事件如下：\n\n    // 批量审核按钮事件\n    $(toolbar).on('click', Table.config.checkallbtn, function () {\n        var that = this;\n        var ids = Table.api.selectedids(table);\n        layer.msg('您正在批量修改审核状态，请选择结果', {\n            time: 20000, //20s后自动关闭\n            btn: ['通过', '不通过', '取消']\n            ,yes: function(index){\n                $(this).data({'check':1,'tablename':'classes'});\n                Table.api.multi(\"checkall\", ids, table, $(this));\n                Layer.close(index);\n                  }\n            ,btn2: function(index){\n                $(this).data({'check':2,'tablename':'classes'});\n                Table.api.multi(\"checkall\", ids, table, $(this));\n                Layer.close(index);\n                 }\n            ,btn3: function(index){\n                Layer.close(index);\n            }\n        });\n    });\n\n其中Table.config.checkallbtn即之前在config中添加的按钮，其中绑定的类名必须在之前的buildtollbar的对应按钮上有，根据需求，这里设置一个弹窗，以点击通过为例：\n鼠标选择几项结果之后进行批量审核，如果选择通过，对应回调yes，此时设置两个数据，一个是对应的表，一个是审核状态。因为主要是classes表会用到审核，默认值设置为classes表，如果其他方法调用，可以在对应的js文件中重写绑定事件；（还有另一种方法，config中添加一项为tablename,然后直接传tablename,将对应的classes修改为Table.config.tablename,每次页面js调用的时候修改config，但是因为大部分页面用不着重写config,因此这里不这么写）\nmulti方法即批量操作方法，因此这里应该直接调用，在multi方法中有以下的一句：\nvar url = typeof data.url !== \"undefined\" ? data.url : (action == \"del\" ? options.extend.del_url : options.extend.multi_url);\n\n这里要注意的是，在js调用的时候打印url，可能审核方法不在，因为实际上multi方法是绑定到dek_url或者multi_url的，这里有两种方法，一种是把check_url替换上去，一种是直接把multi_url方法绑定到check上，也可以直接加上，但是这个判断就要改。\n\n\n具体js\n进入到控制器对应的js中调用方法，如果写在trait中，每个控制器都会直接继承，如果使用的地方较少，可以直接使用。地址是admin/library/traits/Backend.php\ncheckall方法如下：\n\n    /**\n         *\n         * 批量审核\n         */\n        public function checkall($ids = \"\")\n        {\n            $row = $this->model->get($ids);\n            if (!$row)\n                $this->error(__('No Results were found'));\n            $adminIds = $this->getDataLimitAdminIds();\n            if (is_array($adminIds)) {\n                if (!in_array($row[$this->dataLimitField], $adminIds)) {\n                    $this->error(__('You have no permission'));\n                }\n            }\n            if ($this->request->isPost()) {\n                $values = $this->request->post()['params'];\n                if($values)\n                {\n                    $res =Db::name($values['tablename'])->where('id','IN',$ids)->update(['check'=>$values['check']]);\n                    $this->success();\n                }\n            }\n        }\n        \n\n\n其中$this->request->post()['params']可以获取到刚才在js中传递的数据，这里是用户选择的审核状态和需要更新的表名；之后对表进行操作返回$this->success()就可以了；\n\n\n添加权限\n以上操作顺利完成之后显示的会是没有操作权限；首先进入规则管理，添加刚才新增的方法对应的规则，例如这里添加的是check:\n\n![clipboard.png](https://segmentfault.com/img/bVba37O?w=736&h=333)\n\n只要不以菜单方式显示，然后状态正常就可以了；\n之后进入角色组，在角色组对应的权限中勾选，此时就可以加上对应的权限，这是很重要的一步：\n\n    **接下来在index页面中加上验证就行，例如这里是：\n    data-operate-check=\"{:$auth->check('course/clabelong/check')}\"\n    data-operate-checkall=\"{:$auth->check('course/clabelong/checkall')}\"**\n\n此时再登录不同的用户，例如教师组没有批量审核权限，那么无法显示批量审核按钮。\n\n\n单个操作权限\n除了批量操作，其实还可以单个操作，单个操作和批量操作稍有不同，但是更简单。可以仿照单元格元素事件来写，结果如下：\n\n    'click .btn-checkone': function (e, value, row, index) {\n                            e.stopPropagation();\n                            e.preventDefault();\n                            var table = $(this).closest('table');\n                            var options = table.bootstrapTable('getOptions');\n                            var ids = row[options.pk];\n                            row = $.extend({}, row ? row : {}, {ids: ids});\n                            var url = options.extend.check_url;\n                            Fast.api.open(Table.api.replaceurl(url, row, table), '审核', $(this).data() || {});\n                        },\n\n直接绑定到check_url，在对应方法的js文件中的extend写出check_url的位置，添加对应的方法和视图，就可以直接调用。当然，同样涉及到权限的问题，加了方法之后在index中依然要用data-operate-check=\"{:$auth->check('course/clabelong/check')}\"；同时，不要忘记在require-table.js中添加operate;我添加如下代码：\n\n    if (options.extend.check_url !== '') {\n                            buttons.push({\n                                name: 'check',\n                                icon: 'fa fa-flag-checkered',\n                                title: '审核',\n                                classname: 'btn btn-xs btn-success btn-checkone',\n                                url: options.extend.check_url\n                            });\n                        }\n\n\n在require-table中可能还有需要修改的地方，但是关键是按照原先的add.del等写好的方法来参照，基本上就不会出错了。\n        ","slug":"test-my-site","published":1,"updated":"2021-07-23T01:58:27.071Z","layout":"post","photos":[],"link":"","_id":"ckrft4ker005dl0xo80xxd6j7","content":"<p>之前使用fastadmin，自定义角色组，发现编辑/删除/修改等等权限可以直接权限管理中选择，然后用不同的角色登陆，会显示对应的权限按钮。此时有一个新的需求就是增加审核和批量审核，并且也增加对应的权限。</p>\n<hr>\n<p>添加按钮<br>    先不写功能，在对应的位置上加上审核按钮。在顶头位置的批量审核需要得到的样式如下：</p>\n<p><img src=\"https://image-static.segmentfault.com/105/121/1051217979-5b03e62334d57_articlex\" alt=\"clipboard.png\"></p>\n<blockquote>\n<p> 原先的创建按钮方法为：<br>    {:build_toolbar(‘refresh,edit,checkall’)}<br>有时候不使用buid_toolbar来创建按钮，而是直接使用的</p>\n<pre><code>&lt;a href=&quot;javascript:;&quot; class=&quot;btn btn-danger btn-del btn-disabled disabled {:$auth-&gt;check(&apos;course/clabelong/del&apos;)?&apos;&apos;:&apos;hide&apos;}&quot;</code></pre><p>title=”{:<strong>(‘Delete’)}” &gt;<i class=\"fa fa-trash\"></i><br>{:</strong>(‘Delete’)}</a></p>\n</blockquote>\n<p>这种方式来创建按钮，这样虽然很直观，但是实际上使用却很不方便，因为这里对于权限的判定可能是有问题的。期待的结果是直接使用build_toolbar方法，设置checkall为批量审核，check为审核方法，对于各个权限组可以直接调用。<br>修改build_toolbar方法到如下结果：</p>\n<pre><code>function build_toolbar($btns = NULL, $attr = [])\n    {\n        $auth = \\app\\admin\\library\\Auth::instance();\n        $controller = str_replace(&apos;.&apos;, &apos;/&apos;, strtolower(think\\Request::instance()-&gt;controller()));\n        $btns = $btns ? $btns : [&apos;refresh&apos;, &apos;add&apos;, &apos;edit&apos;, &apos;del&apos;, &apos;import&apos;,&apos;checkall&apos;];\n        $btns = is_array($btns) ? $btns : explode(&apos;,&apos;, $btns);\n        $index = array_search(&apos;delete&apos;, $btns);\n        if ($index !== FALSE) {\n            $btns[$index] = &apos;del&apos;;\n        }\n        $btnAttr = [\n            &apos;refresh&apos; =&gt; [&apos;javascript:;&apos;, &apos;btn btn-primary btn-refresh&apos;, &apos;fa fa-refresh&apos;, &apos;&apos;, __(&apos;Refresh&apos;)],\n            &apos;checkall&apos;=&gt; [&apos;javascript:;&apos;, &apos;btn btn-success btn-checkall btn-disabled disabled&apos;, &apos;fa fa-flag-checkered&apos;, &apos; 批量审核&apos;, &apos;批量审核&apos;],\n            &apos;add&apos;     =&gt; [&apos;javascript:;&apos;, &apos;btn btn-success btn-add&apos;, &apos;fa fa-plus&apos;, __(&apos;Add&apos;), __(&apos;Add&apos;)],\n            &apos;edit&apos;    =&gt; [&apos;javascript:;&apos;, &apos;btn btn-success btn-edit btn-disabled disabled&apos;, &apos;fa fa-pencil&apos;, __(&apos;Edit&apos;), __(&apos;Edit&apos;)],\n            &apos;del&apos;     =&gt; [&apos;javascript:;&apos;, &apos;btn btn-danger btn-del btn-disabled disabled&apos;, &apos;fa fa-trash&apos;, __(&apos;Delete&apos;), __(&apos;Delete&apos;)],\n            &apos;import&apos;  =&gt; [&apos;javascript:;&apos;, &apos;btn btn-danger btn-import&apos;, &apos;fa fa-upload&apos;, __(&apos;Import&apos;), __(&apos;Import&apos;)],\n        ];\n        $btnAttr = array_merge($btnAttr, $attr);\n        $html = [];\n        foreach ($btns as $k =&gt; $v) {\n            //如果未定义或没有权限\n            if (!isset($btnAttr[$v]) || ($v !== &apos;refresh&apos; &amp;&amp; !$auth-&gt;check(&quot;{$controller}/{$v}&quot;))) {\n                continue;\n            }\n            list($href, $class, $icon, $text, $title) = $btnAttr[$v];\n            $extend = $v == &apos;import&apos; ? &apos;id=&quot;btn-import-file&quot; data-url=&quot;ajax/upload&quot; data-mimetype=&quot;csv,xls,xlsx&quot; data-multiple=&quot;false&quot;&apos; : &apos;&apos;;\n            $html[] = &apos;&lt;a href=&quot;&apos; . $href . &apos;&quot; class=&quot;&apos; . $class . &apos;&quot; title=&quot;&apos; . $title . &apos;&quot; &apos; . $extend . &apos;&gt;&lt;i class=&quot;&apos; . $icon . &apos;&quot;&gt;&lt;/i&gt; &apos; . $text . &apos;&lt;/a&gt;&apos;;\n        }\n        return implode(&apos; &apos;, $html);\n    }</code></pre><p>具体修改的就是两个地方，第一个是数组$btns，在$btns数组中添加需要的元素，在本例中添加checkall;第二就是修改$btnAttr，根据需要添加一个checkall元素，如下所示：</p>\n<blockquote>\n<p>‘checkall’=&gt; [‘javascript:;’, ‘btn btn-success btn-checkall<br>btn-disabled disabled’, ‘fa fa-flag-checkered’, ‘ 批量审核’, ‘批量审核’],</p>\n</blockquote>\n<p>这里有需要特别注意的地方是，最好在类中加上<strong>btn-disabled disabled</strong>两个class,这样可以方便直接获取是否选择。也就是说，在没有选择项的情况下，所有批量操作的按钮都应该是不能点击的。<br>在修改完buildtoolbar之后在页面上使用应该就是可以直接调用出来了，到此第一步完成。</p>\n<hr>\n<p>修改js配置</p>\n<p>接下来修改require-table.js文件，因为所有的后台js文件都继承了这个文件，如果用的编辑器或IDE没有历史记录功能那就一定要做好备份。<br>    首先是配置项，extend项代表每个url对应的方法，这里可以设置成缺省为空，然后在需要用到的js文件中再调用。加上checkall和check的URL，最好命名一致，修改完成的extend如下：<br>    extend: {<br>                index_url: ‘’,<br>                add_url: ‘’,<br>                edit_url: ‘’,<br>                del_url: ‘’,<br>                import_url: ‘’,<br>                multi_url: ‘’,<br>                check_url:’’,<br>                checkall_url:’’,<br>                check_classes_url:’’,<br>                dragsort_url: ‘ajax/weigh’,<br>            }<br>只需要按自己的需求把想加的公共方法加上，在config中添加按钮对应的class,比如这里添加：</p>\n<pre><code>checkallbtn: &apos;.btn-checkall&apos;,</code></pre><p>绑定事件<br>在bindevent中添加事件如下：</p>\n<pre><code>// 批量审核按钮事件\n$(toolbar).on(&apos;click&apos;, Table.config.checkallbtn, function () {\n    var that = this;\n    var ids = Table.api.selectedids(table);\n    layer.msg(&apos;您正在批量修改审核状态，请选择结果&apos;, {\n        time: 20000, //20s后自动关闭\n        btn: [&apos;通过&apos;, &apos;不通过&apos;, &apos;取消&apos;]\n        ,yes: function(index){\n            $(this).data({&apos;check&apos;:1,&apos;tablename&apos;:&apos;classes&apos;});\n            Table.api.multi(&quot;checkall&quot;, ids, table, $(this));\n            Layer.close(index);\n              }\n        ,btn2: function(index){\n            $(this).data({&apos;check&apos;:2,&apos;tablename&apos;:&apos;classes&apos;});\n            Table.api.multi(&quot;checkall&quot;, ids, table, $(this));\n            Layer.close(index);\n             }\n        ,btn3: function(index){\n            Layer.close(index);\n        }\n    });\n});</code></pre><p>其中Table.config.checkallbtn即之前在config中添加的按钮，其中绑定的类名必须在之前的buildtollbar的对应按钮上有，根据需求，这里设置一个弹窗，以点击通过为例：<br>鼠标选择几项结果之后进行批量审核，如果选择通过，对应回调yes，此时设置两个数据，一个是对应的表，一个是审核状态。因为主要是classes表会用到审核，默认值设置为classes表，如果其他方法调用，可以在对应的js文件中重写绑定事件；（还有另一种方法，config中添加一项为tablename,然后直接传tablename,将对应的classes修改为Table.config.tablename,每次页面js调用的时候修改config，但是因为大部分页面用不着重写config,因此这里不这么写）<br>multi方法即批量操作方法，因此这里应该直接调用，在multi方法中有以下的一句：<br>var url = typeof data.url !== “undefined” ? data.url : (action == “del” ? options.extend.del_url : options.extend.multi_url);</p>\n<p>这里要注意的是，在js调用的时候打印url，可能审核方法不在，因为实际上multi方法是绑定到dek_url或者multi_url的，这里有两种方法，一种是把check_url替换上去，一种是直接把multi_url方法绑定到check上，也可以直接加上，但是这个判断就要改。</p>\n<p>具体js<br>进入到控制器对应的js中调用方法，如果写在trait中，每个控制器都会直接继承，如果使用的地方较少，可以直接使用。地址是admin/library/traits/Backend.php<br>checkall方法如下：</p>\n<pre><code>/**\n     *\n     * 批量审核\n     */\n    public function checkall($ids = &quot;&quot;)\n    {\n        $row = $this-&gt;model-&gt;get($ids);\n        if (!$row)\n            $this-&gt;error(__(&apos;No Results were found&apos;));\n        $adminIds = $this-&gt;getDataLimitAdminIds();\n        if (is_array($adminIds)) {\n            if (!in_array($row[$this-&gt;dataLimitField], $adminIds)) {\n                $this-&gt;error(__(&apos;You have no permission&apos;));\n            }\n        }\n        if ($this-&gt;request-&gt;isPost()) {\n            $values = $this-&gt;request-&gt;post()[&apos;params&apos;];\n            if($values)\n            {\n                $res =Db::name($values[&apos;tablename&apos;])-&gt;where(&apos;id&apos;,&apos;IN&apos;,$ids)-&gt;update([&apos;check&apos;=&gt;$values[&apos;check&apos;]]);\n                $this-&gt;success();\n            }\n        }\n    }</code></pre><p>其中$this-&gt;request-&gt;post()[‘params’]可以获取到刚才在js中传递的数据，这里是用户选择的审核状态和需要更新的表名；之后对表进行操作返回$this-&gt;success()就可以了；</p>\n<p>添加权限<br>以上操作顺利完成之后显示的会是没有操作权限；首先进入规则管理，添加刚才新增的方法对应的规则，例如这里添加的是check:</p>\n<p><img src=\"https://segmentfault.com/img/bVba37O?w=736&h=333\" alt=\"clipboard.png\"></p>\n<p>只要不以菜单方式显示，然后状态正常就可以了；<br>之后进入角色组，在角色组对应的权限中勾选，此时就可以加上对应的权限，这是很重要的一步：</p>\n<pre><code>**接下来在index页面中加上验证就行，例如这里是：\ndata-operate-check=&quot;{:$auth-&gt;check(&apos;course/clabelong/check&apos;)}&quot;\ndata-operate-checkall=&quot;{:$auth-&gt;check(&apos;course/clabelong/checkall&apos;)}&quot;**</code></pre><p>此时再登录不同的用户，例如教师组没有批量审核权限，那么无法显示批量审核按钮。</p>\n<p>单个操作权限<br>除了批量操作，其实还可以单个操作，单个操作和批量操作稍有不同，但是更简单。可以仿照单元格元素事件来写，结果如下：</p>\n<pre><code>&apos;click .btn-checkone&apos;: function (e, value, row, index) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        var table = $(this).closest(&apos;table&apos;);\n                        var options = table.bootstrapTable(&apos;getOptions&apos;);\n                        var ids = row[options.pk];\n                        row = $.extend({}, row ? row : {}, {ids: ids});\n                        var url = options.extend.check_url;\n                        Fast.api.open(Table.api.replaceurl(url, row, table), &apos;审核&apos;, $(this).data() || {});\n                    },</code></pre><p>直接绑定到check_url，在对应方法的js文件中的extend写出check_url的位置，添加对应的方法和视图，就可以直接调用。当然，同样涉及到权限的问题，加了方法之后在index中依然要用data-operate-check=”{:$auth-&gt;check(‘course/clabelong/check’)}”；同时，不要忘记在require-table.js中添加operate;我添加如下代码：</p>\n<pre><code>if (options.extend.check_url !== &apos;&apos;) {\n                        buttons.push({\n                            name: &apos;check&apos;,\n                            icon: &apos;fa fa-flag-checkered&apos;,\n                            title: &apos;审核&apos;,\n                            classname: &apos;btn btn-xs btn-success btn-checkone&apos;,\n                            url: options.extend.check_url\n                        });\n                    }</code></pre><p>在require-table中可能还有需要修改的地方，但是关键是按照原先的add.del等写好的方法来参照，基本上就不会出错了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前使用fastadmin，自定义角色组，发现编辑/删除/修改等等权限可以直接权限管理中选择，然后用不同的角色登陆，会显示对应的权限按钮。此时有一个新的需求就是增加审核和批量审核，并且也增加对应的权限。</p>\n<hr>\n<p>添加按钮<br>    先不写功能，在对应的位置上加上审核按钮。在顶头位置的批量审核需要得到的样式如下：</p>\n<p><img src=\"https://image-static.segmentfault.com/105/121/1051217979-5b03e62334d57_articlex\" alt=\"clipboard.png\"></p>\n<blockquote>\n<p> 原先的创建按钮方法为：<br>    {:build_toolbar(‘refresh,edit,checkall’)}<br>有时候不使用buid_toolbar来创建按钮，而是直接使用的</p>\n<pre><code>&lt;a href=&quot;javascript:;&quot; class=&quot;btn btn-danger btn-del btn-disabled disabled {:$auth-&gt;check(&apos;course/clabelong/del&apos;)?&apos;&apos;:&apos;hide&apos;}&quot;</code></pre><p>title=”{:<strong>(‘Delete’)}” &gt;<i class=\"fa fa-trash\"></i><br>{:</strong>(‘Delete’)}</a></p>\n</blockquote>\n<p>这种方式来创建按钮，这样虽然很直观，但是实际上使用却很不方便，因为这里对于权限的判定可能是有问题的。期待的结果是直接使用build_toolbar方法，设置checkall为批量审核，check为审核方法，对于各个权限组可以直接调用。<br>修改build_toolbar方法到如下结果：</p>\n<pre><code>function build_toolbar($btns = NULL, $attr = [])\n    {\n        $auth = \\app\\admin\\library\\Auth::instance();\n        $controller = str_replace(&apos;.&apos;, &apos;/&apos;, strtolower(think\\Request::instance()-&gt;controller()));\n        $btns = $btns ? $btns : [&apos;refresh&apos;, &apos;add&apos;, &apos;edit&apos;, &apos;del&apos;, &apos;import&apos;,&apos;checkall&apos;];\n        $btns = is_array($btns) ? $btns : explode(&apos;,&apos;, $btns);\n        $index = array_search(&apos;delete&apos;, $btns);\n        if ($index !== FALSE) {\n            $btns[$index] = &apos;del&apos;;\n        }\n        $btnAttr = [\n            &apos;refresh&apos; =&gt; [&apos;javascript:;&apos;, &apos;btn btn-primary btn-refresh&apos;, &apos;fa fa-refresh&apos;, &apos;&apos;, __(&apos;Refresh&apos;)],\n            &apos;checkall&apos;=&gt; [&apos;javascript:;&apos;, &apos;btn btn-success btn-checkall btn-disabled disabled&apos;, &apos;fa fa-flag-checkered&apos;, &apos; 批量审核&apos;, &apos;批量审核&apos;],\n            &apos;add&apos;     =&gt; [&apos;javascript:;&apos;, &apos;btn btn-success btn-add&apos;, &apos;fa fa-plus&apos;, __(&apos;Add&apos;), __(&apos;Add&apos;)],\n            &apos;edit&apos;    =&gt; [&apos;javascript:;&apos;, &apos;btn btn-success btn-edit btn-disabled disabled&apos;, &apos;fa fa-pencil&apos;, __(&apos;Edit&apos;), __(&apos;Edit&apos;)],\n            &apos;del&apos;     =&gt; [&apos;javascript:;&apos;, &apos;btn btn-danger btn-del btn-disabled disabled&apos;, &apos;fa fa-trash&apos;, __(&apos;Delete&apos;), __(&apos;Delete&apos;)],\n            &apos;import&apos;  =&gt; [&apos;javascript:;&apos;, &apos;btn btn-danger btn-import&apos;, &apos;fa fa-upload&apos;, __(&apos;Import&apos;), __(&apos;Import&apos;)],\n        ];\n        $btnAttr = array_merge($btnAttr, $attr);\n        $html = [];\n        foreach ($btns as $k =&gt; $v) {\n            //如果未定义或没有权限\n            if (!isset($btnAttr[$v]) || ($v !== &apos;refresh&apos; &amp;&amp; !$auth-&gt;check(&quot;{$controller}/{$v}&quot;))) {\n                continue;\n            }\n            list($href, $class, $icon, $text, $title) = $btnAttr[$v];\n            $extend = $v == &apos;import&apos; ? &apos;id=&quot;btn-import-file&quot; data-url=&quot;ajax/upload&quot; data-mimetype=&quot;csv,xls,xlsx&quot; data-multiple=&quot;false&quot;&apos; : &apos;&apos;;\n            $html[] = &apos;&lt;a href=&quot;&apos; . $href . &apos;&quot; class=&quot;&apos; . $class . &apos;&quot; title=&quot;&apos; . $title . &apos;&quot; &apos; . $extend . &apos;&gt;&lt;i class=&quot;&apos; . $icon . &apos;&quot;&gt;&lt;/i&gt; &apos; . $text . &apos;&lt;/a&gt;&apos;;\n        }\n        return implode(&apos; &apos;, $html);\n    }</code></pre><p>具体修改的就是两个地方，第一个是数组$btns，在$btns数组中添加需要的元素，在本例中添加checkall;第二就是修改$btnAttr，根据需要添加一个checkall元素，如下所示：</p>\n<blockquote>\n<p>‘checkall’=&gt; [‘javascript:;’, ‘btn btn-success btn-checkall<br>btn-disabled disabled’, ‘fa fa-flag-checkered’, ‘ 批量审核’, ‘批量审核’],</p>\n</blockquote>\n<p>这里有需要特别注意的地方是，最好在类中加上<strong>btn-disabled disabled</strong>两个class,这样可以方便直接获取是否选择。也就是说，在没有选择项的情况下，所有批量操作的按钮都应该是不能点击的。<br>在修改完buildtoolbar之后在页面上使用应该就是可以直接调用出来了，到此第一步完成。</p>\n<hr>\n<p>修改js配置</p>\n<p>接下来修改require-table.js文件，因为所有的后台js文件都继承了这个文件，如果用的编辑器或IDE没有历史记录功能那就一定要做好备份。<br>    首先是配置项，extend项代表每个url对应的方法，这里可以设置成缺省为空，然后在需要用到的js文件中再调用。加上checkall和check的URL，最好命名一致，修改完成的extend如下：<br>    extend: {<br>                index_url: ‘’,<br>                add_url: ‘’,<br>                edit_url: ‘’,<br>                del_url: ‘’,<br>                import_url: ‘’,<br>                multi_url: ‘’,<br>                check_url:’’,<br>                checkall_url:’’,<br>                check_classes_url:’’,<br>                dragsort_url: ‘ajax/weigh’,<br>            }<br>只需要按自己的需求把想加的公共方法加上，在config中添加按钮对应的class,比如这里添加：</p>\n<pre><code>checkallbtn: &apos;.btn-checkall&apos;,</code></pre><p>绑定事件<br>在bindevent中添加事件如下：</p>\n<pre><code>// 批量审核按钮事件\n$(toolbar).on(&apos;click&apos;, Table.config.checkallbtn, function () {\n    var that = this;\n    var ids = Table.api.selectedids(table);\n    layer.msg(&apos;您正在批量修改审核状态，请选择结果&apos;, {\n        time: 20000, //20s后自动关闭\n        btn: [&apos;通过&apos;, &apos;不通过&apos;, &apos;取消&apos;]\n        ,yes: function(index){\n            $(this).data({&apos;check&apos;:1,&apos;tablename&apos;:&apos;classes&apos;});\n            Table.api.multi(&quot;checkall&quot;, ids, table, $(this));\n            Layer.close(index);\n              }\n        ,btn2: function(index){\n            $(this).data({&apos;check&apos;:2,&apos;tablename&apos;:&apos;classes&apos;});\n            Table.api.multi(&quot;checkall&quot;, ids, table, $(this));\n            Layer.close(index);\n             }\n        ,btn3: function(index){\n            Layer.close(index);\n        }\n    });\n});</code></pre><p>其中Table.config.checkallbtn即之前在config中添加的按钮，其中绑定的类名必须在之前的buildtollbar的对应按钮上有，根据需求，这里设置一个弹窗，以点击通过为例：<br>鼠标选择几项结果之后进行批量审核，如果选择通过，对应回调yes，此时设置两个数据，一个是对应的表，一个是审核状态。因为主要是classes表会用到审核，默认值设置为classes表，如果其他方法调用，可以在对应的js文件中重写绑定事件；（还有另一种方法，config中添加一项为tablename,然后直接传tablename,将对应的classes修改为Table.config.tablename,每次页面js调用的时候修改config，但是因为大部分页面用不着重写config,因此这里不这么写）<br>multi方法即批量操作方法，因此这里应该直接调用，在multi方法中有以下的一句：<br>var url = typeof data.url !== “undefined” ? data.url : (action == “del” ? options.extend.del_url : options.extend.multi_url);</p>\n<p>这里要注意的是，在js调用的时候打印url，可能审核方法不在，因为实际上multi方法是绑定到dek_url或者multi_url的，这里有两种方法，一种是把check_url替换上去，一种是直接把multi_url方法绑定到check上，也可以直接加上，但是这个判断就要改。</p>\n<p>具体js<br>进入到控制器对应的js中调用方法，如果写在trait中，每个控制器都会直接继承，如果使用的地方较少，可以直接使用。地址是admin/library/traits/Backend.php<br>checkall方法如下：</p>\n<pre><code>/**\n     *\n     * 批量审核\n     */\n    public function checkall($ids = &quot;&quot;)\n    {\n        $row = $this-&gt;model-&gt;get($ids);\n        if (!$row)\n            $this-&gt;error(__(&apos;No Results were found&apos;));\n        $adminIds = $this-&gt;getDataLimitAdminIds();\n        if (is_array($adminIds)) {\n            if (!in_array($row[$this-&gt;dataLimitField], $adminIds)) {\n                $this-&gt;error(__(&apos;You have no permission&apos;));\n            }\n        }\n        if ($this-&gt;request-&gt;isPost()) {\n            $values = $this-&gt;request-&gt;post()[&apos;params&apos;];\n            if($values)\n            {\n                $res =Db::name($values[&apos;tablename&apos;])-&gt;where(&apos;id&apos;,&apos;IN&apos;,$ids)-&gt;update([&apos;check&apos;=&gt;$values[&apos;check&apos;]]);\n                $this-&gt;success();\n            }\n        }\n    }</code></pre><p>其中$this-&gt;request-&gt;post()[‘params’]可以获取到刚才在js中传递的数据，这里是用户选择的审核状态和需要更新的表名；之后对表进行操作返回$this-&gt;success()就可以了；</p>\n<p>添加权限<br>以上操作顺利完成之后显示的会是没有操作权限；首先进入规则管理，添加刚才新增的方法对应的规则，例如这里添加的是check:</p>\n<p><img src=\"https://segmentfault.com/img/bVba37O?w=736&h=333\" alt=\"clipboard.png\"></p>\n<p>只要不以菜单方式显示，然后状态正常就可以了；<br>之后进入角色组，在角色组对应的权限中勾选，此时就可以加上对应的权限，这是很重要的一步：</p>\n<pre><code>**接下来在index页面中加上验证就行，例如这里是：\ndata-operate-check=&quot;{:$auth-&gt;check(&apos;course/clabelong/check&apos;)}&quot;\ndata-operate-checkall=&quot;{:$auth-&gt;check(&apos;course/clabelong/checkall&apos;)}&quot;**</code></pre><p>此时再登录不同的用户，例如教师组没有批量审核权限，那么无法显示批量审核按钮。</p>\n<p>单个操作权限<br>除了批量操作，其实还可以单个操作，单个操作和批量操作稍有不同，但是更简单。可以仿照单元格元素事件来写，结果如下：</p>\n<pre><code>&apos;click .btn-checkone&apos;: function (e, value, row, index) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        var table = $(this).closest(&apos;table&apos;);\n                        var options = table.bootstrapTable(&apos;getOptions&apos;);\n                        var ids = row[options.pk];\n                        row = $.extend({}, row ? row : {}, {ids: ids});\n                        var url = options.extend.check_url;\n                        Fast.api.open(Table.api.replaceurl(url, row, table), &apos;审核&apos;, $(this).data() || {});\n                    },</code></pre><p>直接绑定到check_url，在对应方法的js文件中的extend写出check_url的位置，添加对应的方法和视图，就可以直接调用。当然，同样涉及到权限的问题，加了方法之后在index中依然要用data-operate-check=”{:$auth-&gt;check(‘course/clabelong/check’)}”；同时，不要忘记在require-table.js中添加operate;我添加如下代码：</p>\n<pre><code>if (options.extend.check_url !== &apos;&apos;) {\n                        buttons.push({\n                            name: &apos;check&apos;,\n                            icon: &apos;fa fa-flag-checkered&apos;,\n                            title: &apos;审核&apos;,\n                            classname: &apos;btn btn-xs btn-success btn-checkone&apos;,\n                            url: options.extend.check_url\n                        });\n                    }</code></pre><p>在require-table中可能还有需要修改的地方，但是关键是按照原先的add.del等写好的方法来参照，基本上就不会出错了。</p>\n"},{"title":"测试","date":"2019-12-10T04:34:10.000Z","_content":"# 单元测试\n# mock\n# 接口测试\n# stub\n# mock\n# fakeserver\n","source":"_posts/unitTest.md","raw":"---\ntitle: 测试\ndate: 2019-12-10 12:34:10\ntags: \n- 测试\ncategories: \n- 学习\n- 测试\n---\n# 单元测试\n# mock\n# 接口测试\n# stub\n# mock\n# fakeserver\n","slug":"unitTest","published":1,"updated":"2021-07-23T01:58:27.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kes005gl0xo0j653kzg","content":"<h1 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h1><h1 id=\"mock\"><a href=\"#mock\" class=\"headerlink\" title=\"mock\"></a>mock</h1><h1 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h1><h1 id=\"stub\"><a href=\"#stub\" class=\"headerlink\" title=\"stub\"></a>stub</h1><h1 id=\"mock-1\"><a href=\"#mock-1\" class=\"headerlink\" title=\"mock\"></a>mock</h1><h1 id=\"fakeserver\"><a href=\"#fakeserver\" class=\"headerlink\" title=\"fakeserver\"></a>fakeserver</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h1><h1 id=\"mock\"><a href=\"#mock\" class=\"headerlink\" title=\"mock\"></a>mock</h1><h1 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h1><h1 id=\"stub\"><a href=\"#stub\" class=\"headerlink\" title=\"stub\"></a>stub</h1><h1 id=\"mock-1\"><a href=\"#mock-1\" class=\"headerlink\" title=\"mock\"></a>mock</h1><h1 id=\"fakeserver\"><a href=\"#fakeserver\" class=\"headerlink\" title=\"fakeserver\"></a>fakeserver</h1>"},{"title":"vim学习笔记","date":"2019-02-28T08:34:10.000Z","_content":"## 光标移动\n\nh 或 <- 表示向左\nj 下\nk 上\nl 右\n\nctrl + f     屏幕向下移动一页\nctrl + b     向上移动一页\nctrl + d     向下移动半页\nctrl + u     向上移动半页\n'+'          光标移动到非空格符的下一行\n'-'          光标移动到非空格符的\nn[space]   n表示数字，光标向右移动n个字符\n0或[Home]  移动到这一行最开始的字符处\n$或[End]   移动到这一行的最后面字符处\nH          移动到这个屏幕最上方一行的第一个字符\nM          移动到这个屏幕中央一行的第一个字符\nL          移动到这个屏幕最下方一行的第一个字符\nG          移动到这个文件的最后一行\nnG(:n)     移动到这个文件的第n行\ngg(1G)     移动到第一行\nn[Enter]   n为数字，表示向下移动n行\n\n## 查找与替换\n\n/word 光标之下寻找名为word的字符串\n?word 光标之上寻找名为word的字符串\nn     重复前一个查找的操作\nN     反向进行前一个查找操作\n:n1,n2s/word1/word2/g    n1和n2是数字，在n1和n2行之间查找所有word,替换成word2\n:1,$s/word1/word2/g      \n:1,$s/word1/word2/gc     c代表confirm,替换前显示确认信息\n## 删除复制与粘贴\nx       向后删除\nX       向前删除\nnx      向后删除n个字符\ndd      删除（剪切）光标所在一整行\nndd     删除向下n行\nd1G     删除光标所在到第一行的数据\ndG      删除光标所在到最后一行的数据\nd$      删除光标所在处，到该行最后一个字符\nd0      \nyy      复制该行\nnyy\ny1G\nyG\ny0\ny$\np       将已复制的数据在光标下一行粘贴\nP       上一行\nJ       光标所在行与下一行数据结合成同一行\nc       重复删除多个数据(10cj代表向下删除10行)删除后切换到编辑模式\nu       回复\nctrl+r  重做\n.       重复前一次操作\n\n## 进入插入或替换的编辑模式\n\ni I     i从目前光标所在处插入，I目前所在行的第一个非空格字符处开始插入\na A     a 从目前光标所在的下一个字符处开始插入,A从光标所在行的最后一个字符处开始插入\no O     o 在目前光标所在行的下一行处插入新行  O上一行\nr R     r 替换一次 R 一直替换直到按Esc\n\n## 一般命令模式切换到命令模式\n\nZZ      若文件没有被修改则不保存退出，修改了则保存后退出\n:w [filename] 将编辑的数据保存成另一个新文件\n:r [filename] 读入另一个文件的数据，加在光标所在行后面\n:n1, n2 w [filename] 将n1到n2的内容保存到文件\n:! command 暂时退出vi到命令行模式下执行command的显示结果（:! ls /home）\n:set nu\n:set nonu\n:e! 还原文件内容事实上，可以使用[ :! ls /home ]不过，如果你学过后面的章节之后，你会发现，执行[ ctrl + z ]亦可暂时退出 vi 让你在命令行\n\n##多行添加数据\n\n**方法一：块选择模式**\n（1）v 进入virtual模式\n（2）上下键选择需要注释的行数\n（3）ctrl+v 进入列模式\n（4）大写I进入插入模式，输入要编辑的符号\n（5）立即按下两次ESC\n**方法二：替换命令**\n：起始行号，结束行号s/^/注释符/g\n取消注释：\n:起始行号,结束行号s/^注释符//g\n\n####编辑多行\n\nctrl+v进入visual block模式，按两次j或者2j，将光标移动到要插入的最后一行，按下i进入编辑模式。输入内容，Esc退出\n\n##多文件编辑\n\n:n 编辑下一个文件\n:N 编辑上一个文件\n:files 列出目前这个vim打开的所有文件\n（nyy复制后，使用p粘贴）\n\n##多窗口功能\n\n**分区窗口并放入文件**\n:sp {filename}\n#### 按键功能介绍\n:sp [filename] 打开一个新窗口，如果加filename表示打开另一个文件，否则打开自身\n[ctrl] + w + j 或[ctrl] + w + ↓：先按住ctrl键不放，按下w后放开，之后再按↓或↑\nctrl + w + q 相当于切换到某个窗口，按下:q离开，也可以直接ctrl+w+q\n\n##vim的挑字补全功能\n\nctrl + x -> ctrl + n 通过正在编辑的这个文件的内容文字作为关键组予以补齐\nctrl + x -> ctrl + f 以当前目录的文件名作为关键字予以补齐\nctrl + x -> ctrl + o 以扩展名作为语法补充，以vim内置的关键字予以补齐\n\n#### vim 自动补全报错option ‘omnifunc’ is not set\n\n编辑vimrc文件，加入以下内容：\n```\nautocmd FileType python set omnifunc=pythoncomplete#Complete\nautocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType html set omnifunc=htmlcomplete#CompleteTags\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\nautocmd FileType xml set omnifunc=xmlcomplete#CompleteTags\nautocmd FileType php set omnifunc=phpcomplete#CompletePHP\nautocmd FileType c set omnifunc=ccomplete#Complete\n```\n\n##编码转换\n\niconv list:列出所有的编码\niconv -f 原本编码 -t 新编码 filename [-o newfilw]\n##vim的环境设置参数\n\n:set no或者:set number\n:set hlsearch 设置高亮度搜寻\n:set nohlsearch\n:set autoindent 自动缩进\n:set noautoindent 设置不自动缩进\n:set backup 设置自动储存备份文件，一般设置为nobackup，如果为backup，每次更改一个文件时会自动产生一个`filename~`文件记录原始文件内容\n:set ruler 显示右下角状态列\n:set showmode 是否要显示--INSERT--之类的字眼\n:set backspace=(012) 某些distribution不允许使用backspace删除字符，当设置值为2可以删除任意值，为0或1时，只能删除刚才输入的\n:set all 显示目前所有的环境参数设置值\n:set 显示与系统默认值不同的设置参数\n:syntax on 程序相关语法显示不同颜色\n:syntax off \n:set bg=dark 显示不同的颜色色调\n:set bg=light 编辑'~/.vimrc'文件，有或没有冒号都可以\n\n##其他相关操作\n**virtualbox添加共享文件**\n1 设置-添加共享文件，选择固定分配\n2 添加挂载：sudo mount -t vboxsf rezb2b /mnt/rezb2b\n3 自启动挂载命令：sudo vim /etc/rc.local 添加命令\n","source":"_posts/vim.md","raw":"---\ntitle: vim学习笔记\ndate: 2019-02-28 16:34:10\ntags: \n- 文档\ncategories: \n- 快捷键\n---\n## 光标移动\n\nh 或 <- 表示向左\nj 下\nk 上\nl 右\n\nctrl + f     屏幕向下移动一页\nctrl + b     向上移动一页\nctrl + d     向下移动半页\nctrl + u     向上移动半页\n'+'          光标移动到非空格符的下一行\n'-'          光标移动到非空格符的\nn[space]   n表示数字，光标向右移动n个字符\n0或[Home]  移动到这一行最开始的字符处\n$或[End]   移动到这一行的最后面字符处\nH          移动到这个屏幕最上方一行的第一个字符\nM          移动到这个屏幕中央一行的第一个字符\nL          移动到这个屏幕最下方一行的第一个字符\nG          移动到这个文件的最后一行\nnG(:n)     移动到这个文件的第n行\ngg(1G)     移动到第一行\nn[Enter]   n为数字，表示向下移动n行\n\n## 查找与替换\n\n/word 光标之下寻找名为word的字符串\n?word 光标之上寻找名为word的字符串\nn     重复前一个查找的操作\nN     反向进行前一个查找操作\n:n1,n2s/word1/word2/g    n1和n2是数字，在n1和n2行之间查找所有word,替换成word2\n:1,$s/word1/word2/g      \n:1,$s/word1/word2/gc     c代表confirm,替换前显示确认信息\n## 删除复制与粘贴\nx       向后删除\nX       向前删除\nnx      向后删除n个字符\ndd      删除（剪切）光标所在一整行\nndd     删除向下n行\nd1G     删除光标所在到第一行的数据\ndG      删除光标所在到最后一行的数据\nd$      删除光标所在处，到该行最后一个字符\nd0      \nyy      复制该行\nnyy\ny1G\nyG\ny0\ny$\np       将已复制的数据在光标下一行粘贴\nP       上一行\nJ       光标所在行与下一行数据结合成同一行\nc       重复删除多个数据(10cj代表向下删除10行)删除后切换到编辑模式\nu       回复\nctrl+r  重做\n.       重复前一次操作\n\n## 进入插入或替换的编辑模式\n\ni I     i从目前光标所在处插入，I目前所在行的第一个非空格字符处开始插入\na A     a 从目前光标所在的下一个字符处开始插入,A从光标所在行的最后一个字符处开始插入\no O     o 在目前光标所在行的下一行处插入新行  O上一行\nr R     r 替换一次 R 一直替换直到按Esc\n\n## 一般命令模式切换到命令模式\n\nZZ      若文件没有被修改则不保存退出，修改了则保存后退出\n:w [filename] 将编辑的数据保存成另一个新文件\n:r [filename] 读入另一个文件的数据，加在光标所在行后面\n:n1, n2 w [filename] 将n1到n2的内容保存到文件\n:! command 暂时退出vi到命令行模式下执行command的显示结果（:! ls /home）\n:set nu\n:set nonu\n:e! 还原文件内容事实上，可以使用[ :! ls /home ]不过，如果你学过后面的章节之后，你会发现，执行[ ctrl + z ]亦可暂时退出 vi 让你在命令行\n\n##多行添加数据\n\n**方法一：块选择模式**\n（1）v 进入virtual模式\n（2）上下键选择需要注释的行数\n（3）ctrl+v 进入列模式\n（4）大写I进入插入模式，输入要编辑的符号\n（5）立即按下两次ESC\n**方法二：替换命令**\n：起始行号，结束行号s/^/注释符/g\n取消注释：\n:起始行号,结束行号s/^注释符//g\n\n####编辑多行\n\nctrl+v进入visual block模式，按两次j或者2j，将光标移动到要插入的最后一行，按下i进入编辑模式。输入内容，Esc退出\n\n##多文件编辑\n\n:n 编辑下一个文件\n:N 编辑上一个文件\n:files 列出目前这个vim打开的所有文件\n（nyy复制后，使用p粘贴）\n\n##多窗口功能\n\n**分区窗口并放入文件**\n:sp {filename}\n#### 按键功能介绍\n:sp [filename] 打开一个新窗口，如果加filename表示打开另一个文件，否则打开自身\n[ctrl] + w + j 或[ctrl] + w + ↓：先按住ctrl键不放，按下w后放开，之后再按↓或↑\nctrl + w + q 相当于切换到某个窗口，按下:q离开，也可以直接ctrl+w+q\n\n##vim的挑字补全功能\n\nctrl + x -> ctrl + n 通过正在编辑的这个文件的内容文字作为关键组予以补齐\nctrl + x -> ctrl + f 以当前目录的文件名作为关键字予以补齐\nctrl + x -> ctrl + o 以扩展名作为语法补充，以vim内置的关键字予以补齐\n\n#### vim 自动补全报错option ‘omnifunc’ is not set\n\n编辑vimrc文件，加入以下内容：\n```\nautocmd FileType python set omnifunc=pythoncomplete#Complete\nautocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType html set omnifunc=htmlcomplete#CompleteTags\nautocmd FileType css set omnifunc=csscomplete#CompleteCSS\nautocmd FileType xml set omnifunc=xmlcomplete#CompleteTags\nautocmd FileType php set omnifunc=phpcomplete#CompletePHP\nautocmd FileType c set omnifunc=ccomplete#Complete\n```\n\n##编码转换\n\niconv list:列出所有的编码\niconv -f 原本编码 -t 新编码 filename [-o newfilw]\n##vim的环境设置参数\n\n:set no或者:set number\n:set hlsearch 设置高亮度搜寻\n:set nohlsearch\n:set autoindent 自动缩进\n:set noautoindent 设置不自动缩进\n:set backup 设置自动储存备份文件，一般设置为nobackup，如果为backup，每次更改一个文件时会自动产生一个`filename~`文件记录原始文件内容\n:set ruler 显示右下角状态列\n:set showmode 是否要显示--INSERT--之类的字眼\n:set backspace=(012) 某些distribution不允许使用backspace删除字符，当设置值为2可以删除任意值，为0或1时，只能删除刚才输入的\n:set all 显示目前所有的环境参数设置值\n:set 显示与系统默认值不同的设置参数\n:syntax on 程序相关语法显示不同颜色\n:syntax off \n:set bg=dark 显示不同的颜色色调\n:set bg=light 编辑'~/.vimrc'文件，有或没有冒号都可以\n\n##其他相关操作\n**virtualbox添加共享文件**\n1 设置-添加共享文件，选择固定分配\n2 添加挂载：sudo mount -t vboxsf rezb2b /mnt/rezb2b\n3 自启动挂载命令：sudo vim /etc/rc.local 添加命令\n","slug":"vim","published":1,"updated":"2021-07-23T01:58:27.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kes005il0xo5xwm79eo","content":"<h2 id=\"光标移动\"><a href=\"#光标移动\" class=\"headerlink\" title=\"光标移动\"></a>光标移动</h2><p>h 或 &lt;- 表示向左<br>j 下<br>k 上<br>l 右</p>\n<p>ctrl + f     屏幕向下移动一页<br>ctrl + b     向上移动一页<br>ctrl + d     向下移动半页<br>ctrl + u     向上移动半页<br>‘+’          光标移动到非空格符的下一行<br>‘-‘          光标移动到非空格符的<br>n[space]   n表示数字，光标向右移动n个字符<br>0或[Home]  移动到这一行最开始的字符处<br>$或[End]   移动到这一行的最后面字符处<br>H          移动到这个屏幕最上方一行的第一个字符<br>M          移动到这个屏幕中央一行的第一个字符<br>L          移动到这个屏幕最下方一行的第一个字符<br>G          移动到这个文件的最后一行<br>nG(:n)     移动到这个文件的第n行<br>gg(1G)     移动到第一行<br>n[Enter]   n为数字，表示向下移动n行</p>\n<h2 id=\"查找与替换\"><a href=\"#查找与替换\" class=\"headerlink\" title=\"查找与替换\"></a>查找与替换</h2><p>/word 光标之下寻找名为word的字符串<br>?word 光标之上寻找名为word的字符串<br>n     重复前一个查找的操作<br>N     反向进行前一个查找操作<br>:n1,n2s/word1/word2/g    n1和n2是数字，在n1和n2行之间查找所有word,替换成word2<br>:1,$s/word1/word2/g<br>:1,$s/word1/word2/gc     c代表confirm,替换前显示确认信息</p>\n<h2 id=\"删除复制与粘贴\"><a href=\"#删除复制与粘贴\" class=\"headerlink\" title=\"删除复制与粘贴\"></a>删除复制与粘贴</h2><p>x       向后删除<br>X       向前删除<br>nx      向后删除n个字符<br>dd      删除（剪切）光标所在一整行<br>ndd     删除向下n行<br>d1G     删除光标所在到第一行的数据<br>dG      删除光标所在到最后一行的数据<br>d$      删除光标所在处，到该行最后一个字符<br>d0<br>yy      复制该行<br>nyy<br>y1G<br>yG<br>y0<br>y$<br>p       将已复制的数据在光标下一行粘贴<br>P       上一行<br>J       光标所在行与下一行数据结合成同一行<br>c       重复删除多个数据(10cj代表向下删除10行)删除后切换到编辑模式<br>u       回复<br>ctrl+r  重做<br>.       重复前一次操作</p>\n<h2 id=\"进入插入或替换的编辑模式\"><a href=\"#进入插入或替换的编辑模式\" class=\"headerlink\" title=\"进入插入或替换的编辑模式\"></a>进入插入或替换的编辑模式</h2><p>i I     i从目前光标所在处插入，I目前所在行的第一个非空格字符处开始插入<br>a A     a 从目前光标所在的下一个字符处开始插入,A从光标所在行的最后一个字符处开始插入<br>o O     o 在目前光标所在行的下一行处插入新行  O上一行<br>r R     r 替换一次 R 一直替换直到按Esc</p>\n<h2 id=\"一般命令模式切换到命令模式\"><a href=\"#一般命令模式切换到命令模式\" class=\"headerlink\" title=\"一般命令模式切换到命令模式\"></a>一般命令模式切换到命令模式</h2><p>ZZ      若文件没有被修改则不保存退出，修改了则保存后退出<br>:w [filename] 将编辑的数据保存成另一个新文件<br>:r [filename] 读入另一个文件的数据，加在光标所在行后面<br>:n1, n2 w [filename] 将n1到n2的内容保存到文件<br>:! command 暂时退出vi到命令行模式下执行command的显示结果（:! ls /home）<br>:set nu<br>:set nonu<br>:e! 还原文件内容事实上，可以使用[ :! ls /home ]不过，如果你学过后面的章节之后，你会发现，执行[ ctrl + z ]亦可暂时退出 vi 让你在命令行</p>\n<p>##多行添加数据</p>\n<p><strong>方法一：块选择模式</strong><br>（1）v 进入virtual模式<br>（2）上下键选择需要注释的行数<br>（3）ctrl+v 进入列模式<br>（4）大写I进入插入模式，输入要编辑的符号<br>（5）立即按下两次ESC<br><strong>方法二：替换命令</strong><br>：起始行号，结束行号s/^/注释符/g<br>取消注释：<br>:起始行号,结束行号s/^注释符//g</p>\n<p>####编辑多行</p>\n<p>ctrl+v进入visual block模式，按两次j或者2j，将光标移动到要插入的最后一行，按下i进入编辑模式。输入内容，Esc退出</p>\n<p>##多文件编辑</p>\n<p>:n 编辑下一个文件<br>:N 编辑上一个文件<br>:files 列出目前这个vim打开的所有文件<br>（nyy复制后，使用p粘贴）</p>\n<p>##多窗口功能</p>\n<p><strong>分区窗口并放入文件</strong><br>:sp {filename}</p>\n<h4 id=\"按键功能介绍\"><a href=\"#按键功能介绍\" class=\"headerlink\" title=\"按键功能介绍\"></a>按键功能介绍</h4><p>:sp [filename] 打开一个新窗口，如果加filename表示打开另一个文件，否则打开自身<br>[ctrl] + w + j 或[ctrl] + w + ↓：先按住ctrl键不放，按下w后放开，之后再按↓或↑<br>ctrl + w + q 相当于切换到某个窗口，按下:q离开，也可以直接ctrl+w+q</p>\n<p>##vim的挑字补全功能</p>\n<p>ctrl + x -&gt; ctrl + n 通过正在编辑的这个文件的内容文字作为关键组予以补齐<br>ctrl + x -&gt; ctrl + f 以当前目录的文件名作为关键字予以补齐<br>ctrl + x -&gt; ctrl + o 以扩展名作为语法补充，以vim内置的关键字予以补齐</p>\n<h4 id=\"vim-自动补全报错option-‘omnifunc’-is-not-set\"><a href=\"#vim-自动补全报错option-‘omnifunc’-is-not-set\" class=\"headerlink\" title=\"vim 自动补全报错option ‘omnifunc’ is not set\"></a>vim 自动补全报错option ‘omnifunc’ is not set</h4><p>编辑vimrc文件，加入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autocmd FileType python set omnifunc&#x3D;pythoncomplete#Complete</span><br><span class=\"line\">autocmd FileType javascript set omnifunc&#x3D;javascriptcomplete#CompleteJS</span><br><span class=\"line\">autocmd FileType html set omnifunc&#x3D;htmlcomplete#CompleteTags</span><br><span class=\"line\">autocmd FileType css set omnifunc&#x3D;csscomplete#CompleteCSS</span><br><span class=\"line\">autocmd FileType xml set omnifunc&#x3D;xmlcomplete#CompleteTags</span><br><span class=\"line\">autocmd FileType php set omnifunc&#x3D;phpcomplete#CompletePHP</span><br><span class=\"line\">autocmd FileType c set omnifunc&#x3D;ccomplete#Complete</span><br></pre></td></tr></table></figure>\n\n<p>##编码转换</p>\n<p>iconv list:列出所有的编码<br>iconv -f 原本编码 -t 新编码 filename [-o newfilw]<br>##vim的环境设置参数</p>\n<p>:set no或者:set number<br>:set hlsearch 设置高亮度搜寻<br>:set nohlsearch<br>:set autoindent 自动缩进<br>:set noautoindent 设置不自动缩进<br>:set backup 设置自动储存备份文件，一般设置为nobackup，如果为backup，每次更改一个文件时会自动产生一个<code>filename~</code>文件记录原始文件内容<br>:set ruler 显示右下角状态列<br>:set showmode 是否要显示–INSERT–之类的字眼<br>:set backspace=(012) 某些distribution不允许使用backspace删除字符，当设置值为2可以删除任意值，为0或1时，只能删除刚才输入的<br>:set all 显示目前所有的环境参数设置值<br>:set 显示与系统默认值不同的设置参数<br>:syntax on 程序相关语法显示不同颜色<br>:syntax off<br>:set bg=dark 显示不同的颜色色调<br>:set bg=light 编辑’~/.vimrc’文件，有或没有冒号都可以</p>\n<p>##其他相关操作<br><strong>virtualbox添加共享文件</strong><br>1 设置-添加共享文件，选择固定分配<br>2 添加挂载：sudo mount -t vboxsf rezb2b /mnt/rezb2b<br>3 自启动挂载命令：sudo vim /etc/rc.local 添加命令</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"光标移动\"><a href=\"#光标移动\" class=\"headerlink\" title=\"光标移动\"></a>光标移动</h2><p>h 或 &lt;- 表示向左<br>j 下<br>k 上<br>l 右</p>\n<p>ctrl + f     屏幕向下移动一页<br>ctrl + b     向上移动一页<br>ctrl + d     向下移动半页<br>ctrl + u     向上移动半页<br>‘+’          光标移动到非空格符的下一行<br>‘-‘          光标移动到非空格符的<br>n[space]   n表示数字，光标向右移动n个字符<br>0或[Home]  移动到这一行最开始的字符处<br>$或[End]   移动到这一行的最后面字符处<br>H          移动到这个屏幕最上方一行的第一个字符<br>M          移动到这个屏幕中央一行的第一个字符<br>L          移动到这个屏幕最下方一行的第一个字符<br>G          移动到这个文件的最后一行<br>nG(:n)     移动到这个文件的第n行<br>gg(1G)     移动到第一行<br>n[Enter]   n为数字，表示向下移动n行</p>\n<h2 id=\"查找与替换\"><a href=\"#查找与替换\" class=\"headerlink\" title=\"查找与替换\"></a>查找与替换</h2><p>/word 光标之下寻找名为word的字符串<br>?word 光标之上寻找名为word的字符串<br>n     重复前一个查找的操作<br>N     反向进行前一个查找操作<br>:n1,n2s/word1/word2/g    n1和n2是数字，在n1和n2行之间查找所有word,替换成word2<br>:1,$s/word1/word2/g<br>:1,$s/word1/word2/gc     c代表confirm,替换前显示确认信息</p>\n<h2 id=\"删除复制与粘贴\"><a href=\"#删除复制与粘贴\" class=\"headerlink\" title=\"删除复制与粘贴\"></a>删除复制与粘贴</h2><p>x       向后删除<br>X       向前删除<br>nx      向后删除n个字符<br>dd      删除（剪切）光标所在一整行<br>ndd     删除向下n行<br>d1G     删除光标所在到第一行的数据<br>dG      删除光标所在到最后一行的数据<br>d$      删除光标所在处，到该行最后一个字符<br>d0<br>yy      复制该行<br>nyy<br>y1G<br>yG<br>y0<br>y$<br>p       将已复制的数据在光标下一行粘贴<br>P       上一行<br>J       光标所在行与下一行数据结合成同一行<br>c       重复删除多个数据(10cj代表向下删除10行)删除后切换到编辑模式<br>u       回复<br>ctrl+r  重做<br>.       重复前一次操作</p>\n<h2 id=\"进入插入或替换的编辑模式\"><a href=\"#进入插入或替换的编辑模式\" class=\"headerlink\" title=\"进入插入或替换的编辑模式\"></a>进入插入或替换的编辑模式</h2><p>i I     i从目前光标所在处插入，I目前所在行的第一个非空格字符处开始插入<br>a A     a 从目前光标所在的下一个字符处开始插入,A从光标所在行的最后一个字符处开始插入<br>o O     o 在目前光标所在行的下一行处插入新行  O上一行<br>r R     r 替换一次 R 一直替换直到按Esc</p>\n<h2 id=\"一般命令模式切换到命令模式\"><a href=\"#一般命令模式切换到命令模式\" class=\"headerlink\" title=\"一般命令模式切换到命令模式\"></a>一般命令模式切换到命令模式</h2><p>ZZ      若文件没有被修改则不保存退出，修改了则保存后退出<br>:w [filename] 将编辑的数据保存成另一个新文件<br>:r [filename] 读入另一个文件的数据，加在光标所在行后面<br>:n1, n2 w [filename] 将n1到n2的内容保存到文件<br>:! command 暂时退出vi到命令行模式下执行command的显示结果（:! ls /home）<br>:set nu<br>:set nonu<br>:e! 还原文件内容事实上，可以使用[ :! ls /home ]不过，如果你学过后面的章节之后，你会发现，执行[ ctrl + z ]亦可暂时退出 vi 让你在命令行</p>\n<p>##多行添加数据</p>\n<p><strong>方法一：块选择模式</strong><br>（1）v 进入virtual模式<br>（2）上下键选择需要注释的行数<br>（3）ctrl+v 进入列模式<br>（4）大写I进入插入模式，输入要编辑的符号<br>（5）立即按下两次ESC<br><strong>方法二：替换命令</strong><br>：起始行号，结束行号s/^/注释符/g<br>取消注释：<br>:起始行号,结束行号s/^注释符//g</p>\n<p>####编辑多行</p>\n<p>ctrl+v进入visual block模式，按两次j或者2j，将光标移动到要插入的最后一行，按下i进入编辑模式。输入内容，Esc退出</p>\n<p>##多文件编辑</p>\n<p>:n 编辑下一个文件<br>:N 编辑上一个文件<br>:files 列出目前这个vim打开的所有文件<br>（nyy复制后，使用p粘贴）</p>\n<p>##多窗口功能</p>\n<p><strong>分区窗口并放入文件</strong><br>:sp {filename}</p>\n<h4 id=\"按键功能介绍\"><a href=\"#按键功能介绍\" class=\"headerlink\" title=\"按键功能介绍\"></a>按键功能介绍</h4><p>:sp [filename] 打开一个新窗口，如果加filename表示打开另一个文件，否则打开自身<br>[ctrl] + w + j 或[ctrl] + w + ↓：先按住ctrl键不放，按下w后放开，之后再按↓或↑<br>ctrl + w + q 相当于切换到某个窗口，按下:q离开，也可以直接ctrl+w+q</p>\n<p>##vim的挑字补全功能</p>\n<p>ctrl + x -&gt; ctrl + n 通过正在编辑的这个文件的内容文字作为关键组予以补齐<br>ctrl + x -&gt; ctrl + f 以当前目录的文件名作为关键字予以补齐<br>ctrl + x -&gt; ctrl + o 以扩展名作为语法补充，以vim内置的关键字予以补齐</p>\n<h4 id=\"vim-自动补全报错option-‘omnifunc’-is-not-set\"><a href=\"#vim-自动补全报错option-‘omnifunc’-is-not-set\" class=\"headerlink\" title=\"vim 自动补全报错option ‘omnifunc’ is not set\"></a>vim 自动补全报错option ‘omnifunc’ is not set</h4><p>编辑vimrc文件，加入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autocmd FileType python set omnifunc&#x3D;pythoncomplete#Complete</span><br><span class=\"line\">autocmd FileType javascript set omnifunc&#x3D;javascriptcomplete#CompleteJS</span><br><span class=\"line\">autocmd FileType html set omnifunc&#x3D;htmlcomplete#CompleteTags</span><br><span class=\"line\">autocmd FileType css set omnifunc&#x3D;csscomplete#CompleteCSS</span><br><span class=\"line\">autocmd FileType xml set omnifunc&#x3D;xmlcomplete#CompleteTags</span><br><span class=\"line\">autocmd FileType php set omnifunc&#x3D;phpcomplete#CompletePHP</span><br><span class=\"line\">autocmd FileType c set omnifunc&#x3D;ccomplete#Complete</span><br></pre></td></tr></table></figure>\n\n<p>##编码转换</p>\n<p>iconv list:列出所有的编码<br>iconv -f 原本编码 -t 新编码 filename [-o newfilw]<br>##vim的环境设置参数</p>\n<p>:set no或者:set number<br>:set hlsearch 设置高亮度搜寻<br>:set nohlsearch<br>:set autoindent 自动缩进<br>:set noautoindent 设置不自动缩进<br>:set backup 设置自动储存备份文件，一般设置为nobackup，如果为backup，每次更改一个文件时会自动产生一个<code>filename~</code>文件记录原始文件内容<br>:set ruler 显示右下角状态列<br>:set showmode 是否要显示–INSERT–之类的字眼<br>:set backspace=(012) 某些distribution不允许使用backspace删除字符，当设置值为2可以删除任意值，为0或1时，只能删除刚才输入的<br>:set all 显示目前所有的环境参数设置值<br>:set 显示与系统默认值不同的设置参数<br>:syntax on 程序相关语法显示不同颜色<br>:syntax off<br>:set bg=dark 显示不同的颜色色调<br>:set bg=light 编辑’~/.vimrc’文件，有或没有冒号都可以</p>\n<p>##其他相关操作<br><strong>virtualbox添加共享文件</strong><br>1 设置-添加共享文件，选择固定分配<br>2 添加挂载：sudo mount -t vboxsf rezb2b /mnt/rezb2b<br>3 自启动挂载命令：sudo vim /etc/rc.local 添加命令</p>\n"},{"title":"有用的代码段-php篇","date":"2020-01-16T04:34:10.000Z","_content":"# 分步骤执行\n```php\n<?php\n/**\n * @param mixed ...$args\n * @return bool\n * @throws Exception\n */\npublic function stepRun(...$args): bool\n{\n    $count = $args[0];\n    $method = $args[1];\n    $step = array_key_exists(2, $args) ? $args[2] : 10;\n    $limit = array_key_exists(3, $args) ? $args[3] : 10;\n    $param = array_key_exists(4, $args) ? $args[4] : '';\n    $stepCount = ceil($count / $step);\n    for ($nowStep = 0; $nowStep < $stepCount; $nowStep ++) {\n        $this->$method($limit, $nowStep * $step, $param);\n        sleep(1);\n    }\n    sleep(1);\n    return true;\n}\n?>\n```\n## 使用方法\n```php\n<?php\n$this->stepRun($groupChangeCount, 'loopGetData', 30, 30);\n?>\n```\n## 分析\n可运用于需要遍历数据库数据，对数据执行操作的功能上。\n# mongodb查询\n```php\n<?php\n/** 宜宾爱你宝贝\n * @return bool|int\n * @throws \\yii\\base\\InvalidConfigException\n */\npublic function checkAssign()\n{\n    $query = [\n        '$or' => [\n            ['isMarked' => false],\n            ['isMarked' => ['$exists' => false]]\n        ],\n        'faceChecked' => true,\n        'assignAuthor' => BackendCookieHelper::getName()];\n    if ($this->dao->conn->count($query) >= 20) {\n        return true;\n    } else {\n        unset($query['assignAuthor']);\n        return $this->assignToPerson($query);\n    }\n}\n?>\n```","source":"_posts/usefulCode1.md","raw":"---\ntitle: 有用的代码段-php篇\ndate: 2020-01-16 12:34:10\ntags: \n- tips\ncategories: \n- 工作经验\n---\n# 分步骤执行\n```php\n<?php\n/**\n * @param mixed ...$args\n * @return bool\n * @throws Exception\n */\npublic function stepRun(...$args): bool\n{\n    $count = $args[0];\n    $method = $args[1];\n    $step = array_key_exists(2, $args) ? $args[2] : 10;\n    $limit = array_key_exists(3, $args) ? $args[3] : 10;\n    $param = array_key_exists(4, $args) ? $args[4] : '';\n    $stepCount = ceil($count / $step);\n    for ($nowStep = 0; $nowStep < $stepCount; $nowStep ++) {\n        $this->$method($limit, $nowStep * $step, $param);\n        sleep(1);\n    }\n    sleep(1);\n    return true;\n}\n?>\n```\n## 使用方法\n```php\n<?php\n$this->stepRun($groupChangeCount, 'loopGetData', 30, 30);\n?>\n```\n## 分析\n可运用于需要遍历数据库数据，对数据执行操作的功能上。\n# mongodb查询\n```php\n<?php\n/** 宜宾爱你宝贝\n * @return bool|int\n * @throws \\yii\\base\\InvalidConfigException\n */\npublic function checkAssign()\n{\n    $query = [\n        '$or' => [\n            ['isMarked' => false],\n            ['isMarked' => ['$exists' => false]]\n        ],\n        'faceChecked' => true,\n        'assignAuthor' => BackendCookieHelper::getName()];\n    if ($this->dao->conn->count($query) >= 20) {\n        return true;\n    } else {\n        unset($query['assignAuthor']);\n        return $this->assignToPerson($query);\n    }\n}\n?>\n```","slug":"usefulCode1","published":1,"updated":"2021-07-23T01:58:27.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4keu005ml0xo5s3rbg5r","content":"<h1 id=\"分步骤执行\"><a href=\"#分步骤执行\" class=\"headerlink\" title=\"分步骤执行\"></a>分步骤执行</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mixed ...$args</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stepRun</span><span class=\"params\">(...$args)</span>: <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $count = $args[<span class=\"number\">0</span>];</span><br><span class=\"line\">    $method = $args[<span class=\"number\">1</span>];</span><br><span class=\"line\">    $step = array_key_exists(<span class=\"number\">2</span>, $args) ? $args[<span class=\"number\">2</span>] : <span class=\"number\">10</span>;</span><br><span class=\"line\">    $limit = array_key_exists(<span class=\"number\">3</span>, $args) ? $args[<span class=\"number\">3</span>] : <span class=\"number\">10</span>;</span><br><span class=\"line\">    $param = array_key_exists(<span class=\"number\">4</span>, $args) ? $args[<span class=\"number\">4</span>] : <span class=\"string\">''</span>;</span><br><span class=\"line\">    $stepCount = ceil($count / $step);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($nowStep = <span class=\"number\">0</span>; $nowStep &lt; $stepCount; $nowStep ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;$method($limit, $nowStep * $step, $param);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;stepRun($groupChangeCount, <span class=\"string\">'loopGetData'</span>, <span class=\"number\">30</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>可运用于需要遍历数据库数据，对数据执行操作的功能上。</p>\n<h1 id=\"mongodb查询\"><a href=\"#mongodb查询\" class=\"headerlink\" title=\"mongodb查询\"></a>mongodb查询</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/** 宜宾爱你宝贝</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool|int</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> \\yii\\base\\InvalidConfigException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAssign</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $query = [</span><br><span class=\"line\">        <span class=\"string\">'$or'</span> =&gt; [</span><br><span class=\"line\">            [<span class=\"string\">'isMarked'</span> =&gt; <span class=\"keyword\">false</span>],</span><br><span class=\"line\">            [<span class=\"string\">'isMarked'</span> =&gt; [<span class=\"string\">'$exists'</span> =&gt; <span class=\"keyword\">false</span>]]</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">'faceChecked'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'assignAuthor'</span> =&gt; BackendCookieHelper::getName()];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;dao-&gt;conn-&gt;count($query) &gt;= <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>($query[<span class=\"string\">'assignAuthor'</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;assignToPerson($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"分步骤执行\"><a href=\"#分步骤执行\" class=\"headerlink\" title=\"分步骤执行\"></a>分步骤执行</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mixed ...$args</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stepRun</span><span class=\"params\">(...$args)</span>: <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $count = $args[<span class=\"number\">0</span>];</span><br><span class=\"line\">    $method = $args[<span class=\"number\">1</span>];</span><br><span class=\"line\">    $step = array_key_exists(<span class=\"number\">2</span>, $args) ? $args[<span class=\"number\">2</span>] : <span class=\"number\">10</span>;</span><br><span class=\"line\">    $limit = array_key_exists(<span class=\"number\">3</span>, $args) ? $args[<span class=\"number\">3</span>] : <span class=\"number\">10</span>;</span><br><span class=\"line\">    $param = array_key_exists(<span class=\"number\">4</span>, $args) ? $args[<span class=\"number\">4</span>] : <span class=\"string\">''</span>;</span><br><span class=\"line\">    $stepCount = ceil($count / $step);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($nowStep = <span class=\"number\">0</span>; $nowStep &lt; $stepCount; $nowStep ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;$method($limit, $nowStep * $step, $param);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;stepRun($groupChangeCount, <span class=\"string\">'loopGetData'</span>, <span class=\"number\">30</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>可运用于需要遍历数据库数据，对数据执行操作的功能上。</p>\n<h1 id=\"mongodb查询\"><a href=\"#mongodb查询\" class=\"headerlink\" title=\"mongodb查询\"></a>mongodb查询</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/** 宜宾爱你宝贝</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool|int</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> \\yii\\base\\InvalidConfigException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAssign</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $query = [</span><br><span class=\"line\">        <span class=\"string\">'$or'</span> =&gt; [</span><br><span class=\"line\">            [<span class=\"string\">'isMarked'</span> =&gt; <span class=\"keyword\">false</span>],</span><br><span class=\"line\">            [<span class=\"string\">'isMarked'</span> =&gt; [<span class=\"string\">'$exists'</span> =&gt; <span class=\"keyword\">false</span>]]</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">'faceChecked'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'assignAuthor'</span> =&gt; BackendCookieHelper::getName()];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;dao-&gt;conn-&gt;count($query) &gt;= <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>($query[<span class=\"string\">'assignAuthor'</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;assignToPerson($query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"有用的代码段-ts篇","date":"2020-01-16T11:34:10.000Z","_content":"# 查询数组中值相等的\n```typescript\nmodules.modules.find(item => item.route === route).chinese\n\n```\n# ref调用子组件\n```typescript\n<FacePointsMarkTool ref={com => this.com = com} customRightRender={this.customRightRender} hideSaved={this.handleHideSaved} dataSource={dataSource} loadMore={this.getFaceData} isShowFacePlus saveFaceData={this.saveFaceData}></FacePointsMarkTool>\n```\n","source":"_posts/usefulCode2.md","raw":"---\ntitle: 有用的代码段-ts篇\ndate: 2020-01-16 19:34:10\ntags: \n- tips\ncategories: \n- 工作经验\n---\n# 查询数组中值相等的\n```typescript\nmodules.modules.find(item => item.route === route).chinese\n\n```\n# ref调用子组件\n```typescript\n<FacePointsMarkTool ref={com => this.com = com} customRightRender={this.customRightRender} hideSaved={this.handleHideSaved} dataSource={dataSource} loadMore={this.getFaceData} isShowFacePlus saveFaceData={this.saveFaceData}></FacePointsMarkTool>\n```\n","slug":"usefulCode2","published":1,"updated":"2021-07-23T01:58:27.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kex005pl0xo4kmo1pud","content":"<h1 id=\"查询数组中值相等的\"><a href=\"#查询数组中值相等的\" class=\"headerlink\" title=\"查询数组中值相等的\"></a>查询数组中值相等的</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules.modules.find(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.route === route).chinese</span><br></pre></td></tr></table></figure>\n<h1 id=\"ref调用子组件\"><a href=\"#ref调用子组件\" class=\"headerlink\" title=\"ref调用子组件\"></a>ref调用子组件</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FacePointsMarkTool ref=&#123;<span class=\"function\"><span class=\"params\">com</span> =&gt;</span> <span class=\"keyword\">this</span>.com = com&#125; customRightRender=&#123;<span class=\"keyword\">this</span>.customRightRender&#125; hideSaved=&#123;<span class=\"keyword\">this</span>.handleHideSaved&#125; dataSource=&#123;dataSource&#125; loadMore=&#123;<span class=\"keyword\">this</span>.getFaceData&#125; isShowFacePlus saveFaceData=&#123;<span class=\"keyword\">this</span>.saveFaceData&#125;&gt;&lt;<span class=\"regexp\">/FacePointsMarkTool&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"查询数组中值相等的\"><a href=\"#查询数组中值相等的\" class=\"headerlink\" title=\"查询数组中值相等的\"></a>查询数组中值相等的</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules.modules.find(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.route === route).chinese</span><br></pre></td></tr></table></figure>\n<h1 id=\"ref调用子组件\"><a href=\"#ref调用子组件\" class=\"headerlink\" title=\"ref调用子组件\"></a>ref调用子组件</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FacePointsMarkTool ref=&#123;<span class=\"function\"><span class=\"params\">com</span> =&gt;</span> <span class=\"keyword\">this</span>.com = com&#125; customRightRender=&#123;<span class=\"keyword\">this</span>.customRightRender&#125; hideSaved=&#123;<span class=\"keyword\">this</span>.handleHideSaved&#125; dataSource=&#123;dataSource&#125; loadMore=&#123;<span class=\"keyword\">this</span>.getFaceData&#125; isShowFacePlus saveFaceData=&#123;<span class=\"keyword\">this</span>.saveFaceData&#125;&gt;&lt;<span class=\"regexp\">/FacePointsMarkTool&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"各方法实现微信机器人对比","date":"2019-03-28T06:03:27.000Z","_content":"## wxpy\n直接排除，只有极少数人的微信可以使用，无法用来实现机器人；\n## 图灵机器人\n图灵机器人可以接入微信，也可以实现群管理，但是是通过第三方来实现的\n\n| 功能 | 详解 | 是否必要 |\n| --- | --- | --- |\n| 接入微信公众号 | 群自动回复 | 是 |\n| 主动触发回复 | 主动往群里发送消息 | 是 |\n| 定时发送 | 定时给群发送消息 | 是 |\n### 微群管家\n图灵机器人推荐的微信个人号接入第三方插件，但只有windows版本可用，不适用于mac版本开发，但可以实现自定义开发，文档比较全面*且免费*，可以作为备选方案    \n功能介绍：    \n\n| 功能 | 详解 | 是否必要 |\n| --- | --- | --- |\n| 关键词自动回复 | 群自动回复 | 是 |\n| 主动触发回复 | 主动往群里发送消息 | 是 |\n| 定时发送 | 定时给群发送消息 | 是 |\n\n收费情况如下：\n\n| 产品 | 功能 | 价格 |\n| --- | --- | --- |\n| --- | --- | 免费 |\n\n建议：建议使用微群管家，免费\n### 微友助手\n也是图灵机器人推荐的个人号接入第三方插件，有后台管理。    \n功能介绍：     \n\n| 功能 | 详解 | 是否必要 |\n| --- | --- | --- |\n| 机器人管理 | 扫码登录的用户作为机器人，无需邀请新人 | 是 |\n| 机器人管理 | 群数据下载，分析群数据，没太大意义 | 否 |\n| 定时群发 | 可以直接定时群发消息，支持多个群 | 是 |\n| 群分组管理 | 可以给群做一个分组，但是仅限付费群，需要调研收费情况 | 待定 |\n| 自动回复 | 设置关键词后机器人可根据关键词自动回复 | 是 |\n| 智能聊天 | @机器人后接入图灵机器人自动回复 | 待定 |\n| 群文件管理 | 自动保存群成员发到群内的文件，在群内@机器人，机器人将会回复群文件存放链接 | 是 |\n| 成员管理 | 管理用户，可设置群内权限，也可查看聊天记录 | 是 |\n| 踢人 | 需要机器人本身是群主才能踢人 | 是 |\n\n收费情况如下：\n\n| 产品 | 功能 | 价格 |\n| --- | --- | --- |\n| 微友助手精简版 | （机器人聊天+关键词回复）或 （机器人聊天+新人入群欢迎语）或 （机器人聊天+定时发送消息）或（机器人聊天+群数据分析）四选一| 79/群/年 |\n| 微友助手高级版 | 机器人聊天、群数据分析、新人入群欢迎语、关键词回复、定时群发 | 99/群/年 |\n| 微友助手旗舰版 | 高级版所有功能+潜水/邀请查询，管理员、关键词自动批量踢人，群签到，群精华，群文件管理，群名保护，重复群成员查询去重，发红包、链接、小程序智能提醒及更多扩展功能。 | 129/群/年 |\n| 微友助手企业版 | 包含旗舰版的所有功能，支持购买的群数范围内无限次换群。购买50个以上，问题优先处理，1对1VIP服务。 | 需要咨询 |\n\n建议：企业版，可以协调价格\n### chatie\n文档地址：https://docs.chatie.io/v/zh/api\n微群管家也是基于web开发的，微友助手和chatie是通过ipad方式登录，还可以用    \n功能介绍：与微友助手类似    \n\n收费情况：    \n如果web版微信可用，免费，否则通过ipad登录收费    \n\n| 产品 | 功能 | 价格 |\n| --- | --- | --- |\n| token | 提供一个类似于微信公众号token，必须自行开发 | 1920元/年 |\n| token | 提供一个类似于微信公众号token，可自行开发 | 1920/年 |\n","source":"_posts/wechat.md","raw":"---\ntitle: 各方法实现微信机器人对比\ndate: 2019-03-28 14:03:27\ncategories: \n- 其他\n---\n## wxpy\n直接排除，只有极少数人的微信可以使用，无法用来实现机器人；\n## 图灵机器人\n图灵机器人可以接入微信，也可以实现群管理，但是是通过第三方来实现的\n\n| 功能 | 详解 | 是否必要 |\n| --- | --- | --- |\n| 接入微信公众号 | 群自动回复 | 是 |\n| 主动触发回复 | 主动往群里发送消息 | 是 |\n| 定时发送 | 定时给群发送消息 | 是 |\n### 微群管家\n图灵机器人推荐的微信个人号接入第三方插件，但只有windows版本可用，不适用于mac版本开发，但可以实现自定义开发，文档比较全面*且免费*，可以作为备选方案    \n功能介绍：    \n\n| 功能 | 详解 | 是否必要 |\n| --- | --- | --- |\n| 关键词自动回复 | 群自动回复 | 是 |\n| 主动触发回复 | 主动往群里发送消息 | 是 |\n| 定时发送 | 定时给群发送消息 | 是 |\n\n收费情况如下：\n\n| 产品 | 功能 | 价格 |\n| --- | --- | --- |\n| --- | --- | 免费 |\n\n建议：建议使用微群管家，免费\n### 微友助手\n也是图灵机器人推荐的个人号接入第三方插件，有后台管理。    \n功能介绍：     \n\n| 功能 | 详解 | 是否必要 |\n| --- | --- | --- |\n| 机器人管理 | 扫码登录的用户作为机器人，无需邀请新人 | 是 |\n| 机器人管理 | 群数据下载，分析群数据，没太大意义 | 否 |\n| 定时群发 | 可以直接定时群发消息，支持多个群 | 是 |\n| 群分组管理 | 可以给群做一个分组，但是仅限付费群，需要调研收费情况 | 待定 |\n| 自动回复 | 设置关键词后机器人可根据关键词自动回复 | 是 |\n| 智能聊天 | @机器人后接入图灵机器人自动回复 | 待定 |\n| 群文件管理 | 自动保存群成员发到群内的文件，在群内@机器人，机器人将会回复群文件存放链接 | 是 |\n| 成员管理 | 管理用户，可设置群内权限，也可查看聊天记录 | 是 |\n| 踢人 | 需要机器人本身是群主才能踢人 | 是 |\n\n收费情况如下：\n\n| 产品 | 功能 | 价格 |\n| --- | --- | --- |\n| 微友助手精简版 | （机器人聊天+关键词回复）或 （机器人聊天+新人入群欢迎语）或 （机器人聊天+定时发送消息）或（机器人聊天+群数据分析）四选一| 79/群/年 |\n| 微友助手高级版 | 机器人聊天、群数据分析、新人入群欢迎语、关键词回复、定时群发 | 99/群/年 |\n| 微友助手旗舰版 | 高级版所有功能+潜水/邀请查询，管理员、关键词自动批量踢人，群签到，群精华，群文件管理，群名保护，重复群成员查询去重，发红包、链接、小程序智能提醒及更多扩展功能。 | 129/群/年 |\n| 微友助手企业版 | 包含旗舰版的所有功能，支持购买的群数范围内无限次换群。购买50个以上，问题优先处理，1对1VIP服务。 | 需要咨询 |\n\n建议：企业版，可以协调价格\n### chatie\n文档地址：https://docs.chatie.io/v/zh/api\n微群管家也是基于web开发的，微友助手和chatie是通过ipad方式登录，还可以用    \n功能介绍：与微友助手类似    \n\n收费情况：    \n如果web版微信可用，免费，否则通过ipad登录收费    \n\n| 产品 | 功能 | 价格 |\n| --- | --- | --- |\n| token | 提供一个类似于微信公众号token，必须自行开发 | 1920元/年 |\n| token | 提供一个类似于微信公众号token，可自行开发 | 1920/年 |\n","slug":"wechat","published":1,"updated":"2021-07-23T01:58:27.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kez005sl0xoejqybhtz","content":"<h2 id=\"wxpy\"><a href=\"#wxpy\" class=\"headerlink\" title=\"wxpy\"></a>wxpy</h2><p>直接排除，只有极少数人的微信可以使用，无法用来实现机器人；</p>\n<h2 id=\"图灵机器人\"><a href=\"#图灵机器人\" class=\"headerlink\" title=\"图灵机器人\"></a>图灵机器人</h2><p>图灵机器人可以接入微信，也可以实现群管理，但是是通过第三方来实现的</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>详解</th>\n<th>是否必要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>接入微信公众号</td>\n<td>群自动回复</td>\n<td>是</td>\n</tr>\n<tr>\n<td>主动触发回复</td>\n<td>主动往群里发送消息</td>\n<td>是</td>\n</tr>\n<tr>\n<td>定时发送</td>\n<td>定时给群发送消息</td>\n<td>是</td>\n</tr>\n<tr>\n<td>### 微群管家</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>图灵机器人推荐的微信个人号接入第三方插件，但只有windows版本可用，不适用于mac版本开发，但可以实现自定义开发，文档比较全面<em>且免费</em>，可以作为备选方案</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>功能介绍：</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>详解</th>\n<th>是否必要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>关键词自动回复</td>\n<td>群自动回复</td>\n<td>是</td>\n</tr>\n<tr>\n<td>主动触发回复</td>\n<td>主动往群里发送消息</td>\n<td>是</td>\n</tr>\n<tr>\n<td>定时发送</td>\n<td>定时给群发送消息</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>收费情况如下：</p>\n<table>\n<thead>\n<tr>\n<th>产品</th>\n<th>功能</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>—</td>\n<td>—</td>\n<td>免费</td>\n</tr>\n</tbody></table>\n<p>建议：建议使用微群管家，免费</p>\n<h3 id=\"微友助手\"><a href=\"#微友助手\" class=\"headerlink\" title=\"微友助手\"></a>微友助手</h3><p>也是图灵机器人推荐的个人号接入第三方插件，有后台管理。<br>功能介绍：     </p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>详解</th>\n<th>是否必要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>机器人管理</td>\n<td>扫码登录的用户作为机器人，无需邀请新人</td>\n<td>是</td>\n</tr>\n<tr>\n<td>机器人管理</td>\n<td>群数据下载，分析群数据，没太大意义</td>\n<td>否</td>\n</tr>\n<tr>\n<td>定时群发</td>\n<td>可以直接定时群发消息，支持多个群</td>\n<td>是</td>\n</tr>\n<tr>\n<td>群分组管理</td>\n<td>可以给群做一个分组，但是仅限付费群，需要调研收费情况</td>\n<td>待定</td>\n</tr>\n<tr>\n<td>自动回复</td>\n<td>设置关键词后机器人可根据关键词自动回复</td>\n<td>是</td>\n</tr>\n<tr>\n<td>智能聊天</td>\n<td>@机器人后接入图灵机器人自动回复</td>\n<td>待定</td>\n</tr>\n<tr>\n<td>群文件管理</td>\n<td>自动保存群成员发到群内的文件，在群内@机器人，机器人将会回复群文件存放链接</td>\n<td>是</td>\n</tr>\n<tr>\n<td>成员管理</td>\n<td>管理用户，可设置群内权限，也可查看聊天记录</td>\n<td>是</td>\n</tr>\n<tr>\n<td>踢人</td>\n<td>需要机器人本身是群主才能踢人</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>收费情况如下：</p>\n<table>\n<thead>\n<tr>\n<th>产品</th>\n<th>功能</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>微友助手精简版</td>\n<td>（机器人聊天+关键词回复）或 （机器人聊天+新人入群欢迎语）或 （机器人聊天+定时发送消息）或（机器人聊天+群数据分析）四选一</td>\n<td>79/群/年</td>\n</tr>\n<tr>\n<td>微友助手高级版</td>\n<td>机器人聊天、群数据分析、新人入群欢迎语、关键词回复、定时群发</td>\n<td>99/群/年</td>\n</tr>\n<tr>\n<td>微友助手旗舰版</td>\n<td>高级版所有功能+潜水/邀请查询，管理员、关键词自动批量踢人，群签到，群精华，群文件管理，群名保护，重复群成员查询去重，发红包、链接、小程序智能提醒及更多扩展功能。</td>\n<td>129/群/年</td>\n</tr>\n<tr>\n<td>微友助手企业版</td>\n<td>包含旗舰版的所有功能，支持购买的群数范围内无限次换群。购买50个以上，问题优先处理，1对1VIP服务。</td>\n<td>需要咨询</td>\n</tr>\n</tbody></table>\n<p>建议：企业版，可以协调价格</p>\n<h3 id=\"chatie\"><a href=\"#chatie\" class=\"headerlink\" title=\"chatie\"></a>chatie</h3><p>文档地址：<a href=\"https://docs.chatie.io/v/zh/api\" target=\"_blank\" rel=\"noopener\">https://docs.chatie.io/v/zh/api</a><br>微群管家也是基于web开发的，微友助手和chatie是通过ipad方式登录，还可以用<br>功能介绍：与微友助手类似    </p>\n<p>收费情况：<br>如果web版微信可用，免费，否则通过ipad登录收费    </p>\n<table>\n<thead>\n<tr>\n<th>产品</th>\n<th>功能</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>token</td>\n<td>提供一个类似于微信公众号token，必须自行开发</td>\n<td>1920元/年</td>\n</tr>\n<tr>\n<td>token</td>\n<td>提供一个类似于微信公众号token，可自行开发</td>\n<td>1920/年</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"wxpy\"><a href=\"#wxpy\" class=\"headerlink\" title=\"wxpy\"></a>wxpy</h2><p>直接排除，只有极少数人的微信可以使用，无法用来实现机器人；</p>\n<h2 id=\"图灵机器人\"><a href=\"#图灵机器人\" class=\"headerlink\" title=\"图灵机器人\"></a>图灵机器人</h2><p>图灵机器人可以接入微信，也可以实现群管理，但是是通过第三方来实现的</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>详解</th>\n<th>是否必要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>接入微信公众号</td>\n<td>群自动回复</td>\n<td>是</td>\n</tr>\n<tr>\n<td>主动触发回复</td>\n<td>主动往群里发送消息</td>\n<td>是</td>\n</tr>\n<tr>\n<td>定时发送</td>\n<td>定时给群发送消息</td>\n<td>是</td>\n</tr>\n<tr>\n<td>### 微群管家</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>图灵机器人推荐的微信个人号接入第三方插件，但只有windows版本可用，不适用于mac版本开发，但可以实现自定义开发，文档比较全面<em>且免费</em>，可以作为备选方案</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>功能介绍：</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>详解</th>\n<th>是否必要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>关键词自动回复</td>\n<td>群自动回复</td>\n<td>是</td>\n</tr>\n<tr>\n<td>主动触发回复</td>\n<td>主动往群里发送消息</td>\n<td>是</td>\n</tr>\n<tr>\n<td>定时发送</td>\n<td>定时给群发送消息</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>收费情况如下：</p>\n<table>\n<thead>\n<tr>\n<th>产品</th>\n<th>功能</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>—</td>\n<td>—</td>\n<td>免费</td>\n</tr>\n</tbody></table>\n<p>建议：建议使用微群管家，免费</p>\n<h3 id=\"微友助手\"><a href=\"#微友助手\" class=\"headerlink\" title=\"微友助手\"></a>微友助手</h3><p>也是图灵机器人推荐的个人号接入第三方插件，有后台管理。<br>功能介绍：     </p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>详解</th>\n<th>是否必要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>机器人管理</td>\n<td>扫码登录的用户作为机器人，无需邀请新人</td>\n<td>是</td>\n</tr>\n<tr>\n<td>机器人管理</td>\n<td>群数据下载，分析群数据，没太大意义</td>\n<td>否</td>\n</tr>\n<tr>\n<td>定时群发</td>\n<td>可以直接定时群发消息，支持多个群</td>\n<td>是</td>\n</tr>\n<tr>\n<td>群分组管理</td>\n<td>可以给群做一个分组，但是仅限付费群，需要调研收费情况</td>\n<td>待定</td>\n</tr>\n<tr>\n<td>自动回复</td>\n<td>设置关键词后机器人可根据关键词自动回复</td>\n<td>是</td>\n</tr>\n<tr>\n<td>智能聊天</td>\n<td>@机器人后接入图灵机器人自动回复</td>\n<td>待定</td>\n</tr>\n<tr>\n<td>群文件管理</td>\n<td>自动保存群成员发到群内的文件，在群内@机器人，机器人将会回复群文件存放链接</td>\n<td>是</td>\n</tr>\n<tr>\n<td>成员管理</td>\n<td>管理用户，可设置群内权限，也可查看聊天记录</td>\n<td>是</td>\n</tr>\n<tr>\n<td>踢人</td>\n<td>需要机器人本身是群主才能踢人</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>收费情况如下：</p>\n<table>\n<thead>\n<tr>\n<th>产品</th>\n<th>功能</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>微友助手精简版</td>\n<td>（机器人聊天+关键词回复）或 （机器人聊天+新人入群欢迎语）或 （机器人聊天+定时发送消息）或（机器人聊天+群数据分析）四选一</td>\n<td>79/群/年</td>\n</tr>\n<tr>\n<td>微友助手高级版</td>\n<td>机器人聊天、群数据分析、新人入群欢迎语、关键词回复、定时群发</td>\n<td>99/群/年</td>\n</tr>\n<tr>\n<td>微友助手旗舰版</td>\n<td>高级版所有功能+潜水/邀请查询，管理员、关键词自动批量踢人，群签到，群精华，群文件管理，群名保护，重复群成员查询去重，发红包、链接、小程序智能提醒及更多扩展功能。</td>\n<td>129/群/年</td>\n</tr>\n<tr>\n<td>微友助手企业版</td>\n<td>包含旗舰版的所有功能，支持购买的群数范围内无限次换群。购买50个以上，问题优先处理，1对1VIP服务。</td>\n<td>需要咨询</td>\n</tr>\n</tbody></table>\n<p>建议：企业版，可以协调价格</p>\n<h3 id=\"chatie\"><a href=\"#chatie\" class=\"headerlink\" title=\"chatie\"></a>chatie</h3><p>文档地址：<a href=\"https://docs.chatie.io/v/zh/api\" target=\"_blank\" rel=\"noopener\">https://docs.chatie.io/v/zh/api</a><br>微群管家也是基于web开发的，微友助手和chatie是通过ipad方式登录，还可以用<br>功能介绍：与微友助手类似    </p>\n<p>收费情况：<br>如果web版微信可用，免费，否则通过ipad登录收费    </p>\n<table>\n<thead>\n<tr>\n<th>产品</th>\n<th>功能</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>token</td>\n<td>提供一个类似于微信公众号token，必须自行开发</td>\n<td>1920元/年</td>\n</tr>\n<tr>\n<td>token</td>\n<td>提供一个类似于微信公众号token，可自行开发</td>\n<td>1920/年</td>\n</tr>\n</tbody></table>\n"},{"title":"使用go编写webassembly","date":"2019-12-10T04:34:10.000Z","_content":"# 使用go编写webassembly并在浏览器执行\n# 参考博客\n[用go写WebAssembly入门](https://www.cnblogs.com/baizx/p/9602581.html)\n## 下载安装\n[go](https://www.runoob.com/go/go-environment.html)\n## 编写测试文件hello.go\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        fmt.Println(\"Hello World!\")\n}\n```\n## 生成wasm文件\n``` GOARCH=wasm GOOS=js go build -o hello.wasm hello.go```\n在windows下需要先设置环境变量：``` $env:GOARCH=\"wasm\";$env:GOOS=\"js\"; ```\n## 添加依赖\n``` \ncp $(go env GOROOT)/misc/wasm/wasm_exec.{html,js} . \n```\n## 添加一个测试http服务器\n``` \n//http.go\npackage main\n\nimport (\n    \"flag\"\n    \"log\"\n    \"net/http\"\n    \"strings\"\n)\n\nvar (\n    listen = flag.String(\"listen\", \":8080\", \"listen address\")\n    dir    = flag.String(\"dir\", \".\", \"directory to serve\")\n)\n\nfunc main() {\n    flag.Parse()\n    log.Printf(\"listening on %q...\", *listen)\n    log.Fatal(http.ListenAndServe(*listen, http.HandlerFunc(func(resp http.ResponseWriter, req *http.Request) {\n        if strings.HasSuffix(req.URL.Path, \".wasm\") {\n            resp.Header().Set(\"content-type\", \"application/wasm\")\n        }\n\n        http.FileServer(http.Dir(*dir)).ServeHTTP(resp, req)\n    })))\n}\n```\n## 执行\ngo run http.go\n## 查看效果\n浏览器打开http://localhost:8080/wasm_exec.html，点击run，控制台可以看到效果\n## node执行\n``` \nnode wasm_exec.js test.wasm\n```\n","source":"_posts/webassembly_go_1.md","raw":"---\ntitle: 使用go编写webassembly\ndate: 2019-12-10 12:34:10\ntags: \n- go\ncategories:\n - 学习\n---\n# 使用go编写webassembly并在浏览器执行\n# 参考博客\n[用go写WebAssembly入门](https://www.cnblogs.com/baizx/p/9602581.html)\n## 下载安装\n[go](https://www.runoob.com/go/go-environment.html)\n## 编写测试文件hello.go\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        fmt.Println(\"Hello World!\")\n}\n```\n## 生成wasm文件\n``` GOARCH=wasm GOOS=js go build -o hello.wasm hello.go```\n在windows下需要先设置环境变量：``` $env:GOARCH=\"wasm\";$env:GOOS=\"js\"; ```\n## 添加依赖\n``` \ncp $(go env GOROOT)/misc/wasm/wasm_exec.{html,js} . \n```\n## 添加一个测试http服务器\n``` \n//http.go\npackage main\n\nimport (\n    \"flag\"\n    \"log\"\n    \"net/http\"\n    \"strings\"\n)\n\nvar (\n    listen = flag.String(\"listen\", \":8080\", \"listen address\")\n    dir    = flag.String(\"dir\", \".\", \"directory to serve\")\n)\n\nfunc main() {\n    flag.Parse()\n    log.Printf(\"listening on %q...\", *listen)\n    log.Fatal(http.ListenAndServe(*listen, http.HandlerFunc(func(resp http.ResponseWriter, req *http.Request) {\n        if strings.HasSuffix(req.URL.Path, \".wasm\") {\n            resp.Header().Set(\"content-type\", \"application/wasm\")\n        }\n\n        http.FileServer(http.Dir(*dir)).ServeHTTP(resp, req)\n    })))\n}\n```\n## 执行\ngo run http.go\n## 查看效果\n浏览器打开http://localhost:8080/wasm_exec.html，点击run，控制台可以看到效果\n## node执行\n``` \nnode wasm_exec.js test.wasm\n```\n","slug":"webassembly_go_1","published":1,"updated":"2021-07-23T01:58:27.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kf1005wl0xo8v7i3f6t","content":"<h1 id=\"使用go编写webassembly并在浏览器执行\"><a href=\"#使用go编写webassembly并在浏览器执行\" class=\"headerlink\" title=\"使用go编写webassembly并在浏览器执行\"></a>使用go编写webassembly并在浏览器执行</h1><h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><p><a href=\"https://www.cnblogs.com/baizx/p/9602581.html\" target=\"_blank\" rel=\"noopener\">用go写WebAssembly入门</a></p>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><p><a href=\"https://www.runoob.com/go/go-environment.html\" target=\"_blank\" rel=\"noopener\">go</a></p>\n<h2 id=\"编写测试文件hello-go\"><a href=\"#编写测试文件hello-go\" class=\"headerlink\" title=\"编写测试文件hello.go\"></a>编写测试文件hello.go</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;Hello World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成wasm文件\"><a href=\"#生成wasm文件\" class=\"headerlink\" title=\"生成wasm文件\"></a>生成wasm文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在windows下需要先设置环境变量：&#96;&#96;&#96; $env:GOARCH&#x3D;&quot;wasm&quot;;$env:GOOS&#x3D;&quot;js&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp $(go env GOROOT)&#x2F;misc&#x2F;wasm&#x2F;wasm_exec.&#123;html,js&#125; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加一个测试http服务器\"><a href=\"#添加一个测试http服务器\" class=\"headerlink\" title=\"添加一个测试http服务器\"></a>添加一个测试http服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;http.go</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;flag&quot;</span><br><span class=\"line\">    &quot;log&quot;</span><br><span class=\"line\">    &quot;net&#x2F;http&quot;</span><br><span class=\"line\">    &quot;strings&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    listen &#x3D; flag.String(&quot;listen&quot;, &quot;:8080&quot;, &quot;listen address&quot;)</span><br><span class=\"line\">    dir    &#x3D; flag.String(&quot;dir&quot;, &quot;.&quot;, &quot;directory to serve&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    flag.Parse()</span><br><span class=\"line\">    log.Printf(&quot;listening on %q...&quot;, *listen)</span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(*listen, http.HandlerFunc(func(resp http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        if strings.HasSuffix(req.URL.Path, &quot;.wasm&quot;) &#123;</span><br><span class=\"line\">            resp.Header().Set(&quot;content-type&quot;, &quot;application&#x2F;wasm&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        http.FileServer(http.Dir(*dir)).ServeHTTP(resp, req)</span><br><span class=\"line\">    &#125;)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>go run http.go</p>\n<h2 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h2><p>浏览器打开<a href=\"http://localhost:8080/wasm_exec.html，点击run，控制台可以看到效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/wasm_exec.html，点击run，控制台可以看到效果</a></p>\n<h2 id=\"node执行\"><a href=\"#node执行\" class=\"headerlink\" title=\"node执行\"></a>node执行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node wasm_exec.js test.wasm</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用go编写webassembly并在浏览器执行\"><a href=\"#使用go编写webassembly并在浏览器执行\" class=\"headerlink\" title=\"使用go编写webassembly并在浏览器执行\"></a>使用go编写webassembly并在浏览器执行</h1><h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><p><a href=\"https://www.cnblogs.com/baizx/p/9602581.html\" target=\"_blank\" rel=\"noopener\">用go写WebAssembly入门</a></p>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><p><a href=\"https://www.runoob.com/go/go-environment.html\" target=\"_blank\" rel=\"noopener\">go</a></p>\n<h2 id=\"编写测试文件hello-go\"><a href=\"#编写测试文件hello-go\" class=\"headerlink\" title=\"编写测试文件hello.go\"></a>编写测试文件hello.go</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;Hello World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成wasm文件\"><a href=\"#生成wasm文件\" class=\"headerlink\" title=\"生成wasm文件\"></a>生成wasm文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在windows下需要先设置环境变量：&#96;&#96;&#96; $env:GOARCH&#x3D;&quot;wasm&quot;;$env:GOOS&#x3D;&quot;js&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp $(go env GOROOT)&#x2F;misc&#x2F;wasm&#x2F;wasm_exec.&#123;html,js&#125; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加一个测试http服务器\"><a href=\"#添加一个测试http服务器\" class=\"headerlink\" title=\"添加一个测试http服务器\"></a>添加一个测试http服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;http.go</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;flag&quot;</span><br><span class=\"line\">    &quot;log&quot;</span><br><span class=\"line\">    &quot;net&#x2F;http&quot;</span><br><span class=\"line\">    &quot;strings&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    listen &#x3D; flag.String(&quot;listen&quot;, &quot;:8080&quot;, &quot;listen address&quot;)</span><br><span class=\"line\">    dir    &#x3D; flag.String(&quot;dir&quot;, &quot;.&quot;, &quot;directory to serve&quot;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    flag.Parse()</span><br><span class=\"line\">    log.Printf(&quot;listening on %q...&quot;, *listen)</span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(*listen, http.HandlerFunc(func(resp http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">        if strings.HasSuffix(req.URL.Path, &quot;.wasm&quot;) &#123;</span><br><span class=\"line\">            resp.Header().Set(&quot;content-type&quot;, &quot;application&#x2F;wasm&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        http.FileServer(http.Dir(*dir)).ServeHTTP(resp, req)</span><br><span class=\"line\">    &#125;)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>go run http.go</p>\n<h2 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h2><p>浏览器打开<a href=\"http://localhost:8080/wasm_exec.html，点击run，控制台可以看到效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/wasm_exec.html，点击run，控制台可以看到效果</a></p>\n<h2 id=\"node执行\"><a href=\"#node执行\" class=\"headerlink\" title=\"node执行\"></a>node执行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node wasm_exec.js test.wasm</span><br></pre></td></tr></table></figure>\n"},{"title":"工作经验总结","date":"2019-10-05T09:40:10.000Z","_content":"## 工作经验\n（1）学会控制情绪\n","source":"_posts/work.md","raw":"---\ntitle: 工作经验总结\ndate: 2019-10-05 17:40:10\ntags: \n- 学习\ncategories: \n- 工作经验\n---\n## 工作经验\n（1）学会控制情绪\n","slug":"work","published":1,"updated":"2021-07-23T01:58:27.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrft4kf2005zl0xo4yn647b3","content":"<h2 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h2><p>（1）学会控制情绪</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h2><p>（1）学会控制情绪</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrft4kcp0007l0xohxic3zf7","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kd2000wl0xoajuy72et"},{"post_id":"ckrft4kcp0007l0xohxic3zf7","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4kd30010l0xo5qv3etcv"},{"post_id":"ckrft4kci0001l0xo7pib9gmh","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kd40013l0xo680rb72m"},{"post_id":"ckrft4kci0001l0xo7pib9gmh","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4kd50016l0xo1wnw6vue"},{"post_id":"ckrft4kcq0008l0xo56zscqdx","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kd60019l0xobu5p9teq"},{"post_id":"ckrft4kcq0008l0xo56zscqdx","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4kda001dl0xoh2wt274z"},{"post_id":"ckrft4kcj0003l0xo1omr28bu","category_id":"ckrft4kcq0009l0xofv4z5ua9","_id":"ckrft4kde001ol0xoes38gcyp"},{"post_id":"ckrft4kcj0003l0xo1omr28bu","category_id":"ckrft4kd6001al0xogr1japn7","_id":"ckrft4kdg001sl0xoba3r781l"},{"post_id":"ckrft4kct000el0xod2qs26cl","category_id":"ckrft4kdc001il0xoct575cgq","_id":"ckrft4kdg001vl0xoag9y1c62"},{"post_id":"ckrft4kcn0006l0xo3lru3qyr","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kdl0028l0xoh2xud07n"},{"post_id":"ckrft4kcn0006l0xo3lru3qyr","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4kdm002bl0xofjnb8ldd"},{"post_id":"ckrft4kcw000jl0xobnd0e91y","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kdn002el0xo5z8m73am"},{"post_id":"ckrft4kcy000ml0xogmqi7w8c","category_id":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kdp002ml0xo01kt7vdo"},{"post_id":"ckrft4kcs000cl0xobbhgamd0","category_id":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kdy003dl0xo4mhycyl0"},{"post_id":"ckrft4kcs000cl0xobbhgamd0","category_id":"ckrft4kdv0034l0xog3ml8bvv","_id":"ckrft4kdz003hl0xoeyv066xh"},{"post_id":"ckrft4kd9001bl0xog71oem7c","category_id":"ckrft4kdx0039l0xo738ogsub","_id":"ckrft4ke1003ll0xo8t8q7nxw"},{"post_id":"ckrft4kda001fl0xo47h12fgp","category_id":"ckrft4kdx0039l0xo738ogsub","_id":"ckrft4ke2003ql0xofq7qawub"},{"post_id":"ckrft4ke3003rl0xoc375ch7q","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4ke6003yl0xoh698dok9"},{"post_id":"ckrft4ke3003rl0xoc375ch7q","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4ke70042l0xo5m8chx2y"},{"post_id":"ckrft4kcv000hl0xo0vmt98n5","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kec004fl0xo8scp8u3f"},{"post_id":"ckrft4kcv000hl0xo0vmt98n5","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4ked004il0xofsljcjj7"},{"post_id":"ckrft4keb004dl0xofijgh38n","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4ked004ll0xo22ro9vc0"},{"post_id":"ckrft4keb004dl0xofijgh38n","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4kee004ol0xo0kkl281a"},{"post_id":"ckrft4kdg001ul0xo7ozj4l99","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kef004ql0xogdxm4yy8"},{"post_id":"ckrft4kdg001ul0xo7ozj4l99","category_id":"ckrft4kea004cl0xobbeeccpu","_id":"ckrft4kei004tl0xo1jgq32kr"},{"post_id":"ckrft4keb004el0xohr9le6uz","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kej004vl0xo5dkacn2m"},{"post_id":"ckrft4keb004el0xohr9le6uz","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kel004yl0xo2f9qgkw3"},{"post_id":"ckrft4kec004hl0xobyl6gs24","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kem0050l0xo8r4hbzp3"},{"post_id":"ckrft4kec004hl0xobyl6gs24","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4keo0054l0xogp6o2f72"},{"post_id":"ckrft4kdh001yl0xogk4t9x7z","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kep0056l0xo5dq16xzs"},{"post_id":"ckrft4kdh001yl0xogk4t9x7z","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4keq0059l0xo31uf442b"},{"post_id":"ckrft4ked004kl0xocgj72eup","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4keq005bl0xo6bkkfvdb"},{"post_id":"ckrft4ked004kl0xocgj72eup","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4ker005fl0xof17d5kpr"},{"post_id":"ckrft4kee004nl0xo2guw6hgy","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kes005hl0xob1ibeqmk"},{"post_id":"ckrft4kee004nl0xo2guw6hgy","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4ket005kl0xofc8rffjx"},{"post_id":"ckrft4kef004pl0xob3g2bj9n","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kev005nl0xo2sof3f7n"},{"post_id":"ckrft4kef004pl0xob3g2bj9n","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4key005ql0xo1emvgri8"},{"post_id":"ckrft4keg004sl0xo9uzacpye","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kf0005ul0xo5dbl3g8n"},{"post_id":"ckrft4keg004sl0xo9uzacpye","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4kf1005xl0xo046vdjxg"},{"post_id":"ckrft4kdk0026l0xoe6jegmc0","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kf30061l0xo8a1s90w2"},{"post_id":"ckrft4kdk0026l0xoe6jegmc0","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kf40063l0xoe69nbxco"},{"post_id":"ckrft4kdl002al0xo3xophloo","category_id":"ckrft4kej004wl0xo8dky3voj","_id":"ckrft4kf50067l0xoalckad2e"},{"post_id":"ckrft4kem004zl0xo9mcs1dnz","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kf50069l0xo4inqgg0q"},{"post_id":"ckrft4kem004zl0xo9mcs1dnz","category_id":"ckrft4kcx000kl0xofoyecxg0","_id":"ckrft4kf6006bl0xo8t4l4bmy"},{"post_id":"ckrft4kdm002dl0xohrk4643r","category_id":"ckrft4ken0051l0xo4vbc5baz","_id":"ckrft4kf6006dl0xo0sy4gvdq"},{"post_id":"ckrft4kep0058l0xoaivz1twr","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kf6006fl0xo9itgebi3"},{"post_id":"ckrft4kep0058l0xoaivz1twr","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kf6006gl0xo5m8p5dcv"},{"post_id":"ckrft4keq005al0xod04a6sn9","category_id":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kf7006il0xoeasy3hvo"},{"post_id":"ckrft4keq005al0xod04a6sn9","category_id":"ckrft4kep0057l0xo4nvm2rx7","_id":"ckrft4kf7006jl0xo8kao2yc9"},{"post_id":"ckrft4kdo002kl0xo1hw47wfn","category_id":"ckrft4kej004wl0xo8dky3voj","_id":"ckrft4kf7006ll0xo8vosbvmb"},{"post_id":"ckrft4kes005il0xo5xwm79eo","category_id":"ckrft4kdc001il0xoct575cgq","_id":"ckrft4kf7006ml0xoadrr9jav"},{"post_id":"ckrft4kd1000ul0xogfp854n0","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kf8006nl0xo6bjba6uv"},{"post_id":"ckrft4kd1000ul0xogfp854n0","category_id":"ckrft4kdn002hl0xohb5lce3n","_id":"ckrft4kf9006pl0xodx286h48"},{"post_id":"ckrft4kd1000ul0xogfp854n0","category_id":"ckrft4ket005jl0xo9cbm2cjg","_id":"ckrft4kf9006ql0xo7wroak9s"},{"post_id":"ckrft4kf1005wl0xo8v7i3f6t","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kf9006sl0xo0zvrbl10"},{"post_id":"ckrft4kd30011l0xo3iuv7vef","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kf9006tl0xoh6mmglq5"},{"post_id":"ckrft4kd30011l0xo3iuv7vef","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kfa006vl0xo3q8hgd83"},{"post_id":"ckrft4kdr002tl0xobgvw1d19","category_id":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kfa006wl0xohv7l0xyg"},{"post_id":"ckrft4kdr002tl0xobgvw1d19","category_id":"ckrft4kf40064l0xo0ecj3qpb","_id":"ckrft4kfa006yl0xogepp7y15"},{"post_id":"ckrft4kds002wl0xo74wu02rc","category_id":"ckrft4kf6006al0xo2yo029yl","_id":"ckrft4kfa006zl0xoe360ajn9"},{"post_id":"ckrft4kd40015l0xo3yfa2cuz","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfa0071l0xo21lf88ic"},{"post_id":"ckrft4kd40015l0xo3yfa2cuz","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kfb0072l0xo59186yfa"},{"post_id":"ckrft4kds002yl0xo4cxz70ss","category_id":"ckrft4kf6006al0xo2yo029yl","_id":"ckrft4kfb0074l0xohdwr59vo"},{"post_id":"ckrft4kdt0031l0xo4x8n0tdd","category_id":"ckrft4kf7006kl0xoh3ha0jq0","_id":"ckrft4kfc0075l0xo7k02fdro"},{"post_id":"ckrft4kd50018l0xogk5x7b3e","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfc0076l0xo6jok6o02"},{"post_id":"ckrft4kd50018l0xogk5x7b3e","category_id":"ckrft4kf9006ol0xo0q2l6gqv","_id":"ckrft4kfc0078l0xo9s2tctxh"},{"post_id":"ckrft4kdz003gl0xodgtfc34b","category_id":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kfd0079l0xohillhyg8"},{"post_id":"ckrft4kdz003gl0xodgtfc34b","category_id":"ckrft4kfb0073l0xo5xamdt3j","_id":"ckrft4kfe007bl0xo7wqv40x9"},{"post_id":"ckrft4ke0003jl0xo19g2d4tb","category_id":"ckrft4kfc0077l0xoenre08oh","_id":"ckrft4kfe007dl0xo4k1fcrq7"},{"post_id":"ckrft4ke1003ml0xo0pc7ew2k","category_id":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kff007fl0xo79ief4ep"},{"post_id":"ckrft4ke1003ml0xo0pc7ew2k","category_id":"ckrft4kfb0073l0xo5xamdt3j","_id":"ckrft4kff007gl0xofwt5eavj"},{"post_id":"ckrft4kdc001hl0xo6p71390z","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfg007hl0xogu4t9qbx"},{"post_id":"ckrft4kdc001hl0xo6p71390z","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kfg007jl0xohbuwgdak"},{"post_id":"ckrft4ke2003ol0xo6s5f51fa","category_id":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kfg007kl0xodkar6y2p"},{"post_id":"ckrft4ke2003ol0xo6s5f51fa","category_id":"ckrft4kff007el0xod0ac7wcb","_id":"ckrft4kfh007ml0xo6yzj02wh"},{"post_id":"ckrft4kdd001ll0xo7cw5a70q","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfh007ol0xobs673ha8"},{"post_id":"ckrft4kdd001ll0xo7cw5a70q","category_id":"ckrft4kfg007il0xo7khhce4o","_id":"ckrft4kfi007pl0xodfmve293"},{"post_id":"ckrft4ke3003sl0xofihc6ncj","category_id":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kfi007rl0xoahrf2yyo"},{"post_id":"ckrft4ke3003sl0xofihc6ncj","category_id":"ckrft4kff007el0xod0ac7wcb","_id":"ckrft4kfi007sl0xobs1213y3"},{"post_id":"ckrft4ke4003wl0xohve38yoj","category_id":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kfj007ul0xog0a3f2v8"},{"post_id":"ckrft4ke4003wl0xohve38yoj","category_id":"ckrft4kff007el0xod0ac7wcb","_id":"ckrft4kfj007vl0xobt96e3m9"},{"post_id":"ckrft4kde001nl0xoe2sjg4bm","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfk007xl0xo7u558543"},{"post_id":"ckrft4kde001nl0xoe2sjg4bm","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kfk007yl0xodcc1ftuo"},{"post_id":"ckrft4ke5003xl0xogvk2dv56","category_id":"ckrft4kfa006xl0xo34cvc2vu","_id":"ckrft4kfk0080l0xo24ik8k1x"},{"post_id":"ckrft4ke70040l0xodidygxr6","category_id":"ckrft4kd40012l0xo0uv11kui","_id":"ckrft4kfl0082l0xo260oef7n"},{"post_id":"ckrft4ke70040l0xodidygxr6","category_id":"ckrft4kff007el0xod0ac7wcb","_id":"ckrft4kfm0083l0xo6xuscikx"},{"post_id":"ckrft4ke70043l0xob4uk2tf3","category_id":"ckrft4kfa006xl0xo34cvc2vu","_id":"ckrft4kfm0084l0xo0jke1bez"},{"post_id":"ckrft4kdf001rl0xoepbmg6j2","category_id":"ckrft4ke6003zl0xof68mfrc8","_id":"ckrft4kfn0087l0xoangr8lxo"},{"post_id":"ckrft4kdf001rl0xoepbmg6j2","category_id":"ckrft4kfl0081l0xohld87a5l","_id":"ckrft4kfn0088l0xo9aik6j9v"},{"post_id":"ckrft4ke80046l0xogmafawuz","category_id":"ckrft4kfa006xl0xo34cvc2vu","_id":"ckrft4kfn008al0xo1faignaz"},{"post_id":"ckrft4ke90048l0xog6xuallt","category_id":"ckrft4kfc0077l0xoenre08oh","_id":"ckrft4kfo008cl0xof0yn0x65"},{"post_id":"ckrft4kea004al0xohjz217wk","category_id":"ckrft4kfc0077l0xoenre08oh","_id":"ckrft4kfo008dl0xoat2d6vcc"},{"post_id":"ckrft4kdj0023l0xo1l5vae6v","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfp008gl0xogiigau3v"},{"post_id":"ckrft4kdj0023l0xo1l5vae6v","category_id":"ckrft4ke80045l0xo3pfzhr2k","_id":"ckrft4kfp008hl0xo94ya8mep"},{"post_id":"ckrft4kdj0023l0xo1l5vae6v","category_id":"ckrft4kfn008bl0xo70a67bni","_id":"ckrft4kft008jl0xo428l5w4v"},{"post_id":"ckrft4kei004ul0xo9r9b5sc9","category_id":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kft008kl0xo5uxfci94"},{"post_id":"ckrft4kei004ul0xo9r9b5sc9","category_id":"ckrft4kep0057l0xo4nvm2rx7","_id":"ckrft4kft008ml0xo8rowa61m"},{"post_id":"ckrft4kej004xl0xodds85uov","category_id":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kft008nl0xoahzb6se1"},{"post_id":"ckrft4kej004xl0xodds85uov","category_id":"ckrft4kep0057l0xo4nvm2rx7","_id":"ckrft4kfu008pl0xogh0j24iy"},{"post_id":"ckrft4ken0053l0xo3snq6g71","category_id":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kfu008ql0xo62nyezeq"},{"post_id":"ckrft4ken0053l0xo3snq6g71","category_id":"ckrft4kep0057l0xo4nvm2rx7","_id":"ckrft4kfv008rl0xo04ng168a"},{"post_id":"ckrft4keo0055l0xo8i0sfae3","category_id":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kfv008tl0xo0xvm6cp1"},{"post_id":"ckrft4keo0055l0xo8i0sfae3","category_id":"ckrft4kep0057l0xo4nvm2rx7","_id":"ckrft4kfw008ul0xo4xdxd5jd"},{"post_id":"ckrft4kdn002il0xo8w2tgxq6","category_id":"ckrft4kdl0027l0xoh02fhlcu","_id":"ckrft4kfw008wl0xocpzm8cpn"},{"post_id":"ckrft4kdn002il0xo8w2tgxq6","category_id":"ckrft4kep0057l0xo4nvm2rx7","_id":"ckrft4kfx008xl0xodiec91kv"},{"post_id":"ckrft4kdn002il0xo8w2tgxq6","category_id":"ckrft4kfu008ol0xo9xf0aukk","_id":"ckrft4kfx008zl0xohm15fe3l"},{"post_id":"ckrft4ker005dl0xo80xxd6j7","category_id":"ckrft4kcl0004l0xoe8iagz33","_id":"ckrft4kfx0090l0xo0fuj8hca"},{"post_id":"ckrft4ker005dl0xo80xxd6j7","category_id":"ckrft4kdn002hl0xohb5lce3n","_id":"ckrft4kfx0092l0xoao32a2yh"},{"post_id":"ckrft4ker005dl0xo80xxd6j7","category_id":"ckrft4kfv008sl0xob8xxcdxv","_id":"ckrft4kfx0093l0xoaavb81bz"},{"post_id":"ckrft4kes005gl0xo0j653kzg","category_id":"ckrft4kdf001pl0xo7wgz8cgk","_id":"ckrft4kfy0095l0xoah2c3e6k"},{"post_id":"ckrft4kes005gl0xo0j653kzg","category_id":"ckrft4kfw008vl0xoeno1fz5j","_id":"ckrft4kfy0096l0xo77sh8tqk"},{"post_id":"ckrft4keu005ml0xo5s3rbg5r","category_id":"ckrft4kfx008yl0xobq7153du","_id":"ckrft4kfy0097l0xo6aw6asqh"},{"post_id":"ckrft4kex005pl0xo4kmo1pud","category_id":"ckrft4kfx008yl0xobq7153du","_id":"ckrft4kfy0099l0xo5vwaesoj"},{"post_id":"ckrft4kez005sl0xoejqybhtz","category_id":"ckrft4kfy0094l0xo6npkbwr9","_id":"ckrft4kfz009al0xo1mww73na"},{"post_id":"ckrft4kf2005zl0xo4yn647b3","category_id":"ckrft4kfx008yl0xobq7153du","_id":"ckrft4kfz009dl0xo96db6e67"},{"post_id":"ckrft4kdp002nl0xo5mx5dfnv","category_id":"ckrft4key005rl0xodia72bkr","_id":"ckrft4kg1009jl0xo4ce3g9io"},{"post_id":"ckrft4kdp002nl0xo5mx5dfnv","category_id":"ckrft4kfy0098l0xog5nxh1ms","_id":"ckrft4kg1009ll0xo1xfr4g8a"},{"post_id":"ckrft4kdp002nl0xo5mx5dfnv","category_id":"ckrft4kg1009hl0xoasi19214","_id":"ckrft4kg2009ml0xofcpx3iyc"},{"post_id":"ckrft4kdu0033l0xo5nth7zdl","category_id":"ckrft4kf9006rl0xo69dkgf7t","_id":"ckrft4kg2009ol0xo3xwd2kop"},{"post_id":"ckrft4kdu0033l0xo5nth7zdl","category_id":"ckrft4kfz009cl0xocigd1358","_id":"ckrft4kg2009pl0xoh48fb6a1"},{"post_id":"ckrft4kdu0033l0xo5nth7zdl","category_id":"ckrft4kg1009il0xod3ym8hpy","_id":"ckrft4kg2009rl0xo4kyn7vg3"},{"post_id":"ckrft4kdv0036l0xo0o2k1elk","category_id":"ckrft4kf9006rl0xo69dkgf7t","_id":"ckrft4kg2009sl0xoa1x51y5a"},{"post_id":"ckrft4kdv0036l0xo0o2k1elk","category_id":"ckrft4kfz009cl0xocigd1358","_id":"ckrft4kg2009tl0xo43btfbyp"},{"post_id":"ckrft4kdv0036l0xo0o2k1elk","category_id":"ckrft4kg1009kl0xo2igjbb1u","_id":"ckrft4kg2009ul0xoc6323xi9"},{"post_id":"ckrft4kdx003bl0xobl3hh2i0","category_id":"ckrft4kfa006xl0xo34cvc2vu","_id":"ckrft4kg3009vl0xoch323wup"},{"post_id":"ckrft4kdx003bl0xobl3hh2i0","category_id":"ckrft4kg0009fl0xog8hb5ti3","_id":"ckrft4kg3009wl0xo9mtwgywa"},{"post_id":"ckrft4kdx003bl0xobl3hh2i0","category_id":"ckrft4kg2009nl0xo5800ej9p","_id":"ckrft4kg3009xl0xoc7c9dasw"},{"post_id":"ckrft4kdy003cl0xo0d96b8ox","category_id":"ckrft4kfa006xl0xo34cvc2vu","_id":"ckrft4kg3009yl0xo98kv76qa"},{"post_id":"ckrft4kdy003cl0xo0d96b8ox","category_id":"ckrft4kg0009fl0xog8hb5ti3","_id":"ckrft4kg3009zl0xo5f188u75"},{"post_id":"ckrft4kdy003cl0xo0d96b8ox","category_id":"ckrft4kg2009ql0xoesq1ht9u","_id":"ckrft4kg300a0l0xoatbbcg8p"}],"PostTag":[{"post_id":"ckrft4kci0001l0xo7pib9gmh","tag_id":"ckrft4kcn0005l0xo8w9139rl","_id":"ckrft4kcr000bl0xo41fvaz4v"},{"post_id":"ckrft4kcq0008l0xo56zscqdx","tag_id":"ckrft4kcn0005l0xo8w9139rl","_id":"ckrft4kcs000dl0xohhuc3ufz"},{"post_id":"ckrft4kcj0003l0xo1omr28bu","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kcv000il0xo8c9hcghs"},{"post_id":"ckrft4kcn0006l0xo3lru3qyr","tag_id":"ckrft4kcn0005l0xo8w9139rl","_id":"ckrft4kcy000nl0xo0c5p6tsx"},{"post_id":"ckrft4kcw000jl0xobnd0e91y","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kcz000pl0xohf219j5f"},{"post_id":"ckrft4kcp0007l0xohxic3zf7","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kd0000tl0xo9q2qargx"},{"post_id":"ckrft4kcs000cl0xobbhgamd0","tag_id":"ckrft4kcz000ql0xo1rk37uxj","_id":"ckrft4kd3000zl0xof7dgapoj"},{"post_id":"ckrft4kct000el0xod2qs26cl","tag_id":"ckrft4kd2000xl0xohg9bf9q2","_id":"ckrft4kd50017l0xo6saw0bza"},{"post_id":"ckrft4kd50018l0xogk5x7b3e","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kda001el0xo0l65b6vd"},{"post_id":"ckrft4kcv000hl0xo0vmt98n5","tag_id":"ckrft4kd40014l0xo00yt050y","_id":"ckrft4kdb001gl0xo6i6n60lz"},{"post_id":"ckrft4kd9001bl0xog71oem7c","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdd001kl0xoez8w198k"},{"post_id":"ckrft4kda001fl0xo47h12fgp","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kde001ml0xo82yjbrao"},{"post_id":"ckrft4kd30011l0xo3iuv7vef","tag_id":"ckrft4kd40014l0xo00yt050y","_id":"ckrft4kdf001ql0xo9a5cawr0"},{"post_id":"ckrft4kdc001hl0xo6p71390z","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdg001tl0xo38mbaaec"},{"post_id":"ckrft4kdd001ll0xo7cw5a70q","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdh001xl0xo4cio5o10"},{"post_id":"ckrft4kd40015l0xo3yfa2cuz","tag_id":"ckrft4kd40014l0xo00yt050y","_id":"ckrft4kdi001zl0xo5pre1gj2"},{"post_id":"ckrft4kde001nl0xoe2sjg4bm","tag_id":"ckrft4kd40014l0xo00yt050y","_id":"ckrft4kdj0022l0xo88m83o6y"},{"post_id":"ckrft4kdg001ul0xo7ozj4l99","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdk0025l0xobtzu6wrr"},{"post_id":"ckrft4kdh001yl0xogk4t9x7z","tag_id":"ckrft4kd40014l0xo00yt050y","_id":"ckrft4kdl0029l0xodfiw8ier"},{"post_id":"ckrft4kdj0023l0xo1l5vae6v","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdm002cl0xodijpddom"},{"post_id":"ckrft4kdk0026l0xoe6jegmc0","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdn002gl0xofqzjdbmr"},{"post_id":"ckrft4kdi0020l0xo8q4t0atf","tag_id":"ckrft4kdk0024l0xo0r5y43sr","_id":"ckrft4kdo002jl0xocdv17ygg"},{"post_id":"ckrft4kdm002dl0xohrk4643r","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdp002ll0xo1puu3m1i"},{"post_id":"ckrft4kdo002kl0xo1hw47wfn","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdq002ql0xo8cz48yuf"},{"post_id":"ckrft4kdl002al0xo3xophloo","tag_id":"ckrft4kdn002fl0xo4fhk5yc7","_id":"ckrft4kdr002sl0xo7ssb00e0"},{"post_id":"ckrft4kdn002il0xo8w2tgxq6","tag_id":"ckrft4kdp002ol0xo3lar2w5l","_id":"ckrft4kds002xl0xod2044vug"},{"post_id":"ckrft4kds002wl0xo74wu02rc","tag_id":"ckrft4kcn0005l0xo8w9139rl","_id":"ckrft4kdt0030l0xo4zqvc8mo"},{"post_id":"ckrft4kdp002nl0xo5mx5dfnv","tag_id":"ckrft4kdr002vl0xochrn79dl","_id":"ckrft4kdu0032l0xog1czesmr"},{"post_id":"ckrft4kds002yl0xo4cxz70ss","tag_id":"ckrft4kcn0005l0xo8w9139rl","_id":"ckrft4kdv0035l0xoagjab4la"},{"post_id":"ckrft4kdu0033l0xo5nth7zdl","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdw0037l0xoecyoaoaz"},{"post_id":"ckrft4kdv0036l0xo0o2k1elk","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdx003al0xo5rd9b5gz"},{"post_id":"ckrft4kdx003bl0xobl3hh2i0","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdy003fl0xo9vlvafdt"},{"post_id":"ckrft4kdy003cl0xo0d96b8ox","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kdz003il0xobjgve1x6"},{"post_id":"ckrft4ke0003jl0xo19g2d4tb","tag_id":"ckrft4ke2003nl0xo0vxa11af","_id":"ckrft4ke4003vl0xo8ijd8m7y"},{"post_id":"ckrft4ke2003ol0xo6s5f51fa","tag_id":"ckrft4ke4003tl0xo7onj4kop","_id":"ckrft4ke70041l0xoesreh6gg"},{"post_id":"ckrft4ke5003xl0xogvk2dv56","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4ke80044l0xo6hdqe7ae"},{"post_id":"ckrft4ke70040l0xodidygxr6","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4ke90047l0xoacilhel2"},{"post_id":"ckrft4ke70043l0xob4uk2tf3","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kea0049l0xod36s8kg4"},{"post_id":"ckrft4ke80046l0xogmafawuz","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kea004bl0xo2sjj1d4w"},{"post_id":"ckrft4keb004el0xohr9le6uz","tag_id":"ckrft4kd40014l0xo00yt050y","_id":"ckrft4ked004jl0xo48ve0i36"},{"post_id":"ckrft4kej004xl0xodds85uov","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4ken0052l0xo25143mul"},{"post_id":"ckrft4kep0058l0xoaivz1twr","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4keq005cl0xoge0qbrar"},{"post_id":"ckrft4kes005il0xo5xwm79eo","tag_id":"ckrft4kd2000xl0xohg9bf9q2","_id":"ckrft4kew005ol0xof2lsbbno"},{"post_id":"ckrft4kes005gl0xo0j653kzg","tag_id":"ckrft4keu005ll0xo3ycweu11","_id":"ckrft4kf0005vl0xod3w1dcgv"},{"post_id":"ckrft4keu005ml0xo5s3rbg5r","tag_id":"ckrft4kez005tl0xo075t28bb","_id":"ckrft4kf40062l0xoda9sb35f"},{"post_id":"ckrft4kf2005zl0xo4yn647b3","tag_id":"ckrft4kcr000al0xo8ww8g4uo","_id":"ckrft4kf50065l0xofrora35n"},{"post_id":"ckrft4kex005pl0xo4kmo1pud","tag_id":"ckrft4kez005tl0xo075t28bb","_id":"ckrft4kf50068l0xo5y747olw"},{"post_id":"ckrft4kf1005wl0xo8v7i3f6t","tag_id":"ckrft4kf50066l0xo2e6ofgo5","_id":"ckrft4kf6006cl0xog7w465mf"}],"Tag":[{"name":"工作","_id":"ckrft4kcn0005l0xo8w9139rl"},{"name":"学习","_id":"ckrft4kcr000al0xo8ww8g4uo"},{"name":"基础命令","_id":"ckrft4kcz000ql0xo1rk37uxj"},{"name":"文档","_id":"ckrft4kd2000xl0xohg9bf9q2"},{"name":"概念介绍","_id":"ckrft4kd40014l0xo00yt050y"},{"name":"demo","_id":"ckrft4kdk0024l0xo0r5y43sr"},{"name":"使用心得","_id":"ckrft4kdn002fl0xo4fhk5yc7"},{"name":"小工具","_id":"ckrft4kdp002ol0xo3lar2w5l"},{"name":"减肥","_id":"ckrft4kdr002vl0xochrn79dl"},{"name":"工作经验","_id":"ckrft4ke2003nl0xo0vxa11af"},{"name":"优化","_id":"ckrft4ke4003tl0xo7onj4kop"},{"name":"测试","_id":"ckrft4keu005ll0xo3ycweu11"},{"name":"tips","_id":"ckrft4kez005tl0xo075t28bb"},{"name":"go","_id":"ckrft4kf50066l0xo2e6ofgo5"}]}}